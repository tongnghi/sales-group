{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json", "dbt_version": "1.5.1", "generated_at": "2023-08-17T04:00:18.081167Z", "invocation_id": "186b0939-7459-4e92-bc25-8b0a8199e0dc", "env": {}, "project_id": "ea876bced184e14355fc7ee7aa5719a1", "user_id": "d74f497a-afa5-48a8-8f05-48469a37ad95", "send_anonymous_usage_stats": true, "adapter_type": "redshift"}, "nodes": {"model.sales_group.farm_int_farms__unioned": {"database": "food", "schema": "nghi_dev", "name": "farm_int_farms__unioned", "resource_type": "model", "package_name": "sales_group", "path": "farm\\intermediate\\sales\\farm_int_farms__unioned.sql", "original_file_path": "models\\farm\\intermediate\\sales\\farm_int_farms__unioned.sql", "unique_id": "model.sales_group.farm_int_farms__unioned", "fqn": ["sales_group", "farm", "intermediate", "sales", "farm_int_farms__unioned"], "alias": "farm_int_farms__unioned", "checksum": {"name": "sha256", "checksum": "65569aeb7dfae27ae1cb7d8fafffc11b2281997cd5442e7ddf2ff9ac3373763a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.407846, "relation_name": "\"food\".\"nghi_dev\".\"farm_int_farms__unioned\"", "raw_code": "select\r\n    farmid::varchar,\r\n    farmname,\r\n    ftype,\r\n    buid::varchar,\r\n    buname,\r\n    sub,\r\n    regionid::varchar,\r\n    case when compcode is null then '9999' else compcode::varchar end as compcode\r\nfrom {{ ref(\"farm_stg_excel__master_farms\") }}\r\nwhere sub != '0'\r\n\r\nunion all\r\n\r\nselect\r\n    farmid,\r\n    farmname,\r\n    ftype,\r\n    buid::character varying(100),\r\n    buname,\r\n    sub,\r\n    regionid::character varying(100),\r\n    compcode::character varying(100)\r\nfrom {{ ref(\"farm_seed_sales_manual_farms\") }}", "language": "sql", "refs": [{"name": "farm_stg_excel__master_farms", "package": null, "version": null}, {"name": "farm_seed_sales_manual_farms", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.farm_stg_excel__master_farms", "seed.sales_group.farm_seed_sales_manual_farms"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_int_sales_cammy__joined_dims": {"database": "food", "schema": "nghi_dev", "name": "farm_int_sales_cammy__joined_dims", "resource_type": "model", "package_name": "sales_group", "path": "farm\\intermediate\\sales\\farm_int_sales_cammy__joined_dims.sql", "original_file_path": "models\\farm\\intermediate\\sales\\farm_int_sales_cammy__joined_dims.sql", "unique_id": "model.sales_group.farm_int_sales_cammy__joined_dims", "fqn": ["sales_group", "farm", "intermediate", "sales", "farm_int_sales_cammy__joined_dims"], "alias": "farm_int_sales_cammy__joined_dims", "checksum": {"name": "sha256", "checksum": "b55261f0113cc93a12c1d34d1eb4dd81735b9ebfa3cc79fac7d6a5d28a5dda86"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4212096, "relation_name": "\"food\".\"nghi_dev\".\"farm_int_sales_cammy__joined_dims\"", "raw_code": "{{ config(materialized=\"table\") }}\r\nselect\r\n    s.companycode as compcode,\r\n    s.billingtype,\r\n    s.source as db,\r\n    '' as so,\r\n    '' as do,\r\n    s.trandatemonthid::character(500) as perpost,\r\n    s.trandate,\r\n    s.batnbr,\r\n    '' as trantype,\r\n    '' as account,\r\n    s.sub_fix as sub,\r\n    '' as invoiceno,\r\n    '' as lineref,\r\n    0 as attackqty,\r\n    s.salesmanager as slsperid,\r\n    sm.salesmanagername as salesperson,\r\n    s.customer as custid,\r\n    s.customername as name,\r\n    case\r\n        when account in ('13682000', '13684000')\r\n        then 'Internal'\r\n        when\r\n            s.customer in (\r\n                'F800000',\r\n                'N23B000000',\r\n                'N26B000000',\r\n                'N26C000000',\r\n                'N39B000000',\r\n                'N45B000000',\r\n                'N58B000000',\r\n                'S02G000058',\r\n                'S02G000060',\r\n                'S20C000000',\r\n                'S02G000059',\r\n                'S02G000592',\r\n                'N04G000822',\r\n                'N06G000483',\r\n                'S02G000056',\r\n                'S02G000058',\r\n                '101407',\r\n                '104984',\r\n                '105133',\r\n                '107331',\r\n                '108467',\r\n                '108873'\r\n            )\r\n        then 'Internal'\r\n        when\r\n            (\r\n                s.customer = 'S07G000894'\r\n                and right(trim(s.sub_fix), 3) not in ('D71', 'C01')\r\n            )\r\n        then 'Internal'\r\n        else 'Customer'\r\n    end as channel,\r\n    m.materialname as descr,\r\n    '03B' as farm_code,\r\n    right(left(s.sub_fix, 8), 3) as pvkd,\r\n    right(s.sub_fix, 3) as product_code,\r\n    'Pig' as type_product,\r\n    'Sales' as issue_purpose,\r\n    0 as qty_so,\r\n    0 as qty,\r\n    0 as qty_in,\r\n    s.\"gi\u00e1 x.x\u01b0\u1edfng act\" as tranamt,\r\n    0 as curytransportfee,\r\n    0 as discountamt,\r\n    0 as volume,\r\n    0 as weight,\r\n    s.\"san lg act\" as volume_new,\r\n    0 as weight_new,\r\n    '107' as farmid,\r\n    'Cam My' as farmname,\r\n    'HEO' as ftype,\r\n    '1020' as buid,\r\n    '10' as regionid\r\nfrom\r\n    (\r\n        select\r\n            case\r\n                when material in ('S521020V3010')\r\n                then 'B103BS00B31'\r\n                when material in ('S521040V1010', 'S521040V3010', 'S521040V7010')\r\n                then 'B103BS00B32'\r\n                when\r\n                    material in (\r\n                        'S510280V3010',\r\n                        'S510280V7010',\r\n                        'S510337V1010',\r\n                        'S510337V3010',\r\n                        'S510337V7010',\r\n                        'S510399V1010',\r\n                        'S510399V3010',\r\n                        'S510399V7010'\r\n                    )\r\n                then 'B103BS00B33'\r\n                else ''\r\n            end as sub_fix,\r\n            *\r\n        from {{ ref(\"farm_stg_redshift__sales_cammy\") }}\r\n    ) s\r\nleft join\r\n    {{ source(\"farm_redshift__prd__dwh\", \"d_material\") }} m\r\n    on s.materialid = m.materialid\r\nleft join\r\n    {{ source(\"farm_redshift__prd__dwh\", \"d_distributionchannel\") }} ch\r\n    on s.distributionchannelid = ch.distributionchannelid\r\nleft join\r\n    {{ source(\"farm_redshift__prd__dwh\", \"d_salesmanager\") }} sm\r\n    on s.salesmanagerid = sm.salesmanagerid", "language": "sql", "refs": [{"name": "farm_stg_redshift__sales_cammy", "package": null, "version": null}], "sources": [["farm_redshift__prd__dwh", "d_material"], ["farm_redshift__prd__dwh", "d_salesmanager"], ["farm_redshift__prd__dwh", "d_distributionchannel"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_redshift__prd__dwh.d_material", "source.sales_group.farm_redshift__prd__dwh.d_salesmanager", "source.sales_group.farm_redshift__prd__dwh.d_distributionchannel", "model.sales_group.farm_stg_redshift__sales_cammy"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_int_sales_sol__added_farm_info": {"database": "food", "schema": "nghi_dev", "name": "farm_int_sales_sol__added_farm_info", "resource_type": "model", "package_name": "sales_group", "path": "farm\\intermediate\\sales\\farm_int_sales_sol__added_farm_info.sql", "original_file_path": "models\\farm\\intermediate\\sales\\farm_int_sales_sol__added_farm_info.sql", "unique_id": "model.sales_group.farm_int_sales_sol__added_farm_info", "fqn": ["sales_group", "farm", "intermediate", "sales", "farm_int_sales_sol__added_farm_info"], "alias": "farm_int_sales_sol__added_farm_info", "checksum": {"name": "sha256", "checksum": "36b9083d788276ecb0ba100f468c2beef253924189b1da19f788a97bb2ce5856"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4241395, "relation_name": "\"food\".\"nghi_dev\".\"farm_int_sales_sol__added_farm_info\"", "raw_code": "{{ config(materialized=\"table\") }}\r\n\r\nselect\r\n    case\r\n        when f.compcode is not null then f.compcode else u.company_code\r\n    end as company_code,\r\n    billing_type,\r\n    db as \"database\",\r\n    so as sales_order,\r\n    \"do\" as delivery_order,\r\n    perpost,\r\n    trandate,\r\n    batnbr as batch_number,\r\n    trantype as invoice_type,\r\n    account as gl_account,\r\n    u.sub,\r\n    invoiceno as invoice_number,\r\n    lineref,\r\n    attackqty,\r\n    slsperid as sales_person_id,\r\n    salesperson as sales_person_name,\r\n    custid as customer_id,\r\n    name as customer_name,\r\n    case\r\n        when\r\n            account in ('13682000', '13684000')\r\n            or custid in (\r\n                'F800000',\r\n                'N23B000000',\r\n                'N26B000000',\r\n                'N26C000000',\r\n                'N39B000000',\r\n                'N45B000000',\r\n                'N58B000000',\r\n                'S02G000058',\r\n                'S02G000060',\r\n                'S20C000000',\r\n                'S02G000059',\r\n                'S02G000592',\r\n                'N04G000822',\r\n                'N06G000483',\r\n                'S02G000056',\r\n                'S02G000058',\r\n                '101407',\r\n                '104984',\r\n                '105133',\r\n                '107331',\r\n                '108467',\r\n                '108873'\r\n            )\r\n            or (custid = 'S07G000894' and right(trim(u.sub), 3) not in ('D71', 'C01'))\r\n        then 'Internal'\r\n        else 'Customer'\r\n    end as channel,\r\n    descr as description,\r\n    farm_code,\r\n    right(left(u.sub, 8), 3) as pvkd,  -- EN l\u00e0 g\u00ec?\r\n    right(trim(u.sub), 3) as product_code,\r\n    case\r\n        when left(right(trim(u.sub), 3), 1) = 'P' then 'Chicken' else 'Pig'\r\n    end as product_type,\r\n    case\r\n        when left(account, 5) = '13682' then 'Internal Use' else 'Sales'\r\n    end as issue_purpose,\r\n    case\r\n        when ftype = 'GA' or ftype = 'GAG' and trantype = 'CM'\r\n        then qty_so * (-1)\r\n        else qty_so\r\n    end as qty_so,\r\n    qty,\r\n    qty_in,\r\n    case\r\n        when billing_type = 'ZS1'\r\n        then\r\n            (\r\n                case\r\n                    when\r\n                        right(left(u.sub, 5), 3) in ('18C', '45B')\r\n                        and left(account, 5) = '13684'\r\n                    then 0\r\n                    else tranamt\r\n                end\r\n            )\r\n            * (-1)\r\n        else\r\n            (\r\n                case\r\n                    when\r\n                        right(left(u.sub, 5), 3) in ('18C', '45B')\r\n                        and left(account, 5) = '13684'\r\n                    then 0\r\n                    else tranamt\r\n                end\r\n            )\r\n    end as amount,  -- tranamt\r\n    case\r\n        when billing_type = 'ZS1' then curytransportfee * (-1) else curytransportfee\r\n    end as transport_fee,  -- curytransportfee,\r\n    case\r\n        when billing_type = 'ZS1' then discountamt * (-1) else discountamt\r\n    end as discount_amount,  -- discountamt,\r\n    case\r\n        when issue_purpose = 'Internal Use'\r\n        then qty\r\n        when product_code in ('P50', 'P60', 'P62', 'P51', 'P52')\r\n        then qty\r\n        when left(product_code, 1) != 'P'\r\n        then qty_so\r\n        else qty_so\r\n    end as volume,\r\n    case\r\n        when issue_purpose = 'Internal Use'\r\n        then 100 * qty\r\n        when\r\n            product_code\r\n            in ('P50', 'P60', 'B31', 'B32', 'B33', 'P51', 'P52', 'P62', 'P15', 'P16')\r\n        then 0\r\n        else qty\r\n    end as \"weight\",\r\n    case\r\n        when billing_type = 'ZS1'\r\n        then\r\n            (\r\n                case\r\n                    when volume = 0\r\n                    then 0\r\n                    when qty < 0 and volume > 0\r\n                    then -1 * volume\r\n                    else volume\r\n                end\r\n            )\r\n        else\r\n            (\r\n                case\r\n                    when volume = 0\r\n                    then 0\r\n                    when qty < 0 and volume > 0\r\n                    then -1 * volume\r\n                    else volume\r\n                end\r\n            )\r\n    end as volume_new,\r\n    (\r\n        case\r\n            when product_type = 'Pig' and product_code not in ('D75', 'D80')\r\n            then \"weight\" + attackqty\r\n            else \"weight\"\r\n        end\r\n    )\r\n    * (case when billing_type = 'ZS1' then -1 else 1 end) as weight_new,\r\n    farmid as farm_id,\r\n    farmname as farm_name,\r\n    ftype as farm_type,\r\n    buid as bu_id,\r\n    regionid as region_id\r\nfrom\r\n    (\r\n        select right(left(sub, 5), 3) as farm_code, *\r\n        from {{ ref(\"farm_int_sales_sol__unioned_adj_rev\") }}\r\n    ) u\r\n\r\nleft join {{ ref(\"farm_int_farms__unioned\") }} f on u.farm_code = f.sub", "language": "sql", "refs": [{"name": "farm_int_sales_sol__unioned_adj_rev", "package": null, "version": null}, {"name": "farm_int_farms__unioned", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.farm_int_sales_sol__unioned_adj_rev", "model.sales_group.farm_int_farms__unioned"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_int_sales_sol__unioned_adj_rev": {"database": "food", "schema": "nghi_dev", "name": "farm_int_sales_sol__unioned_adj_rev", "resource_type": "model", "package_name": "sales_group", "path": "farm\\intermediate\\sales\\farm_int_sales_sol__unioned_adj_rev.sql", "original_file_path": "models\\farm\\intermediate\\sales\\farm_int_sales_sol__unioned_adj_rev.sql", "unique_id": "model.sales_group.farm_int_sales_sol__unioned_adj_rev", "fqn": ["sales_group", "farm", "intermediate", "sales", "farm_int_sales_sol__unioned_adj_rev"], "alias": "farm_int_sales_sol__unioned_adj_rev", "checksum": {"name": "sha256", "checksum": "e840ed04fa9dea7662859f18b4414878f35c488353bf660b76b44b304c231a2a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4272094, "relation_name": "\"food\".\"nghi_dev\".\"farm_int_sales_sol__unioned_adj_rev\"", "raw_code": "{{ config(materialized=\"table\") }}\r\n\r\nselect 'ZF2' as billing_type, *\r\nfrom {{ ref(\"farm_int_sol_vsdwh_salesvolumned__filtered_to_sales\") }}\r\n\r\nunion all\r\n\r\nselect 'ZF2' as billing_type, null as company_code, *\r\nfrom {{ ref(\"farm_stg_excel__master_data_adj\") }}\r\n\r\nunion all\r\n\r\nselect 'ZS1' as billing_type, null as company_code, *\r\nfrom {{ ref(\"farm_stg_excel__master_data_rev\") }}", "language": "sql", "refs": [{"name": "farm_int_sol_vsdwh_salesvolumned__filtered_to_sales", "package": null, "version": null}, {"name": "farm_stg_excel__master_data_adj", "package": null, "version": null}, {"name": "farm_stg_excel__master_data_rev", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.farm_int_sol_vsdwh_salesvolumned__filtered_to_sales", "model.sales_group.farm_stg_excel__master_data_adj", "model.sales_group.farm_stg_excel__master_data_rev"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_int_sol_vsdwh_salesvolumned__filtered_to_sales": {"database": "food", "schema": "nghi_dev", "name": "farm_int_sol_vsdwh_salesvolumned__filtered_to_sales", "resource_type": "model", "package_name": "sales_group", "path": "farm\\intermediate\\sales\\farm_int_sol_vsdwh_salesvolumned__filtered_to_sales.sql", "original_file_path": "models\\farm\\intermediate\\sales\\farm_int_sol_vsdwh_salesvolumned__filtered_to_sales.sql", "unique_id": "model.sales_group.farm_int_sol_vsdwh_salesvolumned__filtered_to_sales", "fqn": ["sales_group", "farm", "intermediate", "sales", "farm_int_sol_vsdwh_salesvolumned__filtered_to_sales"], "alias": "farm_int_sol_vsdwh_salesvolumned__filtered_to_sales", "checksum": {"name": "sha256", "checksum": "eced5219c45b94da9e432d24d96f0157eda09311c1a909e15b355ffafb9eae10"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.430212, "relation_name": "\"food\".\"nghi_dev\".\"farm_int_sol_vsdwh_salesvolumned__filtered_to_sales\"", "raw_code": "{{ config(materialized=\"table\") }}\r\n\r\nselect *\r\nfrom {{ ref(\"farm_stg_sol__vsdwh_salesvolumed\") }}\r\nwhere\r\n    (\r\n        descr not ilike '%ph\u00e2n h\u1eefu c\u01a1%'\r\n        and descr not ilike '%m\u00edt%'\r\n        and descr not ilike '%chu\u1ed1i%'\r\n        and descr not ilike '%chuoi say%'\r\n        and descr not ilike '%tinh d\u1ea7u%'\r\n        and descr not ilike '%tinh dau%'\r\n        and descr not ilike '%h\u1ed9p s\u1ea3%'\r\n    )\r\n    and (\r\n        left(account, 5) = '13684'\r\n        or left(account, 3) = '511'\r\n        or left(account, 8) = '71132000'\r\n        or left(account, 8) = '63231421'\r\n        or (\r\n            left(account, 5) = '13682'\r\n            and (upper(unitdesc) = 'CON' or upper(unitdesc) = 'HEAD')\r\n        )\r\n    )", "language": "sql", "refs": [{"name": "farm_stg_sol__vsdwh_salesvolumed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.farm_stg_sol__vsdwh_salesvolumed"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_sales": {"database": "farm", "schema": "nghi_dev", "name": "farm_sales", "resource_type": "model", "package_name": "sales_group", "path": "farm\\marts\\sales\\farm_sales.sql", "original_file_path": "models\\farm\\marts\\sales\\farm_sales.sql", "unique_id": "model.sales_group.farm_sales", "fqn": ["sales_group", "farm", "marts", "sales", "farm_sales"], "alias": "sales", "checksum": {"name": "sha256", "checksum": "ccc4f226b8c9c88543afc4a83a353bbe3ab1c6348d263c147f4aa10c3451e62e"}, "config": {"enabled": true, "alias": "sales", "schema": "marts_sales", "database": "farm", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\farm\\marts\\sales\\_farm_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "farm", "bind": "{{ true if target.name == 'prod' else false }}", "schema": "marts_sales", "alias": "sales", "materialized": "table", "ra3_node": true}, "created_at": 1692186446.8707612, "relation_name": "\"farm\".\"nghi_dev\".\"sales\"", "raw_code": "with\r\n    farm_solomon as (select * from {{ ref(\"farm_int_sales_sol__added_farm_info\") }}),\r\n\r\n    farm_cammy as (select * from {{ ref(\"farm_int_sales_cammy__joined_dims\") }}),\r\n\r\n    unioned as (\r\n\r\n        select *\r\n        from farm_solomon\r\n\r\n        union all\r\n\r\n        select *\r\n        from farm_cammy\r\n    ),\r\n    -- users don't want see the sales data not completed today\r\n    exclude_today as (\r\n        select *\r\n        from unioned\r\n        where trandate < trunc(convert_timezone('Asia/Ho_Chi_Minh', getdate()))\r\n    )\r\n\r\nselect *\r\nfrom exclude_today", "language": "sql", "refs": [{"name": "farm_int_sales_sol__added_farm_info", "package": null, "version": null}, {"name": "farm_int_sales_cammy__joined_dims", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.farm_int_sales_sol__added_farm_info", "model.sales_group.farm_int_sales_cammy__joined_dims"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_excel__budget": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_excel__budget", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\excel\\sales\\farm_stg_excel__budget.sql", "original_file_path": "models\\farm\\staging\\excel\\sales\\farm_stg_excel__budget.sql", "unique_id": "model.sales_group.farm_stg_excel__budget", "fqn": ["sales_group", "farm", "staging", "excel", "sales", "farm_stg_excel__budget"], "alias": "farm_stg_excel__budget", "checksum": {"name": "sha256", "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.4363463, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_excel__budget\"", "raw_code": "", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_excel__exchange_rate": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_excel__exchange_rate", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\excel\\sales\\farm_stg_excel__exchange_rate.sql", "original_file_path": "models\\farm\\staging\\excel\\sales\\farm_stg_excel__exchange_rate.sql", "unique_id": "model.sales_group.farm_stg_excel__exchange_rate", "fqn": ["sales_group", "farm", "staging", "excel", "sales", "farm_stg_excel__exchange_rate"], "alias": "farm_stg_excel__exchange_rate", "checksum": {"name": "sha256", "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.4393516, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_excel__exchange_rate\"", "raw_code": "", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_excel__master_data_adj": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_excel__master_data_adj", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\excel\\sales\\farm_stg_excel__master_data_adj.sql", "original_file_path": "models\\farm\\staging\\excel\\sales\\farm_stg_excel__master_data_adj.sql", "unique_id": "model.sales_group.farm_stg_excel__master_data_adj", "fqn": ["sales_group", "farm", "staging", "excel", "sales", "farm_stg_excel__master_data_adj"], "alias": "farm_stg_excel__master_data_adj", "checksum": {"name": "sha256", "checksum": "2b80d1258e941f7dd8c4ca25ba46ca29297c159f78d8e5d5a53d4b3cb59bc643"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.44236, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_excel__master_data_adj\"", "raw_code": "{{ config(materialized=\"table\") }}\r\n\r\nselect\r\n    db::varchar,\r\n    so::varchar,\r\n    \"do\"::varchar,\r\n    perpost::varchar,\r\n    batnbr::varchar,\r\n    status::varchar,\r\n    trantype::varchar,\r\n    account::varchar,\r\n    sub::varchar,\r\n    trandate::timestamp,\r\n    invtid::varchar,\r\n    descr::varchar,\r\n    unitdesc::varchar,\r\n    qty_so::double precision,\r\n    qty::double precision,\r\n    qty_in::double precision,\r\n    unitprice::double precision,\r\n    tranamt::double precision,\r\n    name::varchar,\r\n    custid::varchar,\r\n    invoiceno::varchar,\r\n    sophieuxuat::varchar,\r\n    slsperid::varchar,\r\n    salesperson::varchar,\r\n    crtd_user::varchar,\r\n    baseprice::double precision,\r\n    contractprice::double precision,\r\n    shipaddr::varchar,\r\n    shipviaid::varchar,\r\n    bigi_qty::integer,\r\n    bigi_kg::integer,\r\n    promotion_desc::varchar,\r\n    siteid::varchar,\r\n    brid::varchar,\r\n    lineref::varchar,\r\n    shipperlineref::varchar,\r\n    serino::varchar,\r\n    attackid::varchar,\r\n    attackqty::double precision,\r\n    curyattackprice::double precision,\r\n    curylineamt::double precision,\r\n    curytransportfee::double precision,\r\n    curyattackamt::double precision,\r\n    curyextamt::double precision,\r\n    discountamt::double precision,\r\n    ttsauck::double precision,\r\n    tienvat::double precision,\r\n    tiendhang::double precision\r\nfrom {{ source(\"farm_excel_sales\", \"master_data_adj\") }}", "language": "sql", "refs": [], "sources": [["farm_excel_sales", "master_data_adj"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_excel_sales.master_data_adj"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_excel__master_data_rev": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_excel__master_data_rev", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\excel\\sales\\farm_stg_excel__master_data_rev.sql", "original_file_path": "models\\farm\\staging\\excel\\sales\\farm_stg_excel__master_data_rev.sql", "unique_id": "model.sales_group.farm_stg_excel__master_data_rev", "fqn": ["sales_group", "farm", "staging", "excel", "sales", "farm_stg_excel__master_data_rev"], "alias": "farm_stg_excel__master_data_rev", "checksum": {"name": "sha256", "checksum": "ce479dcffe0bed9eb1fe1a40cce782c3de3492705161cd948b78375a51cfe64f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4443488, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_excel__master_data_rev\"", "raw_code": "{{ config(materialized=\"table\") }}\r\n\r\nselect\r\n    db::varchar,\r\n    so::varchar,\r\n    \"do\"::varchar,\r\n    perpost::varchar,\r\n    batnbr::varchar,\r\n    status::varchar,\r\n    trantype::varchar,\r\n    account::varchar,\r\n    sub::varchar,\r\n    trandate::timestamp,\r\n    invtid::varchar,\r\n    descr::varchar,\r\n    unitdesc::varchar,\r\n    qty_so::double precision,\r\n    qty::double precision,\r\n    qty_in::double precision,\r\n    unitprice::double precision,\r\n    tranamt::double precision,\r\n    name::varchar,\r\n    custid::varchar,\r\n    invoiceno::varchar,\r\n    sophieuxuat::varchar,\r\n    slsperid::varchar,\r\n    salesperson::varchar,\r\n    crtd_user::varchar,\r\n    baseprice::double precision,\r\n    contractprice::double precision,\r\n    shipaddr::varchar,\r\n    shipviaid::varchar,\r\n    bigi_qty::integer,\r\n    bigi_kg::integer,\r\n    promotion_desc::varchar,\r\n    siteid::varchar,\r\n    brid::varchar,\r\n    lineref::varchar,\r\n    shipperlineref::varchar,\r\n    serino::varchar,\r\n    attackid::varchar,\r\n    attackqty::double precision,\r\n    curyattackprice::double precision,\r\n    curylineamt::double precision,\r\n    curytransportfee::double precision,\r\n    curyattackamt::double precision,\r\n    curyextamt::double precision,\r\n    discountamt::double precision,\r\n    ttsauck::double precision,\r\n    tienvat::double precision,\r\n    tiendhang::double precision\r\nfrom {{ source(\"farm_excel_sales\", \"master_data_rev\") }}", "language": "sql", "refs": [], "sources": [["farm_excel_sales", "master_data_rev"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_excel_sales.master_data_rev"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_excel__master_farms": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_excel__master_farms", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\excel\\sales\\farm_stg_excel__master_farms.sql", "original_file_path": "models\\farm\\staging\\excel\\sales\\farm_stg_excel__master_farms.sql", "unique_id": "model.sales_group.farm_stg_excel__master_farms", "fqn": ["sales_group", "farm", "staging", "excel", "sales", "farm_stg_excel__master_farms"], "alias": "farm_stg_excel__master_farms", "checksum": {"name": "sha256", "checksum": "c1736e911aee558526433c881b6362c851d5182d18be2a7688df15b91d55eceb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.4482784, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_excel__master_farms\"", "raw_code": "select\r\n    farmid,\r\n    farmname,\r\n    f_type as ftype,\r\n    buid,\r\n    buname,\r\n    farm_sub_code as sub,\r\n    regionid,\r\n    case when compcode is null then '9999' else compcode end as compcode\r\nfrom {{ source(\"farm_excel_sales\", \"master_data_farm_info\") }}", "language": "sql", "refs": [], "sources": [["farm_excel_sales", "master_data_farm_info"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_excel_sales.master_data_farm_info"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_redshift__sales_cammy": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_redshift__sales_cammy", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\redshift\\farm_stg_redshift__sales_cammy.sql", "original_file_path": "models\\farm\\staging\\redshift\\farm_stg_redshift__sales_cammy.sql", "unique_id": "model.sales_group.farm_stg_redshift__sales_cammy", "fqn": ["sales_group", "farm", "staging", "redshift", "farm_stg_redshift__sales_cammy"], "alias": "farm_stg_redshift__sales_cammy", "checksum": {"name": "sha256", "checksum": "c6f68f85be610153fd4bd0b11c0e8f530e995e103fa83c2584589c04d2e0dd36"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4516907, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_redshift__sales_cammy\"", "raw_code": "{{ config(materialized=\"table\") }}\r\n\r\nselect *\r\nfrom {{ source(\"farm_redshift__prd__dwh\", \"f_actualsales\") }}\r\nwhere salesgroupid = '60' and trandatemonthid >= '202201'", "language": "sql", "refs": [], "sources": [["farm_redshift__prd__dwh", "f_actualsales"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_redshift__prd__dwh.f_actualsales"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sap_ecc__sales_cam_my": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sap_ecc__sales_cam_my", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sap_ecc\\farm_stg_sap_ecc__sales_cam_my.sql", "original_file_path": "models\\farm\\staging\\sap_ecc\\farm_stg_sap_ecc__sales_cam_my.sql", "unique_id": "model.sales_group.farm_stg_sap_ecc__sales_cam_my", "fqn": ["sales_group", "farm", "staging", "sap_ecc", "farm_stg_sap_ecc__sales_cam_my"], "alias": "farm_stg_sap_ecc__sales_cam_my", "checksum": {"name": "sha256", "checksum": "822ae07d4783158bc1912bb623e5107cc9002d519e1143a9c200ed6ee18b6d0f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.4548452, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sap_ecc__sales_cam_my\"", "raw_code": "select 1", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "003dd1d43c335f8e2b81302f188b9cf98028851efb723486d150997518602821"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4568453, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"farm_sol_arwblapp\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["farm_sol_arwblapp", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_arwblapp.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "b9a8ed74ddfeafd99b980e03abe1271952f9097034999175d2ba39569fa4516b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.459845, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"farm_sol_arwhyapp\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["farm_sol_arwhyapp", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_arwhyapp.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "5c2ad54c18da6f73f46388cc736adbb3f66e607c77fc41be4b0bd67421f62fc8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4629173, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"farm_sol_bsh1001app\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["farm_sol_bsh1001app", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_bsh1001app.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "268363144274bd9031c6f88f5ccfbcd726aa6eb8f0dab446006df24f413ca57d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4665031, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"farm_sol_cbd1001app\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["farm_sol_cbd1001app", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_cbd1001app.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "977281991355c178b3a660b7acda0ef6e35bea922ed11f3c28b574d43d10d690"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.469729, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect \r\nbegpernbr,\r\nperiodactivityneg,\r\nsub,\r\ncpnyid,\r\nperiodactivitypos,\r\nlegal_name,\r\ndramttot,\r\nendingbalance,\r\nledgerid,\r\nacct,\r\nlegal,\r\ncramttot,\r\nendpernbr,\r\nbegbal,\r\nbalancetype,\r\nstartingbalance,\r\nfiscyr\r\nfrom {{ source(\"farm_sol_dnb2001app\", \"xp_01610ab_accthist_erp_final\") }}\r\nwhere left(sub,2) != 'C1'", "language": "sql", "refs": [], "sources": [["farm_sol_dnb2001app", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_dnb2001app.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "92d515326da5599e7ad602cb4107ff0c82ed02a6945358b8390db09633a9994a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4727302, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect\r\nbegpernbr,\r\nperiodactivityneg,\r\nsub,\r\ncpnyid,\r\nperiodactivitypos,\r\nlegal_name,\r\ndramttot,\r\nendingbalance,\r\nledgerid,\r\nacct,\r\nlegal,\r\ncramttot,\r\nendpernbr,\r\nbegbal,\r\nbalancetype,\r\nstartingbalance,\r\nfiscyr\r\n  from {{ source(\"farm_sol_fasiaapp\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["farm_sol_fasiaapp", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_fasiaapp.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "106340be7098ed707ce5be6f10c2afafb274838c8beac6f2993bc362ba97e8ec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4757302, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"farm_sol_gfcamapp1\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["farm_sol_gfcamapp1", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_gfcamapp1.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "37d7e4822cbfc5839041124a16e321866d960e9c06007eea10792ab323d6e092"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4787288, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"farm_sol_gfvmmapp\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["farm_sol_gfvmmapp", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_gfvmmapp.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "76c42060ce67f9e466b47b041b006c2285d86165931ada843cd4a7e027151f0c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4818492, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"farm_sol_laoapp\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["farm_sol_laoapp", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_laoapp.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "14816457c75213cdcf9877e8a9381ad0a16eb1d7f343865403a038768ba01c30"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4848485, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"farm_sol_mtr1001app\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["farm_sol_mtr1001app", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_mtr1001app.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "e02a8ebba46cf692b84d47ac720143e247166efa74207ed2cd2f9ebc6e65af6b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4889212, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"farm_sol_mtr2001app\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["farm_sol_mtr2001app", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_mtr2001app.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "0b994698d8e2ba30359522b2aa83686d76084552b5df78bfb17ee568fca9fec9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4919178, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"farm_sol_mtr2002app\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["farm_sol_mtr2002app", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_mtr2002app.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "4f934c345793070236f955e47b98a44faff37ad1a9b1f6082afb56f88acd296f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4949183, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"farm_sol_mym1001app\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["farm_sol_mym1001app", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_mym1001app.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final"], "alias": "farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "480817af92ba39cf3647e1838d7aceda91b3c8ec6ee7b6dad3153aeefe256649"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.4985597, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"farm_sol_starnapp\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["farm_sol_starnapp", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_starnapp.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_stg_sol__vsdwh_salesvolumed": {"database": "food", "schema": "nghi_dev", "name": "farm_stg_sol__vsdwh_salesvolumed", "resource_type": "model", "package_name": "sales_group", "path": "farm\\staging\\sol\\farm_stg_sol__vsdwh_salesvolumed.sql", "original_file_path": "models\\farm\\staging\\sol\\farm_stg_sol__vsdwh_salesvolumed.sql", "unique_id": "model.sales_group.farm_stg_sol__vsdwh_salesvolumed", "fqn": ["sales_group", "farm", "staging", "sol", "farm_stg_sol__vsdwh_salesvolumed"], "alias": "farm_stg_sol__vsdwh_salesvolumed", "checksum": {"name": "sha256", "checksum": "52e0e0792a46cc76a3807fc785d1a3f1fff8d34bffe1dbc368851c20fc3d874b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'farm' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.5020764, "relation_name": "\"food\".\"nghi_dev\".\"farm_stg_sol__vsdwh_salesvolumed\"", "raw_code": "{% set entities = {\r\n    \"dnb2001app\": \"2000\",\r\n    \"fasiaapp\": \"2000\",\r\n    \"arwhyapp\": \"2100\",\r\n    \"mtr2001app\": \"2200\",\r\n    \"mtr1001app\": \"2200\",\r\n    \"mtr2002app\": \"2200\",\r\n    \"cbd1001app\": \"5000\",\r\n} %}\r\n{% for db, company_code in entities.items() %}\r\n    select '{{ company_code }}' as company_code, *\r\n    from {{ source(\"farm_sol_\" ~ db, \"vsdwh_salesvolumed\") }}\r\n    {% if not loop.last -%}\r\n        union all\r\n    {%- endif %}\r\n{% endfor %}", "language": "sql", "refs": [], "sources": [["farm_sol_dnb2001app", "vsdwh_salesvolumed"], ["farm_sol_fasiaapp", "vsdwh_salesvolumed"], ["farm_sol_arwhyapp", "vsdwh_salesvolumed"], ["farm_sol_mtr2001app", "vsdwh_salesvolumed"], ["farm_sol_mtr1001app", "vsdwh_salesvolumed"], ["farm_sol_mtr2002app", "vsdwh_salesvolumed"], ["farm_sol_cbd1001app", "vsdwh_salesvolumed"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_dnb2001app.vsdwh_salesvolumed", "source.sales_group.farm_sol_fasiaapp.vsdwh_salesvolumed", "source.sales_group.farm_sol_arwhyapp.vsdwh_salesvolumed", "source.sales_group.farm_sol_mtr2001app.vsdwh_salesvolumed", "source.sales_group.farm_sol_mtr1001app.vsdwh_salesvolumed", "source.sales_group.farm_sol_mtr2002app.vsdwh_salesvolumed", "source.sales_group.farm_sol_cbd1001app.vsdwh_salesvolumed"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.ZPPR0019_formulaprice_bagamt": {"database": "food", "schema": "nghi_dev", "name": "ZPPR0019_formulaprice_bagamt", "resource_type": "model", "package_name": "sales_group", "path": "feed\\intermediate\\ZPPR0019_formulaprice_bagamt.sql", "original_file_path": "models\\feed\\intermediate\\ZPPR0019_formulaprice_bagamt.sql", "unique_id": "model.sales_group.ZPPR0019_formulaprice_bagamt", "fqn": ["sales_group", "feed", "intermediate", "ZPPR0019_formulaprice_bagamt"], "alias": "ZPPR0019_formulaprice_bagamt", "checksum": {"name": "sha256", "checksum": "fcb73997c1ca2f0da0d351757ed154f8221c89fc65907d5c038c2863c56d4b38"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.5091453, "relation_name": "\"food\".\"nghi_dev\".\"ZPPR0019_formulaprice_bagamt\"", "raw_code": "with \r\n--t\u1ea1o filter \u0111\u1ec3 l\u1ecdc theo \u0111\u1ea7u sp\r\nraw_data_filter as (\r\n\r\n        select \r\n                plant,\r\n                material,\r\n                ma_thanh_phan,\r\n                sanluongyeucau_KH,\r\n                sanluongyeucau_NK,\r\n                sanluongxacnhan_DVcoban,\r\n                giatrixacnhan,\r\n                left(material,1) as productlevel_1,\r\n                left(material,2) as productlevel_2,\r\n                left(ma_thanh_phan,1) as subproductlevel\r\n\r\n        from {{ ref(\"feed_stg_sap_ecc__draft_zppr0019_006\") }}\r\n       \r\n),\r\n\r\n\r\n--file load\r\nmaterial_P_tuSX as (\r\n        \r\n        select * from {{ ref(\"material_P_tuSX_fileload\") }}\r\n\r\n),\r\n\r\n-- l\u1ecdc theo m\u00e3 sp \u0111\u1ea7u 'P' t\u1eeb raw_data\r\nmaterial_P as (\r\n        select \r\n                plant,\r\n                material,\r\n                ma_thanh_phan,\r\n                sanluongyeucau_KH,\r\n                sanluongyeucau_NK,\r\n                sanluongxacnhan_DVcoban,\r\n                giatrixacnhan,\r\n                productlevel_1,\r\n                productlevel_2,\r\n                subproductlevel\r\n        from raw_data_filter\r\n        where productlevel_1 ='P' \r\n                and productlevel_2 not in ('PI')\r\n    ),\r\n\r\n\r\n\r\n--final material_P\r\nfinal_material_P as (\r\n        select \r\n                a.plant,\r\n                a.material,\r\n                a.ma_thanh_phan,\r\n                a.sanluongyeucau_KH,\r\n                a.sanluongyeucau_NK,\r\n                a.sanluongxacnhan_DVcoban,\r\n                a.giatrixacnhan,\r\n                coalesce(case when (a.plant = '1010' and left(a.ma_thanh_phan,2) = 'PI') then b.giatrixacnhan*a.sanluongxacnhan_DVcoban/b.sanluongxacnhan_DVcoban\r\n                        else a.giatrixacnhan end,0) as giatrixacnhan_final\r\n\r\n        from material_P a\r\n        left join material_P_tuSX b on a.plant = b.plant and a.ma_thanh_phan = b.ma_thanh_phan\r\n\r\n),\r\n\r\ngroup_material_P as (\r\n        select   \r\n                plant,\r\n                material,\r\n                sum(giatrixacnhan_final)/sum(sanluongxacnhan_DVcoban) as giabinhquan_P\r\n        from final_material_P\r\n        group by plant, material\r\n),\r\n\r\n\r\nmaterial_X as (\r\n\r\n        select \r\n                plant,\r\n                material,\r\n                ma_thanh_phan,\r\n                sanluongyeucau_KH,\r\n                sanluongyeucau_NK,\r\n                sanluongxacnhan_DVcoban,\r\n                giatrixacnhan,\r\n                productlevel_1,\r\n                productlevel_2,\r\n                subproductlevel\r\n        from raw_data_filter\r\n        where productlevel_1 ='X' \r\n),\r\n\r\n\r\nfinal_material_X as (\r\n        select \r\n                a.plant,\r\n                a.material,\r\n                a.ma_thanh_phan,\r\n                a.sanluongyeucau_KH,\r\n                a.sanluongyeucau_NK,\r\n                a.sanluongxacnhan_DVcoban,\r\n                a.giatrixacnhan,\r\n                coalesce(case when (left(a.ma_thanh_phan,1) = 'P') then b.giabinhquan_P*a.sanluongxacnhan_DVcoban\r\n                        else a.giatrixacnhan end,0) as giatrixacnhan_final\r\n\r\n        from material_X a\r\n        left join group_material_P b \r\n        on a.plant = b.plant and a.ma_thanh_phan = b.material\r\n),\r\n\r\ngroup_material_X as (\r\n        select   \r\n                plant,\r\n                material,\r\n                sum(giatrixacnhan_final),sum(sanluongxacnhan_DVcoban), \r\n                sum(giatrixacnhan_final)/sum(sanluongxacnhan_DVcoban) as giabinhquan_X\r\n        from final_material_X\r\n        group by plant, material\r\n\r\n),\r\n\r\n/* t\u00ecm hi\u1ec3u t\u1ea1i sao distinct*/\r\nmaterial_C as (\r\n        select distinct\r\n                plant,\r\n                material,\r\n                ma_thanh_phan,\r\n                sanluongyeucau_KH,\r\n                sanluongyeucau_NK,\r\n                sanluongxacnhan_DVcoban,\r\n                giatrixacnhan,\r\n                productlevel_1,\r\n                productlevel_2,\r\n                subproductlevel\r\n        from raw_data_filter\r\n        where productlevel_1 ='C' and subproductlevel not in ('B','C') \r\n),\r\n\r\nfinal_material_C as (\r\n\r\n        select distinct\r\n                a.plant,\r\n                a.material,\r\n                a.ma_thanh_phan,\r\n                a.sanluongyeucau_KH,\r\n                a.sanluongyeucau_NK,\r\n                a.sanluongxacnhan_DVcoban,\r\n                a.giatrixacnhan,\r\n                coalesce(case when (left(a.ma_thanh_phan,1) = 'T' or left(a.ma_thanh_phan,1) = 'C') then a.giatrixacnhan\r\n                        else b.giabinhquan_X*a.sanluongxacnhan_DVcoban end,0) as giatrixacnhan_final\r\n               \r\n        from material_C a\r\n        left join group_material_X b \r\n        on a.plant = b.plant and a.ma_thanh_phan = b.material\r\n\r\n),\r\n\r\ngroup_material_C as (\r\n        select \r\n                plant,\r\n                material,\r\n                sum(giatrixacnhan_final) as giatrixacnhan_final,\r\n                sum(sanluongxacnhan_DVcoban) as sanluongxacnhan_DVcoban\r\n        from final_material_C\r\n        group by plant, material\r\n),\r\n\r\n\r\nmaterial_B as (\r\n\r\n        select \r\n                plant,\r\n                material,\r\n                ma_thanh_phan,\r\n                sanluongyeucau_KH,\r\n                sanluongyeucau_NK,\r\n                sanluongxacnhan_DVcoban,\r\n                giatrixacnhan,\r\n                productlevel_1,\r\n                productlevel_2,\r\n                subproductlevel\r\n        from raw_data_filter\r\n        where productlevel_1 ='C' and ma_thanh_phan like 'B%%'\r\n\r\n),\r\n\r\nmabaobi_doichieu as (\r\n        select \r\n                mabaobi_doichieu\r\n        from {{ ref(\"mabaobi_doichieu_fileload\")  }}\r\n),\r\n\r\nfinal_material_B as (\r\n\r\n        select distinct\r\n                a.plant,\r\n                a.material,\r\n                a.ma_thanh_phan,\r\n                a.sanluongyeucau_KH,\r\n                a.sanluongyeucau_NK,\r\n                a.sanluongxacnhan_DVcoban,\r\n                a.giatrixacnhan,\r\n                a.giatrixacnhan as giatrixacnhan_final,\r\n                case when (b.mabaobi_doichieu is not null) then  0\r\n                        else a.sanluongxacnhan_DVcoban end as sanluong\r\n               \r\n        from material_B a\r\n        left join mabaobi_doichieu b \r\n        on a.ma_thanh_phan = b.mabaobi_doichieu\r\n),\r\n\r\ngroup_material_B as (\r\n        select \r\n                plant,\r\n                material,\r\n                sum(giatrixacnhan_final),\r\n                sum(sanluongxacnhan_DVcoban)\r\n        from final_material_B\r\n        group by plant, material\r\n),\r\n\r\npivot_final_material_B as (\r\n        select \r\n                plant,\r\n                material,\r\n                sum(sanluongxacnhan_DVcoban) as a,\r\n                sum(giatrixacnhan_final) as b,\r\n                case \r\n                        when (right(material,2) = '01') then b/a/40\r\n                        when (right(material,3) = '300') then b/a/600\r\n                        else b/a/right(material,2)::float \r\n                end as giabaobi            \r\n\r\n        from final_material_B\r\n        group by plant, material\r\n),\r\n\r\npivot_final_material_C as (\r\n        select  \r\n                a.plant,\r\n                a.material,\r\n                sanluongxacnhan_DVcoban,\r\n                giatrixacnhan_final,\r\n                giatrixacnhan_final/sanluongxacnhan_DVcoban as raw_gia_version,\r\n                giabaobi as baobi\r\n\r\n        from group_material_C a\r\n        left join pivot_final_material_B b \r\n        on a.plant = b.plant and a.material = b.material\r\n\r\n),\r\n\r\n---- tr\u01b0\u1eddng h\u1ee3p thay bao kh\u00f4ng t\u00ednh theo BOM nh\u01b0 ra th\u00e0nh ph\u1ea9m C\r\nthaybao_C as (\r\n        select distinct\r\n                plant,\r\n                material,\r\n                ma_thanh_phan,\r\n                sanluongyeucau_KH,\r\n                sanluongyeucau_NK,\r\n                sanluongxacnhan_DVcoban,\r\n                giatrixacnhan,\r\n                productlevel_1,\r\n                productlevel_2,\r\n                subproductlevel\r\n        from raw_data_filter\r\n        where productlevel_1 ='C' and subproductlevel like 'C%%'\r\n\r\n)\r\n\r\nselect * from pivot_final_material_C\r\n\r\n--TODO:\r\n-- tr\u01b0\u1eddng h\u1ee3p PI t\u00ednh ri\u00eang nh\u01b0 1 th\u00e0nh ph\u1ea9m", "language": "sql", "refs": [{"name": "feed_stg_sap_ecc__draft_zppr0019_006", "package": null, "version": null}, {"name": "material_P_tuSX_fileload", "package": null, "version": null}, {"name": "mabaobi_doichieu_fileload", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.feed_stg_sap_ecc__draft_zppr0019_006", "seed.sales_group.material_P_tuSX_fileload", "seed.sales_group.mabaobi_doichieu_fileload"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_int_zmllistn__calculate_internal_entry": {"database": "food", "schema": "nghi_dev", "name": "feed_int_zmllistn__calculate_internal_entry", "resource_type": "model", "package_name": "sales_group", "path": "feed\\intermediate\\margin\\feed_int_zmllistn__calculate_internal_entry.sql", "original_file_path": "models\\feed\\intermediate\\margin\\feed_int_zmllistn__calculate_internal_entry.sql", "unique_id": "model.sales_group.feed_int_zmllistn__calculate_internal_entry", "fqn": ["sales_group", "feed", "intermediate", "margin", "feed_int_zmllistn__calculate_internal_entry"], "alias": "feed_int_zmllistn__calculate_internal_entry", "checksum": {"name": "sha256", "checksum": "f56ae2d51bd07d581d0cc43d78ebe25cfc7e26a340e17cfe3e73f76e4a34134a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.5123444, "relation_name": "\"food\".\"nghi_dev\".\"feed_int_zmllistn__calculate_internal_entry\"", "raw_code": "with total_ as (\r\n\r\n    select \r\n        plant, \r\n        material, \r\n        cost_component_name,\r\n        total_qty_expenditure,\r\n        total_amt_expenditure,\r\n        ending_qty, \r\n        ending_amt\r\n    from {{ ref(\"feed_stg_sap_ecc__draft_zmllistn_005\") }}\r\n    where row_type = '\u0418\u0442\u043e\u0433'\r\n\r\n),\r\n\r\nsum_qty as (\r\n\r\n    select plant, material, sum(total_qty_expenditure) as qty, sum(ending_qty) as ending_qty\r\n    from total_\r\n    group by plant, material\r\n\r\n),\r\n\r\ntotal_ee as (\r\n\r\n    select plant, material, cost_component_name, total_amt_expenditure from total_\r\n\r\n),\r\n\r\npivot_total_ee as (\r\n\r\n    select \r\n        plant,\r\n        material,\r\n        -- if 0 then apply another formula\r\n        coalesce(\"primary material\", 0) as primary_material, \r\n        coalesce(\"packaging material\", 0) as packaging_material,\r\n        coalesce(\"labour cost\", 0) as labour_cost,\r\n        coalesce(\"machinery cost\", 0) as machinery_cost,\r\n        coalesce(\"electricity cost\", 0) as electricity_cost,\r\n        coalesce(\"steam cost\", 0) as steam_cost,\r\n        coalesce(\"equipment cost\", 0) as equipment_cost,\r\n        coalesce(\"overhead\", 0) as overhead,\r\n        coalesce(\"subcontract cost\", 0) as subcontract_cost\r\n    from total_ee \r\n    pivot ( sum(total_amt_expenditure) for cost_component_name in ('Primary material','Packaging material','Labour cost', 'Machinery cost','Electricity cost','Steam cost','Equipment cost','Overhead','Subcontract cost') )\r\n    \r\n),\r\n\r\ntotal_eb as (\r\n\r\n    select plant, material, cost_component_name, ending_amt from total_\r\n\r\n),\r\n\r\npivot_total_eb as (\r\n\r\n    select \r\n        plant,\r\n        material,\r\n        -- if 0 then apply another formula\r\n        coalesce(\"primary material\", 0) as primary_material, \r\n        coalesce(\"packaging material\", 0) as packaging_material,\r\n        coalesce(\"labour cost\", 0) as labour_cost,\r\n        coalesce(\"machinery cost\", 0) as machinery_cost,\r\n        coalesce(\"electricity cost\", 0) as electricity_cost,\r\n        coalesce(\"steam cost\", 0) as steam_cost,\r\n        coalesce(\"equipment cost\", 0) as equipment_cost,\r\n        coalesce(\"overhead\", 0) as overhead,\r\n        coalesce(\"subcontract cost\", 0) as subcontract_cost\r\n    from total_eb\r\n    pivot ( sum(ending_amt) for cost_component_name in ('Primary material','Packaging material','Labour cost', 'Machinery cost','Electricity cost','Steam cost','Equipment cost','Overhead','Subcontract cost') )\r\n    \r\n),\r\n\r\nz_total as (\r\n    select \r\n        sum_qty.plant,\r\n        sum_qty.material,\r\n        sum_qty.qty,\r\n        sum_qty.ending_qty,\r\n\r\n        case when sum_qty.qty != 0 then pivot_total_ee.primary_material / sum_qty.qty \r\n            else pivot_total_eb.primary_material / sum_qty.ending_qty end as primary_material,\r\n\r\n        case when sum_qty.qty != 0 then pivot_total_ee.packaging_material / sum_qty.qty \r\n            else pivot_total_eb.packaging_material / sum_qty.ending_qty end as packaging_material,\r\n\r\n        case when sum_qty.qty != 0 then pivot_total_ee.labour_cost / sum_qty.qty \r\n            else pivot_total_eb.labour_cost / sum_qty.ending_qty end as labour_cost,\r\n\r\n        case when sum_qty.qty != 0 then pivot_total_ee.machinery_cost / sum_qty.qty \r\n            else pivot_total_eb.labour_cost / sum_qty.ending_qty end as machinery_cost,\r\n\r\n        case when sum_qty.qty != 0 then pivot_total_ee.electricity_cost / sum_qty.qty \r\n            else pivot_total_eb.labour_cost / sum_qty.ending_qty end as electricity_cost,\r\n\r\n        case when sum_qty.qty != 0 then pivot_total_ee.steam_cost / sum_qty.qty \r\n            else pivot_total_eb.labour_cost / sum_qty.ending_qty end as steam_cost,\r\n\r\n        case when sum_qty.qty != 0 then pivot_total_ee.equipment_cost / sum_qty.qty \r\n            else pivot_total_eb.labour_cost / sum_qty.ending_qty end as equipment_cost,\r\n\r\n        case when sum_qty.qty != 0 then pivot_total_ee.overhead / sum_qty.qty \r\n            else pivot_total_eb.labour_cost / sum_qty.ending_qty end as overhead,\r\n\r\n        case when sum_qty.qty != 0 then pivot_total_ee.subcontract_cost / sum_qty.qty \r\n            else pivot_total_eb.labour_cost / sum_qty.ending_qty end as subcontract_cost\r\n\r\n    from sum_qty\r\n    left join pivot_total_ee on sum_qty.plant = pivot_total_ee.plant and sum_qty.material = pivot_total_ee.material\r\n    left join pivot_total_eb on sum_qty.plant = pivot_total_eb.plant and sum_qty.material = pivot_total_eb.material\r\n    {# where sum_qty.material = 'C1112AV1M025' and sum_qty.plant = '1010' #}\r\n\r\n),\r\n\r\nint_entry as (\r\n\r\n    select\r\n        plant,\r\n        material,\r\n        vendor,\r\n        qty_entry,\r\n        qty_entry * right(material,2) as qty_kg\r\n\r\n    from {{ ref(\"feed_stg_sap_ecc__draft_mb51_006_101\") }} \r\n\r\n),\r\n\r\ncal_entry as (\r\n\r\n    select \r\n        int_entry.plant,\r\n        int_entry.material,\r\n        int_entry.qty_kg,\r\n        z_total.primary_material * int_entry.qty_kg as primary_material,\r\n        z_total.packaging_material * int_entry.qty_kg as packaging_material,\r\n        z_total.labour_cost * int_entry.qty_kg as labour_cost,\r\n        z_total.machinery_cost * int_entry.qty_kg as machinery_cost,\r\n        z_total.electricity_cost * int_entry.qty_kg as electricity_cost,\r\n        z_total.steam_cost * int_entry.qty_kg as steam_cost,\r\n        z_total.equipment_cost * int_entry.qty_kg as equipment_cost,\r\n        z_total.overhead * int_entry.qty_kg as overhead,\r\n        z_total.subcontract_cost * int_entry.qty_kg as subcontract_cost\r\n\r\n    from int_entry\r\n    left join z_total on int_entry.vendor = z_total.plant and int_entry.material = z_total.material\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select \r\n        plant, \r\n        material,\r\n        sum(qty_kg) as qty_kg,\r\n        sum(primary_material) as primary_material,\r\n        sum(packaging_material) as packaging_material,\r\n        sum(labour_cost) as labour_cost,\r\n        sum(machinery_cost) as machinery_cost,\r\n        sum(electricity_cost) as electricity_cost,\r\n        sum(steam_cost) as steam_cost,\r\n        sum(equipment_cost) as equipment_cost,\r\n        sum(overhead) as overhead,\r\n        sum(subcontract_cost) as subcontract_cost\r\n\r\n    from cal_entry\r\n    group by plant, material\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [{"name": "feed_stg_sap_ecc__draft_zmllistn_005", "package": null, "version": null}, {"name": "feed_stg_sap_ecc__draft_mb51_006_101", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.feed_stg_sap_ecc__draft_zmllistn_005", "model.sales_group.feed_stg_sap_ecc__draft_mb51_006_101"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_int_zmllistn__calculate_opening_balance": {"database": "food", "schema": "nghi_dev", "name": "feed_int_zmllistn__calculate_opening_balance", "resource_type": "model", "package_name": "sales_group", "path": "feed\\intermediate\\margin\\feed_int_zmllistn__calculate_opening_balance.sql", "original_file_path": "models\\feed\\intermediate\\margin\\feed_int_zmllistn__calculate_opening_balance.sql", "unique_id": "model.sales_group.feed_int_zmllistn__calculate_opening_balance", "fqn": ["sales_group", "feed", "intermediate", "margin", "feed_int_zmllistn__calculate_opening_balance"], "alias": "feed_int_zmllistn__calculate_opening_balance", "checksum": {"name": "sha256", "checksum": "61bd4a153cd025509b14f915e36471f4aea8dc4171e03cbb884cbc19ba0e2f32"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.5164294, "relation_name": "\"food\".\"nghi_dev\".\"feed_int_zmllistn__calculate_opening_balance\"", "raw_code": "with production_ as (\r\n\r\n    select \r\n        plant,\r\n        material, \r\n        cost_component_name,\r\n        qty_income,\r\n        income_amt_by_type\r\n\r\n    from {{ ref(\"feed_stg_sap_ecc__draft_zmllistn_005\") }}\r\n    where row_type = '\u0420\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430 \u041f\u0440\u0438\u0445' and reciept_type = 'BF'\r\n\r\n),\r\n\r\nprd_qty as (\r\n    \r\n    select \r\n        plant,\r\n        material,\r\n        sum(qty_income) as qty_income\r\n    from production_ \r\n    group by plant, material\r\n\r\n),\r\n\r\nprd_selected_fields as (\r\n\r\n    select \r\n        plant,\r\n        material, \r\n        cost_component_name,\r\n        income_amt_by_type\r\n    from production_\r\n\r\n),\r\n\r\nprd as (\r\n\r\n    select \r\n        plant,\r\n        material,\r\n        -- if 0 then apply another formula\r\n        coalesce(\"primary material\", 0) as primary_material, \r\n        coalesce(\"packaging material\", 0) as packaging_material,\r\n        coalesce(\"labour cost\", 0) as labour_cost,\r\n        coalesce(\"machinery cost\", 0) as machinery_cost,\r\n        coalesce(\"electricity cost\", 0) as electricity_cost,\r\n        coalesce(\"steam cost\", 0) as steam_cost,\r\n        coalesce(\"equipment cost\", 0) as equipment_cost,\r\n        coalesce(\"overhead\", 0) as overhead,\r\n        coalesce(\"subcontract cost\", 0) as subcontract_cost\r\n    from prd_selected_fields\r\n    pivot ( sum(income_amt_by_type) for cost_component_name in ('Primary material','Packaging material','Labour cost', 'Machinery cost','Electricity cost','Steam cost','Equipment cost','Overhead','Subcontract cost') )\r\n    \r\n),\r\n\r\nstock as (\r\n\r\n    select \r\n        plant,\r\n        material,\r\n        opening_stock\r\n\r\n    from {{ ref(\"feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005\") }} \r\n\r\n),\r\n\r\ninternal_entry as (\r\n\r\n    select * from {{ ref(\"feed_int_zmllistn__calculate_internal_entry\") }}\r\n\r\n),\r\n\r\nbalance as (\r\n\r\n    select \r\n        prd.plant,\r\n        prd.material,\r\n        prd_qty.qty_income + coalesce(stock.opening_stock, 0) + internal_entry.qty_kg as qty,\r\n        (prd.primary_material + internal_entry.primary_material) / qty  as primary_material,\r\n        (prd.packaging_material + internal_entry.packaging_material) / qty as packaging_material,\r\n        (prd.labour_cost + internal_entry.labour_cost) / qty as labour_cost,\r\n        (prd.machinery_cost + internal_entry.machinery_cost) / qty as machinery_cost,\r\n        (prd.electricity_cost + internal_entry.electricity_cost) / qty as electricity_cost,\r\n        (prd.steam_cost + internal_entry.steam_cost) / qty as steam_cost,\r\n        (prd.equipment_cost + internal_entry.equipment_cost) / qty as equipment_cost,\r\n        (prd.overhead + internal_entry.overhead) / qty as overhead,\r\n        (prd.subcontract_cost + internal_entry.subcontract_cost) / qty as subcontract_cost\r\n\r\n    from prd\r\n    left join prd_qty on prd.plant = prd_qty.plant and prd.material = prd_qty.material\r\n    left join stock on stock.plant = prd.plant and stock.material = prd.material\r\n    left join internal_entry on internal_entry.plant = prd.plant and internal_entry.material = prd.material\r\n\r\n)\r\n\r\nselect * from balance", "language": "sql", "refs": [{"name": "feed_stg_sap_ecc__draft_zmllistn_005", "package": null, "version": null}, {"name": "feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005", "package": null, "version": null}, {"name": "feed_int_zmllistn__calculate_internal_entry", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.feed_stg_sap_ecc__draft_zmllistn_005", "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005", "model.sales_group.feed_int_zmllistn__calculate_internal_entry"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_margin": {"database": "food", "schema": "nghi_dev", "name": "feed_margin", "resource_type": "model", "package_name": "sales_group", "path": "feed\\marts\\margin\\feed_margin.sql", "original_file_path": "models\\feed\\marts\\margin\\feed_margin.sql", "unique_id": "model.sales_group.feed_margin", "fqn": ["sales_group", "feed", "marts", "margin", "feed_margin"], "alias": "feed_margin", "checksum": {"name": "sha256", "checksum": "0f1941f2930e9e32e90e36d2ffc4d294591c14da59d948e428eec1da4d3e83be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.5197453, "relation_name": "\"food\".\"nghi_dev\".\"feed_margin\"", "raw_code": "with actual as (\r\n\r\n    select \r\n        -- day 0 <= 7 W1, 7 and <= 15 W2 , 16 -> <= 23 W3, 24 >= W3\r\n        case when date_part(day, posting_date) <= 7 then 'W1'\r\n            when date_part(day, posting_date) <= 15 then 'W2'\r\n            when date_part(day, posting_date) <= 23 then 'W3'\r\n            when date_part(day, posting_date) >= 24 then 'W4' end as week,\r\n\r\n        dis_channel as distribution_channel, \r\n        sales_group as bu_sales,\r\n        plant,\r\n        sales_office as location_id,\r\n        ke24.material_group,\r\n        division,\r\n        -- prod_line_id\r\n        sched_line_cat as prod_line_id,\r\n        material as invt_id,\r\n        md_product.material_description as invt_description,\r\n        \r\n        -- Base Price (Gi\u00e1 xu\u1ea5t x\u01b0\u1edfng + Ph\u00ed chuy\u1ec3n h\u00e0ng)/Bill Qty\r\n        (factory_price + delivery_fee)/billed_qty as base_price,\r\n        (factory_price + delivery_fee)/billed_qty as invc_price_before_vat,\r\n        (factory_price + delivery_fee)/billed_qty as invc_price_after_vat,\r\n\r\n        -- Total Discount Amount (File_load)\r\n        -- distribution_channel is 10 \u00e1p d\u1ee5ng file_load\r\n        -- distribution_channel is 30 then 0\r\n        -- distribution_channel is 20 then (netsales -COGS- Commer Varcost -Mnf) --> Netmargin b\u1eb1ng 0\r\n        0 as total_discount_amt,\r\n        invc_price_after_vat - total_discount_amt as net_sales,\r\n        billed_qty as sales_volumne,\r\n\r\n        -- Formula Price: join using (plant, material) select formula_price (t\u1ed1ng s\u1ed1 ti\u1ec1n/t\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng ph\u00e1t sinh)\r\n        0 as formula_price,\r\n\r\n        -- Bag Amount: join using (plant, material) select bag_amount (t\u1ed1ng s\u1ed1 ti\u1ec1n/t\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng ph\u00e1t sinh)\r\n        0 as bag_amount,\r\n\r\n        -- File_load COGS: join using (plant, material) select shrink \r\n        0.5 * formula_price as total_shrink_amount, \r\n\r\n        -- RevFX Amount: file_load AD-Com join using (plant, material ...) select RevFx \u0111/kg \r\n        0 as revfx_amount,\r\n\r\n        formula_price + bag_amount + total_shrink_amount + revfx_amount as cogs,\r\n\r\n        net_sales - cogs as  gross_margin,\r\n        gross_margin/net_sales as pct_percent,\r\n        \r\n        -- file_load using? select ?\r\n        0 as mnf_varcost,\r\n        0 as commer_varcost,\r\n        0 as finan_cost,\r\n\r\n        mnf_varcost + commer_varcost + finan_cost as gm_after_vc,\r\n        gm_after_vc/net_sales as pct_gm_after_vc,\r\n\r\n        -- file_load using? select ?\r\n        0 as mnf_fixcost,\r\n        0 as commer_fixcost,\r\n        0 as admin_cost,\r\n        gm_after_vc - (mnf_fixcost + commer_fixcost + admin_cost) as nm_perunit,\r\n        nm_perunit/net_sales as pct_nm_ns,\r\n\r\n        sales_volumne * cogs as total_cogs,\r\n        sales_volumne * net_sales as total_netsales,\r\n        sales_volumne * gross_margin as total_gross_margin,\r\n\r\n        (mnf_fixcost + commer_fixcost + admin_cost) as total_fixcost,\r\n        mnf_varcost + commer_varcost + finan_cost as total_varcost,\r\n        -- Total Gross Margin  - Total VarCost?\r\n        total_gross_margin - total_varcost as total_gm_after_varcost,\r\n        -- Total GM After VarCost  -Total FixCost \r\n        total_gm_after_varcost - total_fixcost as total_net_margin,\r\n\r\n        revfx_amount * sales_volumne as total_revfx_amount,\r\n        finan_cost * sales_volumne as financial_cost\r\n\r\n\r\n    from {{ ref(\"feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006\") }} ke24\r\n    left join {{ ref(\"feed_stg_sap_ecc__draft_mm60_006\") }} md_product using (plant, material)\r\n    limit 1\r\n\r\n),\r\n\r\nforcast as (\r\n\r\n    select \r\n        dis_channel as distribution_channel,\r\n        sales_group as bu_sales,\r\n        plant,\r\n        sales_office as location_id,\r\n        -- material_group?\r\n        division,\r\n        material as invt_id,\r\n        md_product.material_description as invt_description\r\n\r\n        {# base_price,\r\n        invc_price_before_vat,\r\n        total_discount_amt,\r\n        net_sales,\r\n        formula_price,\r\n        bag_amount,\r\n        total_shrink_amount #}\r\n\r\n    from {{ ref(\"feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006\") }}\r\n    left join {{ ref(\"feed_stg_sap_ecc__draft_mm60_006\") }} md_product using (plant, material)\r\n\r\n)\r\n\r\nselect * from forcast", "language": "sql", "refs": [{"name": "feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006", "package": null, "version": null}, {"name": "feed_stg_sap_ecc__draft_mm60_006", "package": null, "version": null}, {"name": "feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006", "package": null, "version": null}, {"name": "feed_stg_sap_ecc__draft_mm60_006", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006", "model.sales_group.feed_stg_sap_ecc__draft_mm60_006", "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006", "model.sales_group.feed_stg_sap_ecc__draft_mm60_006"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_sales_budget_2023": {"database": "feed", "schema": "nghi_dev", "name": "feed_sales_budget_2023", "resource_type": "model", "package_name": "sales_group", "path": "feed\\marts\\sales\\feed_sales_budget_2023.sql", "original_file_path": "models\\feed\\marts\\sales\\feed_sales_budget_2023.sql", "unique_id": "model.sales_group.feed_sales_budget_2023", "fqn": ["sales_group", "feed", "marts", "sales", "feed_sales_budget_2023"], "alias": "sales_budget_2023", "checksum": {"name": "sha256", "checksum": "8f5200edb1e480d2f17ae66509d960a55fb56b488ceb22898c3c989c191de9b9"}, "config": {"enabled": true, "alias": "sales_budget_2023", "schema": "marts_sales", "database": "feed", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\feed\\marts\\sales\\_feed_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "feed", "bind": "{{ true if target.name == 'prod' else false }}", "schema": "marts_sales", "alias": "sales_budget_2023", "materialized": "table", "ra3_node": true}, "created_at": 1692186446.9073684, "relation_name": "\"feed\".\"nghi_dev\".\"sales_budget_2023\"", "raw_code": "select * from {{ ref('feed_seed_sales_budget_2023') }}", "language": "sql", "refs": [{"name": "feed_seed_sales_budget_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.feed_seed_sales_budget_2023"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_stg_excel_donavet_tb_account_mapping": {"database": "food", "schema": "nghi_dev", "name": "feed_stg_excel_donavet_tb_account_mapping", "resource_type": "model", "package_name": "sales_group", "path": "feed\\staging\\excel\\feed_stg_excel_donavet_tb_account_mapping.sql", "original_file_path": "models\\feed\\staging\\excel\\feed_stg_excel_donavet_tb_account_mapping.sql", "unique_id": "model.sales_group.feed_stg_excel_donavet_tb_account_mapping", "fqn": ["sales_group", "feed", "staging", "excel", "feed_stg_excel_donavet_tb_account_mapping"], "alias": "feed_stg_excel_donavet_tb_account_mapping", "checksum": {"name": "sha256", "checksum": "f6887d7327dda195060fcb377730e23278e6d93ae1528355c3af98dc436b6018"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.5257523, "relation_name": "\"food\".\"nghi_dev\".\"feed_stg_excel_donavet_tb_account_mapping\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect\r\n    \"account donavet\"::text as racct_donavet,\r\n    \"company code\"::text as company_code,\r\n    \"account sap\"::text as racct_sap\r\nfrom {{ source(\"feed_excel_donavet\", \"tb_account_mapping\") }}", "language": "sql", "refs": [], "sources": [["feed_excel_donavet", "tb_account_mapping"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.feed_excel_donavet.tb_account_mapping"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_stg_excel_donavet_tb_donavet_1100": {"database": "food", "schema": "nghi_dev", "name": "feed_stg_excel_donavet_tb_donavet_1100", "resource_type": "model", "package_name": "sales_group", "path": "feed\\staging\\excel\\feed_stg_excel_donavet_tb_donavet_1100.sql", "original_file_path": "models\\feed\\staging\\excel\\feed_stg_excel_donavet_tb_donavet_1100.sql", "unique_id": "model.sales_group.feed_stg_excel_donavet_tb_donavet_1100", "fqn": ["sales_group", "feed", "staging", "excel", "feed_stg_excel_donavet_tb_donavet_1100"], "alias": "feed_stg_excel_donavet_tb_donavet_1100", "checksum": {"name": "sha256", "checksum": "73ff1397cfc279be7a9cd2974b00c69b76ee546d0767951345e1c09e9fb910c5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.5280516, "relation_name": "\"food\".\"nghi_dev\".\"feed_stg_excel_donavet_tb_donavet_1100\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect *\r\nfrom {{ source(\"feed_excel_donavet\", \"tb_donavet_1100\") }}", "language": "sql", "refs": [], "sources": [["feed_excel_donavet", "tb_donavet_1100"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.feed_excel_donavet.tb_donavet_1100"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_stg_sap_ecc__draft_mb51_006": {"database": "food", "schema": "nghi_dev", "name": "feed_stg_sap_ecc__draft_mb51_006", "resource_type": "model", "package_name": "sales_group", "path": "feed\\staging\\sap_ecc\\feed_stg_sap_ecc__draft_mb51_006.sql", "original_file_path": "models\\feed\\staging\\sap_ecc\\feed_stg_sap_ecc__draft_mb51_006.sql", "unique_id": "model.sales_group.feed_stg_sap_ecc__draft_mb51_006", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_stg_sap_ecc__draft_mb51_006"], "alias": "feed_stg_sap_ecc__draft_mb51_006", "checksum": {"name": "sha256", "checksum": "cfe53848204dc9ed5ae5458f1d0f8841ceb7b273558c0f9df8059618c4dcdabe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.5320504, "relation_name": "\"food\".\"nghi_dev\".\"feed_stg_sap_ecc__draft_mb51_006\"", "raw_code": "with renamed as (\r\n\r\n    select \r\n        \"Plant\" as plant,\r\n        \"Material\" as material,\r\n        \"Movement type\" as movement_type,\r\n        \"Posting date\" as posting_date,\r\n        \"Qty in unit of entry\" as qty\r\n    from {{ source(\"feed_sap_ecc\",\"draft_mb51_006\") }}\r\n\r\n),\r\n\r\n\r\ncast_mb51 as (\r\n    select\r\n        plant::varchar ,\r\n        material,\r\n        movement_type,\r\n        to_date(posting_date, 'DD/MM/YYYY') as posting_date\r\n    from renamed\r\n)\r\nselect * from cast_mb51", "language": "sql", "refs": [], "sources": [["feed_sap_ecc", "draft_mb51_006"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.feed_sap_ecc.draft_mb51_006"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_stg_sap_ecc__draft_mb51_006_101": {"database": "food", "schema": "nghi_dev", "name": "feed_stg_sap_ecc__draft_mb51_006_101", "resource_type": "model", "package_name": "sales_group", "path": "feed\\staging\\sap_ecc\\feed_stg_sap_ecc__draft_mb51_006_101.sql", "original_file_path": "models\\feed\\staging\\sap_ecc\\feed_stg_sap_ecc__draft_mb51_006_101.sql", "unique_id": "model.sales_group.feed_stg_sap_ecc__draft_mb51_006_101", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_stg_sap_ecc__draft_mb51_006_101"], "alias": "feed_stg_sap_ecc__draft_mb51_006_101", "checksum": {"name": "sha256", "checksum": "db09322f9c30b6824741386704e54c456bffeb8f8725a81a1f3001a7ee784a14"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.5352337, "relation_name": "\"food\".\"nghi_dev\".\"feed_stg_sap_ecc__draft_mb51_006_101\"", "raw_code": "with renamed as (\r\n\r\n    select\r\n        plant,\r\n        material,\r\n        \"movement type\" as movement_type,\r\n        \"posting date\" as posting_date,\r\n        replace(\"qty in unit of entry\", ',','')::int as qty_entry,\r\n        vendor\r\n        \r\n    from feed.stg_sap_ecc.draft_mb51_006_101\r\n\r\n)\r\n\r\nselect *\r\nfrom renamed\r\nwhere vendor in ('1010','1020','1030','1040','1050')", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_stg_sap_ecc__draft_mm60_006": {"database": "food", "schema": "nghi_dev", "name": "feed_stg_sap_ecc__draft_mm60_006", "resource_type": "model", "package_name": "sales_group", "path": "feed\\staging\\sap_ecc\\feed_stg_sap_ecc__draft_mm60_006.sql", "original_file_path": "models\\feed\\staging\\sap_ecc\\feed_stg_sap_ecc__draft_mm60_006.sql", "unique_id": "model.sales_group.feed_stg_sap_ecc__draft_mm60_006", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_stg_sap_ecc__draft_mm60_006"], "alias": "feed_stg_sap_ecc__draft_mm60_006", "checksum": {"name": "sha256", "checksum": "0cbad77428152898f3c779c773cbd48e69cb831bf675d86cc93455c50b9b47eb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.5383046, "relation_name": "\"food\".\"nghi_dev\".\"feed_stg_sap_ecc__draft_mm60_006\"", "raw_code": "with renamed as (\r\n\r\n    select \r\n        \"Material\" as material,\r\n        \"Plant\" as plant,\r\n        \"Material Description\" as material_description,\r\n        \"Material Type\" as material_type ,\r\n        \"Material Group\" as material_group\r\n        --     \"Price\"\r\n    from {{ source(\"feed_sap_ecc\",\"draft_mm60_006\") }}\r\n\r\n),\r\n\r\n\r\ncast_mm60 as (\r\n    select\r\n        material,\r\n        plant::varchar,\r\n        material_description,\r\n        material_type,\r\n        material_group\r\n    from renamed\r\n)\r\n\r\nselect * from cast_mm60", "language": "sql", "refs": [], "sources": [["feed_sap_ecc", "draft_mm60_006"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.feed_sap_ecc.draft_mm60_006"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_stg_sap_ecc__draft_zmllistn_005": {"database": "food", "schema": "nghi_dev", "name": "feed_stg_sap_ecc__draft_zmllistn_005", "resource_type": "model", "package_name": "sales_group", "path": "feed\\staging\\sap_ecc\\feed_stg_sap_ecc__draft_zmllistn_005.sql", "original_file_path": "models\\feed\\staging\\sap_ecc\\feed_stg_sap_ecc__draft_zmllistn_005.sql", "unique_id": "model.sales_group.feed_stg_sap_ecc__draft_zmllistn_005", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_stg_sap_ecc__draft_zmllistn_005"], "alias": "feed_stg_sap_ecc__draft_zmllistn_005", "checksum": {"name": "sha256", "checksum": "47467371d52b6e77cdb1be5245b26195e11cfda423a25326c40f70d515025cac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.541301, "relation_name": "\"food\".\"nghi_dev\".\"feed_stg_sap_ecc__draft_zmllistn_005\"", "raw_code": "with renamed as (\r\n\r\n    select\r\n        \"row type\" as row_type,\r\n        \"reciept type\" as reciept_type,\r\n        \"description\" as description,\r\n        \"Crcy type/val.view\" as currency_type,\r\n        \"Currency\" as currency,\r\n        \"Cost Component\"  as cost_component,\r\n        \"Name of Cost Component\" as cost_component_name,\r\n        \"Cost component group\" as cost_component_group,\r\n        ccompgroup,\r\n        \"Company Code\" as company_code,\r\n        \"Plant\" as plant,\r\n        \"Material\" as material,\r\n        \"Material Type\" as material_type,\r\n        \"Material Group\" as material_group,\r\n        \"Base Unit of Measure\" as unit_measure,\r\n        \"income (qty) by income\" as qty_income,\r\n        \"Income (Amt) by income type\" as amt_income,\r\n        {# \"Expenditure(Qty)Exp\",\r\n        \"Expenditure (Amt) by exp type\", #}\r\n        \"Begining Balnace (Qty)\" as begining_qty,\r\n        \"Beginning balance (Amt)\" as begining_amt,\r\n        \"Sum income (Qty)\" as total_qty_income,\r\n        \"Summary income(Amt)\" as total_amt_income,\r\n        \"Sum expenditure(Qty)\" as total_qty_expenditure,\r\n        \"Summary expenditure (Amt)\" as total_amt_expenditure,\r\n        \"Ending Balanace (Qty)\" as ending_qty,\r\n        \"Ending Balance (Amt)\" as ending_amt,\r\n        \"income (amt) by income type\" as income_amt_by_type\r\n        \r\n    from {{ source(\"feed_sap_ecc\",\"draft_zmllistn_005\") }}\r\n\r\n),\r\n\r\n\r\ncast_zmllistn as (\r\n    select\r\n        row_type,\r\n        reciept_type,\r\n        description,\r\n        row_type,\r\n        reciept_type,\r\n        description,\r\n        currency_type::varchar,\r\n        currency,\r\n        cost_component::varchar,\r\n        cost_component_name,\r\n        cost_component_group,\r\n        ccompgroup,\r\n        company_code::varchar,\r\n        plant::varchar,\r\n        material,\r\n        material_type,\r\n        material_group,\r\n        unit_measure,\r\n        replace(qty_income, ',','')::float as qty_income,\r\n        replace(amt_income, ',','')::float as amt_income,\r\n        {# \"Expenditure(Qty)Exp\",\r\n        \"Expenditure (Amt) by exp type\", #}\r\n        replace(begining_qty, ',','')::float as begining_qty,\r\n        replace(begining_amt, ',','')::float as begining_amt,\r\n        replace(total_qty_income, ',','')::float as total_qty_income,\r\n        replace(total_amt_income, ',','')::float as total_amt_income,\r\n        replace(total_qty_expenditure, ',','')::float as total_qty_expenditure,\r\n        replace(total_amt_expenditure, ',','')::float as total_amt_expenditure,\r\n        replace(ending_qty, ',','')::float as ending_qty,\r\n        replace(ending_amt, ',','')::float as ending_amt,\r\n        replace(income_amt_by_type, ',','')::float as income_amt_by_type\r\n\r\n    from renamed    \r\n)\r\n\r\nselect * from cast_zmllistn", "language": "sql", "refs": [], "sources": [["feed_sap_ecc", "draft_zmllistn_005"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.feed_sap_ecc.draft_zmllistn_005"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_stg_sap_ecc__draft_zppr0019_006": {"database": "food", "schema": "nghi_dev", "name": "feed_stg_sap_ecc__draft_zppr0019_006", "resource_type": "model", "package_name": "sales_group", "path": "feed\\staging\\sap_ecc\\feed_stg_sap_ecc__draft_zppr0019_006.sql", "original_file_path": "models\\feed\\staging\\sap_ecc\\feed_stg_sap_ecc__draft_zppr0019_006.sql", "unique_id": "model.sales_group.feed_stg_sap_ecc__draft_zppr0019_006", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_stg_sap_ecc__draft_zppr0019_006"], "alias": "feed_stg_sap_ecc__draft_zppr0019_006", "checksum": {"name": "sha256", "checksum": "5d16a529d526e98bb49756e1c1489bf4286cf848b870b695e7f77a319b473628"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.5443976, "relation_name": "\"food\".\"nghi_dev\".\"feed_stg_sap_ecc__draft_zppr0019_006\"", "raw_code": "-- draft_zppr0019_006\r\nwith renamed as (\r\n\r\n    select \r\n            \"Plant\" as plant,\r\n            \"M\u00e3 s\u1ea3n ph\u1ea9m\" as material,\r\n            \"M\u00e3 th\u00e0nh ph\u1ea7n\" as ma_thanh_phan,\r\n            \"SL YC Theo SLKH\" as sanluongyeucau_KH,\r\n            \"SL YC Theo SLNK\"as sanluongyeucau_NK,\r\n            \"SL x\u00e1c nh\u1eadn th\u1ef1c t\u1ebf theo DV co ban\" as sanluongxacnhan_DVcoban,\r\n            \"Gi\u00e1 tr\u1ecb x\u00e1c nh\u1eadn\" as giatrixacnhan\r\n\r\n    from {{ source(\"feed_sap_ecc\",\"draft_zppr0019_006\") }}\r\n\r\n),\r\n\r\n\r\ncast_zppr0019 as (\r\n    select\r\n            plant::varchar,\r\n            material,\r\n            ma_thanh_phan,\r\n            replace(sanluongyeucau_KH, ',','')::float as sanluongyeucau_KH,\r\n            replace(sanluongyeucau_NK, ',','')::float as sanluongyeucau_NK,\r\n            replace(sanluongxacnhan_DVcoban, ',','')::float as sanluongxacnhan_DVcoban,\r\n            replace(giatrixacnhan, ',','')::float as giatrixacnhan\r\n    from renamed\r\n)\r\nselect * from cast_zppr0019", "language": "sql", "refs": [], "sources": [["feed_sap_ecc", "draft_zppr0019_006"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.feed_sap_ecc.draft_zppr0019_006"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006": {"database": "food", "schema": "nghi_dev", "name": "feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006", "resource_type": "model", "package_name": "sales_group", "path": "feed\\staging\\sap_ecc\\feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006.sql", "original_file_path": "models\\feed\\staging\\sap_ecc\\feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006.sql", "unique_id": "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006"], "alias": "feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006", "checksum": {"name": "sha256", "checksum": "f241d0506ac33ad65dcdb8d804581cd4afb48d937d1c72bf0be4b4236875f95b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.5474837, "relation_name": "\"food\".\"nghi_dev\".\"feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006\"", "raw_code": "with renamed as (\r\n\r\n    select \r\n        \"Plant\" as plant,\r\n        \"Document number\" as doc_number,\r\n        \"Sales Organization\" as sales_org,\r\n        \"Posting date\" as posting_date,\r\n        \"Reference document\" as ref_doc,\r\n        \"Reference item no.\" as ref_item_num,\r\n        \"Created by\" as created_by,\r\n        \"Sales group\" as sales_group,\r\n        \"Sales office\" as sales_office,\r\n        \"Sales manager\" as sales_manager,\r\n        \"Sched.line category\" as sched_line_cat,\r\n        \"Goods Issue Date\" as goods_issue_date,\r\n        \"Distribution Channel\" as dis_channel,\r\n        \"Division\" as division,\r\n        \"Customer\" as customer,\r\n        \"Product\"  as material,\r\n        \"Material Group\" as material_group,\r\n        \"Material Type\" as material_type,\r\n        {# \"Prod.hierarchy01-9\"::varchar as PAPH9, #}\r\n        \"Billed Qty (SKU)\" as billed_qty,\r\n        \"1.Gi\u00e1 xu\u1ea5t x\u01b0\u1edfng\" as factory_price,\r\n        \"1.Gi\u00e1 \u0111c t\u0103ng(DrMem)\" as increasing_price,\r\n        \"1.Gi\u00e1 \u0111c gi\u1ea3m(CrMem)\" as decreasing_price,\r\n        \"1.CK Gi\u00e1 %\" as discount_price,\r\n        \"1.CK Gi\u00e1 \u0111/kg\" as discount_price_d_kg,\r\n        \"1.Ph\u00ed chuy\u1ec3n h\u00e0ng\" as delivery_fee,\r\n        \"1.Gi\u00e1 h\u00f3a \u0111\u01a1n\" as gia_hoa_don,\r\n        \"1.Gi\u00e1 tr\u1ea3 h\u00e0ng\" as refund_price,\r\n        \"1.CKTT sau H\u0110 (%)\" as CKTT_sauHD,\r\n        \"1.CKTT sau H\u0110 (\u0111/kg)\" as CKTT_sauHD_d_kg,\r\n        \"1.T.to\u00e1n CK\" as thanhtoan_CK,\r\n        \"1.Discoun by % ratio\" as discount_by_ratio,\r\n        \"1.Discount by d/kg\" as discount_by_d_kg,\r\n        \"Standard COGS\" as standard_cogs,\r\n        \"Std.Pri Material cst\" as primaterial_cost,\r\n        \"Std.Packaging cost\" as packaging_cost,\r\n        \"Std.Labor cost\" as labor_cost,\r\n        \"Std.Machinery cost\" as machinery_cost,\r\n        \"Std.Electricity cost\" as electricity_cost,\r\n        \"Std.Steam cost\" as steam_cost,\r\n        \"Std.Equipment cost\" as equipment_cost,\r\n        \"Std.Overhead\" as overhead,\r\n        \"Std.Subcontract\" as subcontract\r\n\r\n    from {{ source(\"feed_sap_ecc_draft\",\"feed_seed_margin_draft_ke24_006\") }}\r\n\r\n),\r\n\r\n\r\ncast_ke24 as (\r\n    \r\n    select\r\n        plant::varchar ,\r\n        doc_number::varchar ,\r\n        sales_org::varchar,\r\n        to_char(to_date(posting_date, 'DD/MM/YYYY'), 'YYYYMMDD')::date as posting_date,\r\n        ref_doc::varchar,\r\n        ref_item_num::varchar,\r\n        created_by,\r\n        sales_group::varchar,\r\n        sales_office::varchar,\r\n        sales_manager::varchar,\r\n        sched_line_cat::varchar,\r\n        to_char(to_date(goods_issue_date, 'DD/MM/YYYY'), 'YYYYMMDD')::date as goods_issue_date,\r\n        dis_channel::varchar,\r\n        division::varchar,\r\n        customer::varchar,\r\n        material::varchar,\r\n        material_group::varchar,\r\n        material_type,\r\n        billed_qty,\r\n        replace(factory_price, ',','')::numeric as factory_price,\r\n        increasing_price,\r\n        decreasing_price,\r\n        discount_price,\r\n        discount_price_d_kg,\r\n        delivery_fee,\r\n        replace(gia_hoa_don, ',','')::numeric as gia_hoa_don,\r\n        refund_price,\r\n        CKTT_sauHD,\r\n        CKTT_sauHD_d_kg,\r\n        thanhtoan_CK,\r\n        discount_by_ratio,\r\n        discount_by_d_kg,\r\n        replace(standard_cogs, ',','')::numeric as standard_cogs,\r\n        replace(primaterial_cost, ',','')::numeric as primaterial_cost,\r\n        packaging_cost,\r\n        labor_cost,\r\n        machinery_cost,\r\n        electricity_cost,\r\n        steam_cost,\r\n        equipment_cost,\r\n        overhead,\r\n        subcontract\r\n\r\n    from renamed\r\n)\r\n\r\nselect * from cast_ke24", "language": "sql", "refs": [], "sources": [["feed_sap_ecc_draft", "feed_seed_margin_draft_ke24_006"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_ke24_006"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006": {"database": "food", "schema": "nghi_dev", "name": "feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006", "resource_type": "model", "package_name": "sales_group", "path": "feed\\staging\\sap_ecc\\feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006.sql", "original_file_path": "models\\feed\\staging\\sap_ecc\\feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006.sql", "unique_id": "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006"], "alias": "feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006", "checksum": {"name": "sha256", "checksum": "24cfeb48a3690d0a23049d30886972112666bb9db48f87b2828ebe3c7c31616c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.550397, "relation_name": "\"food\".\"nghi_dev\".\"feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006\"", "raw_code": "with renamed as (\r\n\r\n    select \r\n            \"Sales manager\" as sales_manager,\r\n            \"Plant\"as plant,\r\n            \"Distribution Channel\"as dis_channel,\r\n            \"Sales Organization\" as sales_org,\t\r\n            \"Sales group\" as sales_group,\r\n            \"Sales office\" as sales_office,\r\n            \"Division\" as division,\r\n            \"Product\" as material,\t\r\n            \"Billed Qty (SKU)\" as Billed_Qty,\r\n            \"Std.Pri Material cst\" as Primaterial_cost,\r\n            \"Std.Packaging cost\" as packaging_cost,\r\n            \"Std.Labor cost\" as labor_cost,\r\n            \"Std.Machinery cost\" as machinery_cost,\r\n            \"Std.Electricity cost\" as electricity_cost,\r\n            \"Std.Steam cost\" as steam_cost,\r\n            \"Std.Equipment cost\" as equipment_cost,\r\n            \"Std.Overhead\" as overhead\r\n\r\n    from {{ source(\"feed_sap_ecc_draft\",\"feed_seed_margin_draft_ke25_006\") }}\r\n\r\n),\r\n\r\ncast_ke25 as (\r\n    select\r\n            sales_manager::varchar,\r\n            plant::varchar,\r\n            dis_channel::varchar,\r\n            sales_org::varchar,\t\r\n            sales_group::varchar,\r\n            sales_office::varchar,\r\n            division::varchar,\r\n            material::varchar,\t\r\n            Billed_Qty,\r\n            replace(Primaterial_cost, ',','')::numeric as Primaterial_cost,\r\n            packaging_cost,\r\n            labor_cost,\r\n            machinery_cost,\r\n            electricity_cost,\r\n            steam_cost,\r\n            equipment_cost,\r\n            overhead\r\n    from renamed\r\n\r\n)\r\n\r\nselect * from cast_ke25", "language": "sql", "refs": [], "sources": [["feed_sap_ecc_draft", "feed_seed_margin_draft_ke25_006"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_ke25_006"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005": {"database": "food", "schema": "nghi_dev", "name": "feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005", "resource_type": "model", "package_name": "sales_group", "path": "feed\\staging\\sap_ecc\\feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005.sql", "original_file_path": "models\\feed\\staging\\sap_ecc\\feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005.sql", "unique_id": "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005"], "alias": "feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005", "checksum": {"name": "sha256", "checksum": "6d4beb11a08ca3f6f257f1b4cb7e83f32f4291c46d9b5121ebc0c213ee67593e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.5527172, "relation_name": "\"food\".\"nghi_dev\".\"feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005\"", "raw_code": "with renamed as (\r\n\r\n    select \r\n        \"vala\" as plant,\r\n        \"Material\" as material,\r\n        \"from date\" as from_date,\r\n        \"to date\" as to_date,\r\n        \"Opening Stock\" as opening_stock,\r\n        \"Total Receipt Qties\" as total_receipt_qty,\r\n        \"Total Issue Quantities\" as total_issue_qty,\r\n        \"Closing Stock\" as closing_stock,\r\n        \"bun\" as unit_measure,\r\n        \"Opening Value\" as opening_value,\r\n        \"Total Receipt Values\" as total_receipt_value,\r\n        \"Total Issue Values\" as total_issue_value,\r\n        \"Closing Value\" as closing_value,\r\n        \"crcy\" as currency\r\n        \r\n    from {{ source(\"feed_sap_ecc_draft\",\"feed_seed_margin_draft_mb5b_005\") }}\r\n\r\n),\r\n\r\ncast_mb5b as (\r\n    select\r\n        plant::varchar,\r\n        material,\r\n        to_date(from_date, 'DD/MM/YYYY') as from_date,\r\n        to_date(to_date, 'DD/MM/YYYY') as to_date,\r\n        opening_stock,\r\n        total_receipt_qty,\r\n        total_issue_qty,\r\n        closing_stock,\r\n        unit_measure,\r\n        replace(opening_value, ',','')::numeric as opening_value,\r\n        replace(total_receipt_value, ',','')::numeric as total_receipt_value,\r\n        replace(total_issue_value, ',','')::numeric as total_issue_value,\r\n        replace(closing_value, ',','')::numeric as closing_value,\r\n        currency\r\n    from renamed\r\n)\r\n\r\nselect * from cast_mb5b", "language": "sql", "refs": [], "sources": [["feed_sap_ecc_draft", "feed_seed_margin_draft_mb5b_005"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_mb5b_005"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_stg_sap_ecc__fi_0fi_gl_12": {"database": "food", "schema": "nghi_dev", "name": "feed_stg_sap_ecc__fi_0fi_gl_12", "resource_type": "model", "package_name": "sales_group", "path": "feed\\staging\\sap_ecc\\feed_stg_sap_ecc__fi_0fi_gl_12.sql", "original_file_path": "models\\feed\\staging\\sap_ecc\\feed_stg_sap_ecc__fi_0fi_gl_12.sql", "unique_id": "model.sales_group.feed_stg_sap_ecc__fi_0fi_gl_12", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_stg_sap_ecc__fi_0fi_gl_12"], "alias": "feed_stg_sap_ecc__fi_0fi_gl_12", "checksum": {"name": "sha256", "checksum": "9a00c95a7f7128818c92d381c7d9432b956df362daf7ba1ec4df0c0d85dc0eaf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.555711, "relation_name": "\"food\".\"nghi_dev\".\"feed_stg_sap_ecc__fi_0fi_gl_12\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"feed_sap_ecc\", \"fi_0fi_gl_12\") }}", "language": "sql", "refs": [], "sources": [["feed_sap_ecc", "fi_0fi_gl_12"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.feed_sap_ecc.fi_0fi_gl_12"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_stg_sol_gfdnbapp_cn_dnb_tb_1000": {"database": "food", "schema": "nghi_dev", "name": "feed_stg_sol_gfdnbapp_cn_dnb_tb_1000", "resource_type": "model", "package_name": "sales_group", "path": "feed\\staging\\sol\\feed_stg_sol_gfdnbapp_cn_dnb_tb_1000.sql", "original_file_path": "models\\feed\\staging\\sol\\feed_stg_sol_gfdnbapp_cn_dnb_tb_1000.sql", "unique_id": "model.sales_group.feed_stg_sol_gfdnbapp_cn_dnb_tb_1000", "fqn": ["sales_group", "feed", "staging", "sol", "feed_stg_sol_gfdnbapp_cn_dnb_tb_1000"], "alias": "feed_stg_sol_gfdnbapp_cn_dnb_tb_1000", "checksum": {"name": "sha256", "checksum": "09e1df462943e4eb4fc60e5237246f63680d6361c5171b740ff8eab3b552048c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'feed' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.5599477, "relation_name": "\"food\".\"nghi_dev\".\"feed_stg_sol_gfdnbapp_cn_dnb_tb_1000\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\nselect \r\nbegpernbr,\r\nsub,\r\ncpnyid,\r\nlegal_name,\r\ndramttot::decimal(20,2),\r\nendingbalance::decimal(20,2),\r\nledgerid,\r\nacct,\r\n'GFDNBAPP'::text as legal,\r\ncramttot::decimal(20,2),\r\nendpernbr,\r\nbalancetype,\r\nstartingbalance::decimal(20,2),\r\nfiscyr::text\r\nfrom {{ source(\"farm_sol_dnb2001app\", \"xp_01610ab_accthist_erp_final\") }}\r\nwhere left(sub,2) = 'C1'", "language": "sql", "refs": [], "sources": [["farm_sol_dnb2001app", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.farm_sol_dnb2001app.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_audit_sales_cms": {"database": "food", "schema": "nghi_dev", "name": "food_audit_sales_cms", "resource_type": "model", "package_name": "sales_group", "path": "food\\audit\\sales\\food_audit_sales_cms.sql", "original_file_path": "models\\food\\audit\\sales\\food_audit_sales_cms.sql", "unique_id": "model.sales_group.food_audit_sales_cms", "fqn": ["sales_group", "food", "audit", "sales", "food_audit_sales_cms"], "alias": "food_audit_sales_cms", "checksum": {"name": "sha256", "checksum": "b78160d3b701d279bf6e79a095cd1a3942237cb9c29f4581508ce057bf32e887"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.5629165, "relation_name": "\"food\".\"nghi_dev\".\"food_audit_sales_cms\"", "raw_code": "{% set old_sales_cms %}\r\n  select\r\n    to_date(posting_date, 'DD.MM.YYYY') as _posting_date,\r\n    sum(net_amount) as sales_amount,\r\n    sum(quantity) as quantity\r\n  from food.marts_sales.cms_billing_sales\r\n  where _posting_date between '20230401' and '20230430'\r\n  group by _posting_date\r\n{% endset %}\r\n\r\n{% set new_sales_cms %}\r\n  select\r\n    ship_date::date as _posting_date,\r\n    sum( bill_net_amount) as sales_amount,\r\n    sum( billed_quantity) as quantity\r\n  from {{ ref('food_cms_billing_sales') }}\r\n  where _posting_date between '20230401' and '20230430'\r\n  group by _posting_date\r\n{% endset %}\r\n\r\n{{\r\n    audit_helper.compare_queries(\r\n        a_query=old_sales_cms,\r\n        b_query=new_sales_cms,\r\n        primary_key=\"_posting_date\",\r\n        summarize=true,\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "food_cms_billing_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.audit_helper.compare_queries"], "nodes": ["model.sales_group.food_cms_billing_sales"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_audit_sales_cms_compare": {"database": "food", "schema": "nghi_dev", "name": "food_audit_sales_cms_compare", "resource_type": "model", "package_name": "sales_group", "path": "food\\audit\\sales\\food_audit_sales_cms_compare.sql", "original_file_path": "models\\food\\audit\\sales\\food_audit_sales_cms_compare.sql", "unique_id": "model.sales_group.food_audit_sales_cms_compare", "fqn": ["sales_group", "food", "audit", "sales", "food_audit_sales_cms_compare"], "alias": "food_audit_sales_cms_compare", "checksum": {"name": "sha256", "checksum": "39dddf2b4230f0026165275994f7f095ebce2954bf53a07af7b526e8b18eb54e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.577963, "relation_name": "\"food\".\"nghi_dev\".\"food_audit_sales_cms_compare\"", "raw_code": "{%- set target_relation = api.Relation.create(\r\n      database='food', \r\n      schema='marts_sales', \r\n      identifier='cms_billing_sales') -%}\r\n\r\n{% set max_date %}\r\n  select\r\n    max(invoice_date) as max_date\r\n  from {{ target_relation }}\r\n{% endset %}\r\n\r\n{% set old_sales_cms %}\r\n\r\n  select\r\n    {{ dbt_utils.generate_surrogate_key([\r\n        'invoice_date',\r\n        'ship_date',\r\n        'order_number',\r\n        'customer_id',\r\n        'product_code',\r\n        'channel_code',\r\n        'customer_group_code',\r\n        'customer_group_1_code',\r\n        'customer_group_2_code',\r\n        'order_type',\r\n        'ship_name',\r\n        'sub',\r\n        'status',\r\n        'promotion',\r\n        'promotion_type',\r\n        'site_id'\r\n        ])\r\n    }} as _key,  \r\n    {{ dbt_utils.star(from=ref('food_cms_billing_sales'), except=[\"_key\",\"product_name\",\"origin_customer_group_name\",\"origin_customer_group_1_name\",\"origin_customer_group_2_name\"]) }}\r\n\r\n  from {{ ref('food_cms_billing_sales') }}\r\n  where invoice_date <= ({{ max_date }})\r\n\r\n{% endset %}\r\n\r\n{% set new_sales_cms %}\r\n  select\r\n    {{ dbt_utils.star(from=target_relation, except=[\"origin_customer_group_name\",\"origin_customer_group_1_name\",\"origin_customer_group_2_name\"])}}\r\n\r\n  from {{ target_relation }}\r\n{% endset %}\r\n\r\n{{\r\n    audit_helper.compare_queries(\r\n        a_query=old_sales_cms,\r\n        b_query=new_sales_cms,\r\n        primary_key=\"_key\",\r\n        summarize=true,\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "food_cms_billing_sales", "package": null, "version": null}, {"name": "food_cms_billing_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt_utils.star", "macro.audit_helper.compare_queries"], "nodes": ["model.sales_group.food_cms_billing_sales", "model.sales_group.food_cms_billing_sales"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_audit_sales_gkitchen": {"database": "food", "schema": "nghi_dev", "name": "food_audit_sales_gkitchen", "resource_type": "model", "package_name": "sales_group", "path": "food\\audit\\sales\\food_audit_sales_gkitchen.sql", "original_file_path": "models\\food\\audit\\sales\\food_audit_sales_gkitchen.sql", "unique_id": "model.sales_group.food_audit_sales_gkitchen", "fqn": ["sales_group", "food", "audit", "sales", "food_audit_sales_gkitchen"], "alias": "food_audit_sales_gkitchen", "checksum": {"name": "sha256", "checksum": "fb866f3af7bc5bfb6332d4a8b813fc46adba5d9e0e67796165357395bdff3f85"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.6126823, "relation_name": "\"food\".\"nghi_dev\".\"food_audit_sales_gkitchen\"", "raw_code": "{% set old_sales_gkitchen %}\r\n  select\r\n    to_date(posting_date, 'DD.MM.YYYY') as _posting_date,\r\n    sum(net_amount) as sales_amount,\r\n    sum(quantity) as quantity,\r\n    sum(quantity_unit) as bill_quantity_in_kg\r\n  from tests.old_sales_gkitchen\r\n  where _posting_date between '20230510' and '20230520'\r\n  group by _posting_date\r\n{% endset %}\r\n\r\n{% set new_sales_gkitchen %}\r\n  select\r\n    posting_date::date as _posting_date,\r\n    sum(bill_net_amount) as sales_amount,\r\n    sum(bill_quantity) as quantity,\r\n    sum(bill_quantity_in_kg) as bill_quantity_in_kg\r\n  from {{ ref('food_gkitchen_sales') }}\r\n  where _posting_date between '20230510' and '20230520'\r\n  group by _posting_date\r\n{% endset %}\r\n\r\n{{\r\n    audit_helper.compare_queries(\r\n        a_query=old_sales_gkitchen,\r\n        b_query=new_sales_gkitchen,\r\n        primary_key=\"_posting_date\",\r\n        summarize=true,\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "food_gkitchen_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.audit_helper.compare_queries"], "nodes": ["model.sales_group.food_gkitchen_sales"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_audit_sales_gkitchen_compare": {"database": "food", "schema": "nghi_dev", "name": "food_audit_sales_gkitchen_compare", "resource_type": "model", "package_name": "sales_group", "path": "food\\audit\\sales\\food_audit_sales_gkitchen_compare.sql", "original_file_path": "models\\food\\audit\\sales\\food_audit_sales_gkitchen_compare.sql", "unique_id": "model.sales_group.food_audit_sales_gkitchen_compare", "fqn": ["sales_group", "food", "audit", "sales", "food_audit_sales_gkitchen_compare"], "alias": "food_audit_sales_gkitchen_compare", "checksum": {"name": "sha256", "checksum": "a0ccfaa5c7e10d34b175de0ce417f11bd5a70289991c5f3ca16ab2b16f79b231"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.6205041, "relation_name": "\"food\".\"nghi_dev\".\"food_audit_sales_gkitchen_compare\"", "raw_code": "{% set old_sales_gkitchen %}\r\n  select\r\n    {{ dbt_utils.generate_surrogate_key([\r\n          'posting_date', 'company_code', 'plant_code', 'sales_office_code', 'sales_organization_code',\r\n          'sales_group_code', 'sales_district_code', 'distribution_channel_code', 'product_code', 'product_hierachy_code',\r\n          '\"product_hierarchy_01-1_code\"', '\"product_hierarchy_01-2_code\"', '\"product_hierarchy_01-3_code\"', '\"product_hierarchy_01-4_code\"',\r\n          '\"product_hierarchy_01-5_code\"', '\"product_hierarchy_01-6_code\"', '\"product_hierarchy_01-7_code\"', '\"product_hierarchy_01-8_code\"',\r\n          'customer_group_code', 'sold_to', 'customer_group_1_code', 'customer_group_2_code', '\"g/l_account_code\"', 'division_code'\r\n      ])\r\n    }} as _key,\r\n    *\r\n  from marts_sales.gkitchen_sales_bk_2023_22_06\r\n{% endset %}\r\n\r\n{% set new_sales_gkitchen %}\r\n  select\r\n    *\r\n  from marts_sales.gkitchen_sales\r\n{% endset %}\r\n\r\n{{\r\n    audit_helper.compare_queries(\r\n        a_query=old_sales_gkitchen,\r\n        b_query=new_sales_gkitchen,\r\n        primary_key=\"_key\",\r\n        summarize=true,\r\n    )\r\n}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.audit_helper.compare_queries"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_audit_sales_leboucher": {"database": "food", "schema": "nghi_dev", "name": "food_audit_sales_leboucher", "resource_type": "model", "package_name": "sales_group", "path": "food\\audit\\sales\\food_audit_sales_leboucher.sql", "original_file_path": "models\\food\\audit\\sales\\food_audit_sales_leboucher.sql", "unique_id": "model.sales_group.food_audit_sales_leboucher", "fqn": ["sales_group", "food", "audit", "sales", "food_audit_sales_leboucher"], "alias": "food_audit_sales_leboucher", "checksum": {"name": "sha256", "checksum": "0b2fdda074520a1e0e21df1979231731f5d10eaaef21a3503d59f01510a2ee1d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.6363707, "relation_name": "\"food\".\"nghi_dev\".\"food_audit_sales_leboucher\"", "raw_code": "{% set old_sales_leboucher %}\r\n  select\r\n    to_date(posting_date, 'DD.MM.YYYY') as _posting_date,\r\n    sum(revenue) as sales_amount,\r\n    sum(quantity) as quantity\r\n  from food.marts_sales.leboucher_sales\r\n  where _posting_date between '20230401' and '20230429'\r\n  group by _posting_date\r\n{% endset %}\r\n\r\n{% set new_sales_leboucher %}\r\n  select\r\n    posting_date::date as _posting_date,\r\n    sum(sales_amount) as sales_amount,\r\n    sum(quantity) as quantity\r\n  from {{ ref('food_leboucher_sales') }}\r\n  where _posting_date between '20230401' and '20230429'\r\n  group by _posting_date\r\n{% endset %}\r\n\r\n{{\r\n    audit_helper.compare_queries(\r\n        a_query=old_sales_leboucher,\r\n        b_query=new_sales_leboucher,\r\n        primary_key=\"_posting_date\",\r\n        summarize=true,\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "food_leboucher_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.audit_helper.compare_queries"], "nodes": ["model.sales_group.food_leboucher_sales"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_audit_sales_leboucher_compare": {"database": "food", "schema": "nghi_dev", "name": "food_audit_sales_leboucher_compare", "resource_type": "model", "package_name": "sales_group", "path": "food\\audit\\sales\\food_audit_sales_leboucher_compare.sql", "original_file_path": "models\\food\\audit\\sales\\food_audit_sales_leboucher_compare.sql", "unique_id": "model.sales_group.food_audit_sales_leboucher_compare", "fqn": ["sales_group", "food", "audit", "sales", "food_audit_sales_leboucher_compare"], "alias": "food_audit_sales_leboucher_compare", "checksum": {"name": "sha256", "checksum": "3360352805284a138cf247e2ce586c760ee4d5c4e91fbf793f4de0d0406411f5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186445.6443741, "relation_name": "\"food\".\"nghi_dev\".\"food_audit_sales_leboucher_compare\"", "raw_code": "{% set max_date %}\r\n  select\r\n    max(posting_date) as max_date\r\n  from marts_sales.leboucher_sales\r\n{% endset %}\r\n\r\n{% set old_sales_leboucher %}\r\n  select\r\n    {{ dbt_utils.generate_surrogate_key([\r\n          'posting_date', 'posted_date', 'ref_no', 'customer_code', 'invoice_date', 'item_code'\r\n      ])\r\n    }} as _key,\r\n    posting_date,  -- ng\u00e0y ch\u1ee9ng t\u1eeb\r\n    posted_date,  -- ng\u00e0y ho\u1ea1ch to\u00e1n\r\n    ref_no,  -- s\u1ed1 ch\u1ee9ng t\u1eeb\r\n    customer_code,  -- m\u00e3 kh\u00e1ch h\u00e0ng\r\n    customer_name,  -- t\u00ean kh\u00e1ch h\u00e0ng\r\n    invoice_date,  -- ng\u00e0y h\u00f3a \u0111\u01a1n\r\n    invoice_no,  -- s\u1ed1 h\u00f3a \u0111\u01a1n\r\n    item_code,  -- m\u00e3 h\u00e0ng\r\n    unit_name,\r\n    --\r\n    channel_code,\r\n    channel_name,  -- t\u00ean k\u00eanh b\u00e1n h\u00e0ng\r\n    sales_group_code,\r\n    sales_group_name,  -- t\u00ean nh\u00f3m b\u00e1n h\u00e0ng\r\n    customer_group_code,\r\n    customer_group_name,  -- t\u00ean nh\u00f3m kh\u00e1ch h\u00e0ng\r\n    customer_group_1_code,\r\n    customer_group_1_name,  -- t\u00ean nh\u00f3m kh\u00e1ch h\u00e0ng 1\r\n    customer_group_2_code,\r\n    customer_group_2_name,  -- t\u00ean nh\u00f3m kh\u00e1ch h\u00e0ng 2\r\n    -- METRICS\r\n    quantity,  -- S\u1ed1 l\u01b0\u1ee3ng b\u00e1n\r\n    unit_price,\r\n    main_quantity,  -- S\u1ed1 l\u01b0\u1ee3ng b\u00e1n theo \u0110VC\r\n    credit_amount,  -- chi\u1ebft kh\u1ea5u\r\n    sales_amount,  -- Doanh s\u1ed1 b\u00e1n\r\n    vat,  -- Thu\u1ebf GTGT\r\n    total_payment,  -- t\u1ed5ng thanh to\u00e1n\r\n    main_unit_price,  -- \u0110\u01a1n gi\u00e1 theo \u0110VC\r\n    returned_quantity  -- T\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng tr\u1ea3 l\u1ea1i    \r\n  from {{ ref('food_leboucher_sales') }}\r\n  where posting_date <= ({{ max_date }})\r\n{% endset %}\r\n\r\n{% set new_sales_leboucher %}\r\n  select\r\n      {{ dbt_utils.generate_surrogate_key([\r\n          'posting_date', 'posted_date', 'ref_no', 'customer_code', 'invoice_date', 'item_code'\r\n      ])\r\n    }} as _key,\r\n    posting_date,  -- ng\u00e0y ch\u1ee9ng t\u1eeb\r\n    posted_date,  -- ng\u00e0y ho\u1ea1ch to\u00e1n\r\n    ref_no,  -- s\u1ed1 ch\u1ee9ng t\u1eeb\r\n    customer_code,  -- m\u00e3 kh\u00e1ch h\u00e0ng\r\n    customer_name,  -- t\u00ean kh\u00e1ch h\u00e0ng\r\n    invoice_date,  -- ng\u00e0y h\u00f3a \u0111\u01a1n\r\n    invoice_no,  -- s\u1ed1 h\u00f3a \u0111\u01a1n\r\n    item_code,  -- m\u00e3 h\u00e0ng\r\n    unit_name,\r\n    --\r\n    channel_code,\r\n    channel_name,  -- t\u00ean k\u00eanh b\u00e1n h\u00e0ng\r\n    sales_group_code,\r\n    sales_group_name,  -- t\u00ean nh\u00f3m b\u00e1n h\u00e0ng\r\n    customer_group_code,\r\n    customer_group_name,  -- t\u00ean nh\u00f3m kh\u00e1ch h\u00e0ng\r\n    customer_group_1_code,\r\n    customer_group_1_name,  -- t\u00ean nh\u00f3m kh\u00e1ch h\u00e0ng 1\r\n    customer_group_2_code,\r\n    customer_group_2_name,  -- t\u00ean nh\u00f3m kh\u00e1ch h\u00e0ng 2\r\n    -- METRICS\r\n    quantity,  -- S\u1ed1 l\u01b0\u1ee3ng b\u00e1n\r\n    unit_price,\r\n    main_quantity,  -- S\u1ed1 l\u01b0\u1ee3ng b\u00e1n theo \u0110VC\r\n    credit_amount,  -- chi\u1ebft kh\u1ea5u\r\n    sales_amount,  -- Doanh s\u1ed1 b\u00e1n\r\n    vat,  -- Thu\u1ebf GTGT\r\n    total_payment,  -- t\u1ed5ng thanh to\u00e1n\r\n    main_unit_price,  -- \u0110\u01a1n gi\u00e1 theo \u0110VC\r\n    returned_quantity  -- T\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng tr\u1ea3 l\u1ea1i    \r\n  from marts_sales.leboucher_sales\r\n{% endset %}\r\n\r\n{{\r\n    audit_helper.compare_queries(\r\n        a_query=old_sales_leboucher,\r\n        b_query=new_sales_leboucher,\r\n        primary_key=\"_key\",\r\n        summarize=true,\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "food_leboucher_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.audit_helper.compare_queries"], "nodes": ["model.sales_group.food_leboucher_sales"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.dates": {"database": "food", "schema": "nghi_dev", "name": "dates", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\core\\dates.sql", "original_file_path": "models\\food\\intermediate\\core\\dates.sql", "unique_id": "model.sales_group.dates", "fqn": ["sales_group", "food", "intermediate", "core", "dates"], "alias": "dates", "checksum": {"name": "sha256", "checksum": "c928f7018af6bc7feac9439fe049e4b5851a194d24c8be9fbbb458f5a799cc80"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.6574125, "relation_name": "\"food\".\"nghi_dev\".\"dates\"", "raw_code": "{{ dbt_date.get_date_dimension(\"2020-01-01\", \"2030-12-31\") }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_date.get_date_dimension"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.inventory_openning": {"database": "food", "schema": "nghi_dev", "name": "inventory_openning", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\inventory\\inventory_openning.sql", "original_file_path": "models\\food\\intermediate\\inventory\\inventory_openning.sql", "unique_id": "model.sales_group.inventory_openning", "fqn": ["sales_group", "food", "intermediate", "inventory", "inventory_openning"], "alias": "inventory_openning", "checksum": {"name": "sha256", "checksum": "6d0c12e49d3c799ce251ebada3eac9c1b9ea0c9c092aa9350c6eed4ecc4f2b22"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.7488647, "relation_name": "\"food\".\"nghi_dev\".\"inventory_openning\"", "raw_code": "with raw_bf as (select matnr, --san pham\r\n                       bwart, -- momentype\r\n                       budat, -- posting date\r\n                       lgort, -- store log\r\n                       werks,\r\n                       case\r\n                           when bwvorg = '000'\r\n                               or bwvorg = '001'\r\n                               or bwvorg = '004'\r\n                               or bwvorg = '005'\r\n                               or bwvorg = '006'\r\n                               or bwvorg = '010'\r\n                               or bwvorg = '002'\r\n                               or bwvorg = '003'\r\n                               or bwvorg = '007'\r\n                                    and (bwapplnm = 'MM' or bwapplnm = 'IS-R')\r\n                                    and bwbrel = '1'\r\n                                    and (bsttyp is not null or\r\n                                         (bsttyp like '%EQ%' and kzbws like '%AM%'))\r\n                               then\r\n                               case\r\n                                   when bwgeo = 0 and bwapplnm = 'IS-R'\r\n                                       then\r\n                                       case\r\n                                           when rocancel = 'X'\r\n                                               then dmbtr * (-1)\r\n                                           else dmbtr\r\n                                           end\r\n                                   else bwgeo\r\n                                   end\r\n                           else 0\r\n                           end as _prevs_val_inflow,\r\n                       case\r\n                           when bwvorg = '100'\r\n                               or bwvorg = '101'\r\n                               or bwvorg = '104'\r\n                               or bwvorg = '105'\r\n                               or bwvorg = '106'\r\n                               or bwvorg = '110'\r\n                               or bwvorg = '102'\r\n                               or bwvorg = '103'\r\n                               or bwvorg = '107'\r\n                                    and (bwapplnm = 'MM' or bwapplnm = 'IS-R')\r\n                                    and bwbrel = '1'\r\n                                    and (bsttyp is not null or\r\n                                         (bsttyp like '%EQ%' and kzbws like '%AM%'))\r\n                               then\r\n                               case\r\n                                   when rocancel = 'X'\r\n                                       then bwgeo\r\n                                   else dmbtr\r\n                                   end\r\n                           else 0\r\n                           end as _pisvs_val_outflow,\r\n                       case\r\n                           when bwvorg = '000'\r\n                               or bwvorg = '001'\r\n                               or bwvorg = '004'\r\n                               or bwvorg = '005'\r\n                               or bwvorg = '006'\r\n                               or bwvorg = '010'\r\n                               or bwvorg = '002'\r\n                               or bwvorg = '003'\r\n                               or bwvorg = '007'\r\n                                    and (bwapplnm = 'MM' or bwapplnm = 'IS-R')\r\n                                    and bwbrel = '1'\r\n                               then\r\n                               case\r\n                                   when bwmng = 0 and bwapplnm = 'IS-R'\r\n                                       then\r\n                                       case\r\n                                           when rocancel = 'X'\r\n                                               then menge * (-1)\r\n                                           else menge\r\n                                           end\r\n                                   else bwmng\r\n                                   end\r\n                           else 0\r\n                           end as _pretotstk_inflow,\r\n                       case\r\n                           when bwvorg = '100'\r\n                               or bwvorg = '101'\r\n                               or bwvorg = '104'\r\n                               or bwvorg = '105'\r\n                               or bwvorg = '106'\r\n                               or bwvorg = '110'\r\n                               or bwvorg = '102'\r\n                               or bwvorg = '103'\r\n                               or bwvorg = '107'\r\n                                    and (bwapplnm = 'MM' or bwapplnm = 'IS-R')\r\n                                    and bwbrel = '1'\r\n                               then\r\n                               case\r\n                                   when bwmng = 0 and bwapplnm = 'IS-R'\r\n                                       then\r\n                                       case\r\n                                           when rocancel = 'X'\r\n                                               then menge * (-1)\r\n                                           else menge\r\n                                           end\r\n                                   else bwmng\r\n                                   end\r\n                           else 0\r\n                           end as _pistotstk_outflow\r\n                from {{ ref('food_stg_sap_s4__mm_2lis_03_bf') }}\r\n                ),\r\n\r\n     raw_um as (select budat,\r\n                       bukrs,    --company\r\n                       matnr,    --material\r\n                       bwart,    --material type\r\n                       werks,    --plant\r\n                       bwvorg,\r\n                       meins,    --\u0111\u01a1n v\u1ecb t\u00ednh\r\n                       lifnr,    --vendor\r\n                       bwkey,    --valuation area\r\n                       belnr,    -- document number\r\n                       bldat,    --document date\r\n                       sobkz,    --special stock ind\r\n                       bklas,    --valuation class\r\n                       bwapplnm, --application component\r\n                       bsttyp,   --stock category\r\n                       bstaus,   --stock type\r\n                       bwgeo,\r\n                       waers,\r\n                       case\r\n                           when bwvorg = '050'\r\n                               or bwvorg = '051'\r\n                               or bwvorg = '052'\r\n                                    and bwapplnm = 'MM'\r\n                               then bwgeo\r\n                           else 0 end as _prevs_val_inflow,\r\n\r\n                       case\r\n                           when bwvorg = '150'\r\n                               or bwvorg = '151'\r\n                               or bwvorg = '152'\r\n                                    and bwapplnm = 'MM'\r\n                               then bwgeo\r\n                           else 0 end as _pisvs_val_outflow\r\n\r\n                from {{ ref('food_stg_sap_s4__mm_2lis_03_um') }}\r\n                ),\r\n\r\n     group_by_matnr_bf as (select budat,\r\n                                  matnr,\r\n                                  werks,\r\n                                  sum(_prevs_val_inflow)  as prevs_val_inflow,\r\n                                  sum(_pisvs_val_outflow) as pisvs_val_outflow,\r\n                                  sum(_pretotstk_inflow)  as pretotstk_inflow,\r\n                                  sum(_pistotstk_outflow) as pistotstk_outflow\r\n                           from raw_bf\r\n                           group by budat, matnr,werks),\r\n\r\n     group_by_matnr_um as (select budat,\r\n                                  matnr,\r\n                                  werks,\r\n                                  sum(_prevs_val_inflow)  as prevs_val_inflow,\r\n                                  sum(_pisvs_val_outflow) as pisvs_val_outflow,\r\n                                  0                       as pretotstk_inflow,\r\n                                  0                       as pistotstk_outflow\r\n                           from raw_um\r\n                           group by budat, matnr, werks),\r\n\r\n     union_group_by_matnr as (select budat,\r\n                                     matnr,\r\n                                     werks,\r\n                                     prevs_val_inflow,\r\n                                     pisvs_val_outflow,\r\n                                     pretotstk_inflow,\r\n                                     pistotstk_outflow\r\n                              from group_by_matnr_bf\r\n                              union all\r\n                              select budat,\r\n                                     matnr,\r\n                                     werks,\r\n                                     prevs_val_inflow,\r\n                                     pisvs_val_outflow,\r\n                                     pretotstk_inflow,\r\n                                     pistotstk_outflow\r\n                              from group_by_matnr_um\r\n                              ),\r\n\r\n     distinct_matnr as (select distinct matnr, werks from union_group_by_matnr),\r\n\r\n     group_matnr as (select a.calday,\r\n                            b.matnr,\r\n                            b.werks\r\n                     from \"food\".duc_dev.dim_dates as a\r\n                              cross join distinct_matnr as b\r\n                     where a.calday >= '20211230'\r\n                       and a.calday < (select current_date as date)\r\n                     order by calday, matnr),\r\n\r\n     final as (select t.calday,\r\n                          t.matnr,\r\n                          t.werks,\r\n                          c.prevs_val_inflow,\r\n                          c.pisvs_val_outflow,\r\n                          c.pretotstk_inflow,\r\n                          c.pistotstk_outflow,\r\n                        nvl(c.prevs_val_inflow,0) - nvl(c.pisvs_val_outflow,0) as _total_inventory,\r\n                        nvl(c.pretotstk_inflow,0) - nvl(c.pistotstk_outflow,0) as _total_quantity\r\n                   from group_matnr as t\r\n                            left join union_group_by_matnr as c\r\n                                      on c.budat::text = t.calday::text\r\n                                          and c.matnr = t.matnr\r\n                                        and c.werks = t.werks\r\n                   order by t.calday, t.matnr, t.werks\r\n                   ),\r\n\r\ntotal_material as (select calday, matnr, werks,\r\n       sum(_total_inventory) over ( partition by matnr, werks order by calday rows unbounded preceding) as total_inventory_,\r\n    sum(_total_quantity) over ( partition by matnr, werks order by calday rows unbounded preceding) as total_quantity_\r\n           --prevs_val_inflow,\r\n           --pisvs_val_outflow\r\nfrom final )\r\n\r\n\r\nselect *\r\nfrom total_material\r\nwhere calday = '20230301'\r\nand matnr = 'G110300001'\r\norder by calday, werks", "language": "sql", "refs": [{"name": "food_stg_sap_s4__mm_2lis_03_bf", "package": null, "version": null}, {"name": "food_stg_sap_s4__mm_2lis_03_um", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_sap_s4__mm_2lis_03_bf", "model.sales_group.food_stg_sap_s4__mm_2lis_03_um"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_int_channels__unioned": {"database": "food", "schema": "nghi_dev", "name": "food_int_channels__unioned", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\food_int_channels__unioned.sql", "original_file_path": "models\\food\\intermediate\\sales\\food_int_channels__unioned.sql", "unique_id": "model.sales_group.food_int_channels__unioned", "fqn": ["sales_group", "food", "intermediate", "sales", "food_int_channels__unioned"], "alias": "food_int_channels__unioned", "checksum": {"name": "sha256", "checksum": "cd47479b729f17718c6efb88f6834a45e0c356bd7bbf863b5b546c9d28aa0dc3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.7529025, "relation_name": "\"food\".\"nghi_dev\".\"food_int_channels__unioned\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\nwith\r\n    sap_channels as (\r\n        select code, name from {{ ref(\"food_stg_sap_s4__md_0distr_chan_text\") }}\r\n    ),\r\n\r\n    excel_channles as (\r\n        select to_code as code, max(from_code) as from_code\r\n        from {{ ref(\"food_stg_excel_sales__md_channels\") }}\r\n        group by to_code\r\n    )\r\n\r\nselect\r\n    nvl(sap_channels.code, excel_channles.code) as code,\r\n    nvl(sap_channels.name, excel_channles.from_code) as name,\r\n    case when sap_channels.code is not null then 'SAP' else 'EXCEL' end as _source\r\nfrom sap_channels\r\nfull join excel_channles using (code)\r\norder by code", "language": "sql", "refs": [{"name": "food_stg_sap_s4__md_0distr_chan_text", "package": null, "version": null}, {"name": "food_stg_excel_sales__md_channels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_sap_s4__md_0distr_chan_text", "model.sales_group.food_stg_excel_sales__md_channels"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_int_customer_groups_1__unioned": {"database": "food", "schema": "nghi_dev", "name": "food_int_customer_groups_1__unioned", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\food_int_customer_groups_1__unioned.sql", "original_file_path": "models\\food\\intermediate\\sales\\food_int_customer_groups_1__unioned.sql", "unique_id": "model.sales_group.food_int_customer_groups_1__unioned", "fqn": ["sales_group", "food", "intermediate", "sales", "food_int_customer_groups_1__unioned"], "alias": "food_int_customer_groups_1__unioned", "checksum": {"name": "sha256", "checksum": "21aa3f505bd9c658f6a5ac7791ca0938878f279c46e4719daf2f819370a4fba3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.7559733, "relation_name": "\"food\".\"nghi_dev\".\"food_int_customer_groups_1__unioned\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\nwith\r\n    sap_groups as (\r\n        select code, name from {{ ref(\"food_stg_sap_s4__md_0cust_grp1_text\") }}\r\n    ),\r\n\r\n    lbc_groups as (\r\n        select to_customer_group_1_code as code, max(from_customer_group_1_name) as name\r\n        from {{ ref(\"food_stg_excel_sales__md_customer_groups\") }}\r\n        group by code\r\n    )\r\n\r\nselect\r\n    nvl(sap_groups.code, lbc_groups.code) as code,\r\n    nvl(sap_groups.name, lbc_groups.name) as name,\r\n    case when sap_groups.code is not null then 'SAP' else 'EXCEL' end as _source\r\nfrom sap_groups\r\nfull join lbc_groups using (code)\r\norder by code", "language": "sql", "refs": [{"name": "food_stg_sap_s4__md_0cust_grp1_text", "package": null, "version": null}, {"name": "food_stg_excel_sales__md_customer_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_sap_s4__md_0cust_grp1_text", "model.sales_group.food_stg_excel_sales__md_customer_groups"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_int_customer_groups_2__unioned": {"database": "food", "schema": "nghi_dev", "name": "food_int_customer_groups_2__unioned", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\food_int_customer_groups_2__unioned.sql", "original_file_path": "models\\food\\intermediate\\sales\\food_int_customer_groups_2__unioned.sql", "unique_id": "model.sales_group.food_int_customer_groups_2__unioned", "fqn": ["sales_group", "food", "intermediate", "sales", "food_int_customer_groups_2__unioned"], "alias": "food_int_customer_groups_2__unioned", "checksum": {"name": "sha256", "checksum": "57ad13a54e061dbe99259b0821ff8a095f38aa6c5712546d3ff300dc6d2f5aa3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.7589748, "relation_name": "\"food\".\"nghi_dev\".\"food_int_customer_groups_2__unioned\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\nwith\r\n    sap_groups as (\r\n        select code, name from {{ ref(\"food_stg_sap_s4__md_0cust_grp2_text\") }}\r\n    ),\r\n\r\n    lbc_groups as (\r\n        select to_customer_group_2_code as code, max(from_customer_group_2_name) as name\r\n        from {{ ref(\"food_stg_excel_sales__md_customer_groups\") }}\r\n        group by code\r\n    )\r\n\r\nselect\r\n    nvl(sap_groups.code, lbc_groups.code) as code,\r\n    nvl(sap_groups.name, lbc_groups.name) as name,\r\n    case when sap_groups.code is not null then 'SAP' else 'EXCEL' end as _source\r\nfrom sap_groups\r\nfull join lbc_groups using (code)\r\norder by code", "language": "sql", "refs": [{"name": "food_stg_sap_s4__md_0cust_grp2_text", "package": null, "version": null}, {"name": "food_stg_excel_sales__md_customer_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_sap_s4__md_0cust_grp2_text", "model.sales_group.food_stg_excel_sales__md_customer_groups"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_int_customer_groups__unioned": {"database": "food", "schema": "nghi_dev", "name": "food_int_customer_groups__unioned", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\food_int_customer_groups__unioned.sql", "original_file_path": "models\\food\\intermediate\\sales\\food_int_customer_groups__unioned.sql", "unique_id": "model.sales_group.food_int_customer_groups__unioned", "fqn": ["sales_group", "food", "intermediate", "sales", "food_int_customer_groups__unioned"], "alias": "food_int_customer_groups__unioned", "checksum": {"name": "sha256", "checksum": "6ad1fbd85013dafb1b2bbe74caff10947950808364433542971d390d83569cda"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.7621417, "relation_name": "\"food\".\"nghi_dev\".\"food_int_customer_groups__unioned\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\nwith\r\n    sap_groups as (\r\n        select code, name from {{ ref(\"food_stg_sap_s4__md_0cust_group_text\") }}\r\n    ),\r\n\r\n    lbc_groups as (\r\n        select to_customer_group_code as code, max(from_customer_group_name) as name\r\n        from {{ ref(\"food_stg_excel_sales__md_customer_groups\") }}\r\n        group by code\r\n    )\r\n\r\nselect\r\n    nvl(sap_groups.code, lbc_groups.code) as code,\r\n    nvl(sap_groups.name, lbc_groups.name) as name,\r\n    case when sap_groups.code is not null then 'SAP' else 'EXCEL' end as _source\r\n    \r\nfrom sap_groups\r\nfull join lbc_groups using (code)\r\norder by code", "language": "sql", "refs": [{"name": "food_stg_sap_s4__md_0cust_group_text", "package": null, "version": null}, {"name": "food_stg_excel_sales__md_customer_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_sap_s4__md_0cust_group_text", "model.sales_group.food_stg_excel_sales__md_customer_groups"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_int_fi_ofi_acdoca_10__filtered_to_sales": {"database": "food", "schema": "nghi_dev", "name": "food_int_fi_ofi_acdoca_10__filtered_to_sales", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\food_int_fi_ofi_acdoca_10__filtered_to_sales.sql", "original_file_path": "models\\food\\intermediate\\sales\\food_int_fi_ofi_acdoca_10__filtered_to_sales.sql", "unique_id": "model.sales_group.food_int_fi_ofi_acdoca_10__filtered_to_sales", "fqn": ["sales_group", "food", "intermediate", "sales", "food_int_fi_ofi_acdoca_10__filtered_to_sales"], "alias": "food_int_fi_ofi_acdoca_10__filtered_to_sales", "checksum": {"name": "sha256", "checksum": "da9273f648d7ef72c273687b98129036e8b3a0e9d1fdd39fa9a3c3e3344a4bd1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.767141, "relation_name": "\"food\".\"nghi_dev\".\"food_int_fi_ofi_acdoca_10__filtered_to_sales\"", "raw_code": "with distinct_bill_doc as (\r\n    -- Todo: deuplicated need to review (vbeln, posnr)\r\n    select distinct vbeln, posnr, pkunwe, pkunre, pstyv, vgbel\r\n    from {{ ref(\"food_stg_sap_s4__sd_2lis_13_vditm\") }}\r\n\r\n),\r\n\r\nproduct_attr as (\r\n\r\n    select * from {{ ref(\"food_stg_sap_s4__md_0material_attr\") }}\r\n       \r\n),\r\n\r\nsales_order_item as (\r\n\r\n    select \r\n        vbeln, \r\n        posnr,\r\n        augru,\r\n        row_number() over (partition by vbeln, posnr order by augru, rocancel ,vdatu desc) as dedup\r\n    from {{ ref(\"food_stg_sap_s4__sd_2lis_11_vaitm\") }}\r\n\r\n),\r\n\r\ndeduped_so as (\r\n\r\n    select * from sales_order_item where dedup = 1\r\n\r\n),\r\n\r\nsale_person as (\r\n\r\n    select vbeln, kunnr, parvw from {{ ref('food_stg_sap_s4__tbl_vbpa') }}\r\n    where parvw in ('Z1','Z2','Z3','Z4','Z5','AG','WE','RE')\r\n\r\n),\r\n\r\nraw_fi as (\r\n\r\n    select\r\n        budat,\r\n        fiscyearper,\r\n        rbukrs,\r\n        werks,\r\n        vkbur_pa,\r\n        vkorg,\r\n        vkgrp_pa,\r\n        bzirk,\r\n        vtweg,\r\n        case when matnr = '' then matnr_copa else matnr end as product_code,\r\n        prodh_pa,\r\n        paph1_pa,\r\n        paph2_pa,\r\n        paph3_pa,\r\n        paph4_pa,\r\n        paph5_pa,\r\n        paph6_pa,\r\n        paph7_pa,\r\n        paph8_pa,\r\n        kdgrp,\r\n        kunnr,\r\n        kvgr1_pa,\r\n        kvgr2_pa,\r\n        racct,\r\n        spart,\r\n        belnr,\r\n        fkart,\r\n        case when awtyp = 'VBRK' then awref else '' end as pbillnum,\r\n        case when awtyp = 'VBRK' then awitem else '' end as pbillitem,\r\n        kdauf as psodocno,\r\n        kdpos as psodocln,\r\n        runit,\r\n        sum(msl) as bill_quantity,\r\n        sum(quant1) as bill_quantity_in_kg,\r\n        sum(hsl) as bill_net_amount\r\n        \r\n    from {{ ref(\"food_stg_sap_s4__fi_0fi_acdoca_10\") }}\r\n    where racct between '0051100000' and '0051900000'\r\n        and ktopl = '1000'\r\n        and scope = 'PA'\r\n        and paobjnr != '0000000000'\r\n        and paobjnr != ''\r\n        and rldnr = '0L'\r\n    {{ dbt_utils.group_by(n=32) }}\r\n\r\n),\r\n\r\n\r\nfi_sale_hm as (\r\n\r\n    select\r\n        budat as posting_date,\r\n        fiscyearper as period_year,\r\n        rbukrs as company_code,\r\n        werks as plant_code,\r\n        vkbur_pa as sales_office_code,\r\n        vkorg as sales_organization_code,\r\n        vkgrp_pa as sales_group_code,\r\n        bzirk as sales_district_code,\r\n        vtweg as distribution_channel_code,\r\n        product_code,\r\n        prodh_pa as product_hierachy_code,\r\n        paph1_pa as product_hierarchy_01_1_code,\r\n        paph2_pa as product_hierarchy_01_2_code,\r\n        paph3_pa as product_hierarchy_01_3_code,\r\n        paph4_pa as product_hierarchy_01_4_code,\r\n        paph5_pa as product_hierarchy_01_5_code,\r\n        paph6_pa as product_hierarchy_01_6_code,\r\n        paph7_pa as product_hierarchy_01_7_code,\r\n        paph8_pa as product_hierarchy_01_8_code,\r\n        kdgrp as customer_group_code,\r\n        kvgr1_pa as customer_group_1_code,\r\n        kvgr2_pa as customer_group_2_code,\r\n        racct as gl_account_code,\r\n        spart as division_code,\r\n        fkart as billing_type,\r\n        psodocno,\r\n        pbillnum,\r\n        pbillitem,\r\n        distinct_bill_doc.pstyv as catagory_item,  -- item category\r\n        belnr as document_number,\r\n        runit as unit,\r\n        bill_quantity * (-1) as bill_quantity,\r\n        bill_quantity_in_kg * (-1) as bill_quantity_in_kg,\r\n        bill_net_amount * (-1) as bill_net_amount,\r\n        kunnr as sold_to,  -- sold to party\r\n        deduped_so.augru as reason_code,\r\n\r\n        case when runit = 'EA' and product_attr.weight_unit = 'KGM' and product_code = 'GCP0890000' then 14\r\n            else product_attr.net_weight end as net_weight,\r\n            \r\n        case\r\n            when psodocno != ''\r\n            then\r\n                (\r\n                    select kunnr from sale_person\r\n                    where sale_person.vbeln = raw_fi.psodocno\r\n                         and sale_person.parvw = 'RE'\r\n                )\r\n        end as bill_to,  -- bill to party\r\n        case\r\n            when psodocno != ''\r\n            then\r\n                (\r\n                    select kunnr from sale_person\r\n                    where sale_person.vbeln = raw_fi.psodocno\r\n                         and sale_person.parvw = 'WE'\r\n                )\r\n        end as ship_to,  -- ship to party\r\n\r\n        case\r\n            when psodocno != ''\r\n            then\r\n                (\r\n                    select kunnr from sale_person\r\n                    where sale_person.vbeln = raw_fi.psodocno\r\n                         and sale_person.parvw = 'Z1'\r\n                )\r\n        end as pempz11,  -- * PG/Salesman\r\n\r\n        case\r\n            when psodocno != ''\r\n            then\r\n                (\r\n                      select kunnr from sale_person\r\n                    where sale_person.vbeln = raw_fi.psodocno\r\n                         and sale_person.parvw = 'Z2'\r\n                )\r\n        end as pempz12,  -- * Sales executive\r\n\r\n        case\r\n            when psodocno != ''\r\n            then\r\n                (\r\n                    select kunnr from sale_person\r\n                    where sale_person.vbeln = raw_fi.psodocno\r\n                    and sale_person.parvw = 'Z3'\r\n                )\r\n        end as pempz13,  -- * Sales supervisor\r\n\r\n        case\r\n            when psodocno != ''\r\n            then\r\n                (\r\n                    select kunnr from sale_person\r\n                    where sale_person.vbeln = raw_fi.psodocno\r\n                    and sale_person.parvw = 'Z4'\r\n                )\r\n        end as pempz14,  -- * Sales ASM\r\n\r\n        case\r\n            when psodocno != ''\r\n            then\r\n                (\r\n                    select kunnr from sale_person\r\n                    where sale_person.vbeln = raw_fi.psodocno\r\n                    and sale_person.parvw = 'Z5'\r\n                )\r\n        end as pempz15  -- * Sales RSM\r\n\r\n    from raw_fi\r\n    left join distinct_bill_doc on raw_fi.pbillnum = distinct_bill_doc.vbeln \r\n                        and raw_fi.pbillitem = distinct_bill_doc.posnr\r\n    left join deduped_so on raw_fi.psodocno = deduped_so.vbeln\r\n                        and raw_fi.psodocln = deduped_so.posnr\r\n    left join product_attr on raw_fi.product_code = product_attr.code\r\n\r\n)\r\n    \r\nselect * from fi_sale_hm", "language": "sql", "refs": [{"name": "food_stg_sap_s4__sd_2lis_13_vditm", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0material_attr", "package": null, "version": null}, {"name": "food_stg_sap_s4__sd_2lis_11_vaitm", "package": null, "version": null}, {"name": "food_stg_sap_s4__tbl_vbpa", "package": null, "version": null}, {"name": "food_stg_sap_s4__fi_0fi_acdoca_10", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.sales_group.food_stg_sap_s4__sd_2lis_13_vditm", "model.sales_group.food_stg_sap_s4__md_0material_attr", "model.sales_group.food_stg_sap_s4__sd_2lis_11_vaitm", "model.sales_group.food_stg_sap_s4__tbl_vbpa", "model.sales_group.food_stg_sap_s4__fi_0fi_acdoca_10"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_int_misa_lbc2022_generalledger__filtered_to_sales": {"database": "food", "schema": "nghi_dev", "name": "food_int_misa_lbc2022_generalledger__filtered_to_sales", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\food_int_misa_lbc2022_generalledger__filtered_to_sales.sql", "original_file_path": "models\\food\\intermediate\\sales\\food_int_misa_lbc2022_generalledger__filtered_to_sales.sql", "unique_id": "model.sales_group.food_int_misa_lbc2022_generalledger__filtered_to_sales", "fqn": ["sales_group", "food", "intermediate", "sales", "food_int_misa_lbc2022_generalledger__filtered_to_sales"], "alias": "food_int_misa_lbc2022_generalledger__filtered_to_sales", "checksum": {"name": "sha256", "checksum": "01d6b8224594e80afc3f6666ea74854c662c100b0d25a52f636dafed3cc0a936"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.7762132, "relation_name": "\"food\".\"nghi_dev\".\"food_int_misa_lbc2022_generalledger__filtered_to_sales\"", "raw_code": "with sales as (\r\n\r\n    select *\r\n    from {{ ref(\"food_stg_misa__lbc_generalledger\") }}\r\n    where \r\n        (\r\n            substring(correspondingaccountnumber, 1, 3) = '511' \r\n            or (\r\n                substring(refno, 1, 2) = 'GG' and substring(correspondingaccountnumber, 1, 3) = '335'\r\n            )\r\n            or (\r\n                substring(correspondingaccountnumber, 1, 3) = '521' and creditamount != 0\r\n            )\r\n        )\r\n        and (\r\n            -- filter t\u00e0i kho\u1ea3n c\u00f3\r\n            correspondingaccountnumber not between '33500000' and '33599999'\r\n            and correspondingaccountnumber not between '91100000' and '91199999'\r\n        )\r\n        and refno not in (\r\n                'PK2301-0045',\r\n                'PK2301-0048',\r\n                'PK2301-0063',\r\n                'PK2302-0026',\r\n                'PK2302-0065'\r\n        )\r\n\r\n),\r\n\r\ncustomer_code_to_main_dimensions as (\r\n\r\n    select\r\n        customers.customer_code,\r\n        channels.to_code as _channel_code,\r\n        customers.channel as origin_channel_name,\r\n        customer_groups.to_customer_group_code as _customer_group_code,\r\n        customers.customer_group as origin_customer_group_name,\r\n        customer_groups.to_customer_group_1_code as _customer_group_1_code,\r\n        customers.customer_group_1 as origin_customer_group_1_name,\r\n        customer_groups.to_customer_group_2_code as _customer_group_2_code,\r\n        customers.customer_group_2 as origin_customer_group_2_name,\r\n        sales_groups.to_sales_group_code as _sales_group_code,\r\n        customers.sales_group as origin_sales_group_name,\r\n        customers.ship_to_name as ship_to_name,\r\n        customers.ship_to as ship_to\r\n\r\n    from {{ ref(\"food_sales_mapping_lbc_customers\") }} customers\r\n    left join {{ ref(\"food_stg_excel_sales__md_channels\") }} channels\r\n        on customers.channel = channels.from_code and channels.source = 'LBC'\r\n    left join {{ ref(\"food_stg_excel_sales__md_customer_groups\") }} customer_groups\r\n        on customers.customer_group = customer_groups.from_customer_group_name\r\n        and customers.customer_group_1 = customer_groups.from_customer_group_1_name\r\n        and customers.customer_group_2 = customer_groups.from_customer_group_2_name\r\n        and customer_groups.source = 'LBC'\r\n    left join {{ ref(\"food_stg_excel_sales__lbc_sales_groups\") }} sales_groups\r\n        on customers.sales_group = sales_groups.from_sales_group_name\r\n        and sales_groups.source = 'LBC'\r\n\r\n),\r\n\r\nmapped_common_dimensions as (\r\n\r\n    select\r\n        sales.*,\r\n        customer_code_to_main_dimensions._channel_code,\r\n        customer_code_to_main_dimensions.origin_channel_name,\r\n        customer_code_to_main_dimensions._customer_group_code,\r\n        customer_code_to_main_dimensions.origin_customer_group_name,\r\n        customer_code_to_main_dimensions._customer_group_1_code,\r\n        customer_code_to_main_dimensions.origin_customer_group_1_name,\r\n        customer_code_to_main_dimensions._customer_group_2_code,\r\n        customer_code_to_main_dimensions.origin_customer_group_2_name,\r\n        customer_code_to_main_dimensions._sales_group_code,\r\n        customer_code_to_main_dimensions.origin_sales_group_name,\r\n        customer_code_to_main_dimensions.ship_to_name,\r\n        customer_code_to_main_dimensions.ship_to\r\n\r\n    from sales\r\n    left join customer_code_to_main_dimensions\r\n        on sales.accountobjectcode = customer_code_to_main_dimensions.customer_code\r\n),\r\n\r\nfrom_vat as (\r\n\r\n    select * from sales\r\n    where substring(correspondingaccountnumber, 1, 3) in ('511', '521')\r\n\r\n),\r\n\r\nto_vat as (\r\n    -- why '333', It doesn't exist in sales\r\n    select\r\n        refno,\r\n        refdate,\r\n        invno,\r\n        inventoryitemcode,\r\n        (debitamount - creditamount) as vat\r\n\r\n    from sales\r\n    where substring(correspondingaccountnumber, 1, 3) = '333'\r\n\r\n),\r\n\r\nvat as (\r\n\r\n    select\r\n        from_vat.generalledgerid,\r\n        \r\n        case\r\n            when substring(from_vat.correspondingaccountnumber, 1, 3) = '521'\r\n            then (-1) * to_vat.vat\r\n            else to_vat.vat\r\n        end as _vat\r\n\r\n    from from_vat\r\n    join to_vat on from_vat.refno = to_vat.refno\r\n        and from_vat.refdate = to_vat.refdate\r\n        and from_vat.invno = to_vat.invno\r\n        and from_vat.inventoryitemcode = to_vat.inventoryitemcode\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        -- DIMENSIONS\r\n        mapped_common_dimensions.generalledgerid as general_ledger_id,\r\n        mapped_common_dimensions.refdate as posting_date,  -- ng\u00e0y ch\u1ee9ng t\u1eeb\r\n        mapped_common_dimensions.posteddate as posted_date,  -- ng\u00e0y ho\u1ea1ch to\u00e1n\r\n        mapped_common_dimensions.refno as ref_no,  -- s\u1ed1 ch\u1ee9ng t\u1eeb\r\n        mapped_common_dimensions.accountobjectcode as customer_code,  -- m\u00e3 kh\u00e1ch h\u00e0ng\r\n        mapped_common_dimensions.accountobjectname as customer_name,  -- t\u00ean kh\u00e1ch hang\r\n        mapped_common_dimensions.invdate as invoice_date,  -- ng\u00e0y h\u00f3a \u0111\u01a1n\r\n        mapped_common_dimensions.invno as invoice_no,  -- s\u1ed1 h\u00f3a \u0111\u01a1n\r\n        upper(mapped_common_dimensions.inventoryitemcode) as item_code,  -- m\u00e3 h\u00e0ng\r\n        mapped_common_dimensions.inventoryitemname as item_name,\r\n        unit.unitname as unit_name,\r\n        mapped_common_dimensions.orderid as order_id,\r\n        so.refno as so_number,\r\n        so.accountobjectaddress,\r\n        so.shippingaddress,\r\n        --\r\n        mapped_common_dimensions._channel_code as channel_code,\r\n        mapped_common_dimensions.origin_channel_name,\r\n        mapped_common_dimensions._sales_group_code as sales_group_code,\r\n        mapped_common_dimensions.origin_sales_group_name,\r\n        mapped_common_dimensions._customer_group_code as customer_group_code,\r\n        mapped_common_dimensions.origin_customer_group_name,\r\n        mapped_common_dimensions._customer_group_1_code as customer_group_1_code,\r\n        mapped_common_dimensions.origin_customer_group_1_name,\r\n        mapped_common_dimensions._customer_group_2_code as customer_group_2_code,\r\n        mapped_common_dimensions.origin_customer_group_2_name,\r\n        mapped_common_dimensions.ship_to_name,\r\n        mapped_common_dimensions.ship_to,\r\n        -- METRICS\r\n        case\r\n            when substring(mapped_common_dimensions.correspondingaccountnumber, 1, 3) = '521'\r\n            then 0\r\n            else mapped_common_dimensions.quantity\r\n        end as quantity,  -- S\u1ed1 l\u01b0\u1ee3ng b\u00e1n\r\n        mapped_common_dimensions.unitprice as unit_price,\r\n\r\n        case\r\n            when substring(mapped_common_dimensions.correspondingaccountnumber, 1, 3) = '521'\r\n            then 0\r\n            else mapped_common_dimensions.mainquantity\r\n        end as main_quantity,  -- S\u1ed1 l\u01b0\u1ee3ng b\u00e1n theo \u0110VC\r\n\r\n        case\r\n            when\r\n                left(mapped_common_dimensions.correspondingaccountnumber, 3) = '335'\r\n                and left(mapped_common_dimensions.refno, 2) = 'GG'\r\n            then 0\r\n            else mapped_common_dimensions.creditamount\r\n        end as credit_amount,  -- chi\u1ebft kh\u1ea5u\r\n\r\n        (mapped_common_dimensions.debitamount - credit_amount) as sales_amount,  -- Doanh s\u1ed1 b\u00e1n\r\n        case when vat._vat is not null then vat._vat else 0 end as vat,  -- Thu\u1ebf GTGT\r\n        ((mapped_common_dimensions.debitamount - credit_amount) + vat) as total_payment,  -- t\u1ed5ng thanh to\u00e1n\r\n        mapped_common_dimensions.mainunitprice as main_unit_price,  -- \u0110\u01a1n gi\u00e1 theo \u0110VC\r\n\r\n        case\r\n            when substring(mapped_common_dimensions.correspondingaccountnumber, 1, 3) = '521'\r\n            then mapped_common_dimensions.quantity\r\n            else 0\r\n        end as returned_quantity  -- T\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng tr\u1ea3 l\u1ea1i\r\n\r\n    from mapped_common_dimensions\r\n    left join vat on mapped_common_dimensions.generalledgerid = vat.generalledgerid\r\n    left join {{ source(\"food_misa\", \"unit\") }} unit\r\n        on mapped_common_dimensions.unitid = unit.unitid\r\n    left join {{ source(\"food_misa\", \"saorder\") }} so\r\n        on mapped_common_dimensions.orderid = so.refid\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [{"name": "food_stg_misa__lbc_generalledger", "package": null, "version": null}, {"name": "food_sales_mapping_lbc_customers", "package": null, "version": null}, {"name": "food_stg_excel_sales__md_channels", "package": null, "version": null}, {"name": "food_stg_excel_sales__md_customer_groups", "package": null, "version": null}, {"name": "food_stg_excel_sales__lbc_sales_groups", "package": null, "version": null}], "sources": [["food_misa", "saorder"], ["food_misa", "unit"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_misa.saorder", "source.sales_group.food_misa.unit", "model.sales_group.food_stg_misa__lbc_generalledger", "model.sales_group.food_sales_mapping_lbc_customers", "model.sales_group.food_stg_excel_sales__md_channels", "model.sales_group.food_stg_excel_sales__md_customer_groups", "model.sales_group.food_stg_excel_sales__lbc_sales_groups"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_int_products__unioned": {"database": "food", "schema": "nghi_dev", "name": "food_int_products__unioned", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\food_int_products__unioned.sql", "original_file_path": "models\\food\\intermediate\\sales\\food_int_products__unioned.sql", "unique_id": "model.sales_group.food_int_products__unioned", "fqn": ["sales_group", "food", "intermediate", "sales", "food_int_products__unioned"], "alias": "food_int_products__unioned", "checksum": {"name": "sha256", "checksum": "da282c85de3bfd77e0f434303c51c7baf0b829bc46925376341a3673262cef3a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.7807071, "relation_name": "\"food\".\"nghi_dev\".\"food_int_products__unioned\"", "raw_code": "with matr_text as (\r\n\r\n    select * from {{ ref(\"food_stg_sap_s4__md_0material_text\") }}\r\n\r\n),\r\n\r\nmatr_type_text as (\r\n\r\n    select * from {{ ref(\"food_stg_sap_s4__md_0matl_type_text\") }}\r\n\r\n),\r\n\r\nmd_0prod_hier_text as (\r\n\r\n    select * from {{ ref(\"food_stg_sap_s4__md_0prod_hier_text\") }}\r\n\r\n),\r\n\r\ngkitchen_products as (\r\n\r\n    select\r\n\r\n        case when left(matr_attr.code, 3) = '000' then matr_attr.code::int::text\r\n            else matr_attr.code end as code,\r\n\r\n        matr_text.name,\r\n        matr_attr.type_code as type_code,\r\n        matr_type_text.name as type_name,\r\n        matr_attr.net_weight,\r\n        matr_attr.unit,\r\n        matr_attr.product_hierarchy_l1_code,\r\n\r\n        case when matr_attr.product_hierarchy_l1_code is not null\r\n        then (select name from md_0prod_hier_text where md_0prod_hier_text.code = matr_attr.product_hierarchy_l1_code) \r\n        end as product_hierarchy_l1_name,\r\n\r\n        matr_attr.product_hierarchy_l2_code,\r\n        case when matr_attr.product_hierarchy_l2_code is not null\r\n        then (select name from md_0prod_hier_text where md_0prod_hier_text.code = matr_attr.product_hierarchy_l2_code) \r\n        end as product_hierarchy_l2_name,\r\n\r\n        matr_attr.product_hierarchy_l3_code,\r\n        case when matr_attr.product_hierarchy_l3_code is not null\r\n        then (select name from md_0prod_hier_text where md_0prod_hier_text.code = matr_attr.product_hierarchy_l3_code) \r\n        end as product_hierarchy_l3_name,\r\n\r\n        matr_attr.product_hierarchy_l4_code,\r\n        case when matr_attr.product_hierarchy_l4_code is not null\r\n        then (select name from md_0prod_hier_text where md_0prod_hier_text.code = matr_attr.product_hierarchy_l4_code) \r\n        end as product_hierarchy_l4_name,\r\n\r\n        matr_attr.product_hierarchy_l5_code,\r\n        case when matr_attr.product_hierarchy_l5_code is not null\r\n        then (select name from md_0prod_hier_text where md_0prod_hier_text.code = matr_attr.product_hierarchy_l5_code) \r\n        end as product_hierarchy_l5_name,\r\n\r\n        matr_attr.product_hierarchy_l6_code,\r\n        case when matr_attr.product_hierarchy_l6_code is not null\r\n        then (select name from md_0prod_hier_text where md_0prod_hier_text.code = matr_attr.product_hierarchy_l6_code) \r\n        end as product_hierarchy_l6_name,\r\n\r\n        matr_attr.product_hierarchy_l7_code,\r\n        case when matr_attr.product_hierarchy_l7_code is not null\r\n        then (select name from md_0prod_hier_text where md_0prod_hier_text.code = matr_attr.product_hierarchy_l7_code) \r\n        end as product_hierarchy_l7_name,\r\n\r\n        matr_attr.product_hierarchy_l8_code,\r\n        case when matr_attr.product_hierarchy_l8_code is not null\r\n        then (select name from md_0prod_hier_text where md_0prod_hier_text.code = matr_attr.product_hierarchy_l8_code) \r\n        end as product_hierarchy_l8_name,\r\n        \r\n        'sap_s4' as from_source\r\n        \r\n    from {{ ref(\"food_stg_sap_s4__md_0material_attr\") }} matr_attr\r\n    left join matr_text on matr_attr.code = matr_text.code\r\n    left join matr_type_text on matr_attr.type_code = matr_type_text.code\r\n\r\n),\r\n\r\ncms_leboucher_products as (\r\n\r\n    select\r\n        md_products.code,\r\n        md_products.descr as name,\r\n        md_products.type_code as type_code,\r\n        matr_type_text.name as type_name,\r\n        md_products.net_weight,\r\n        md_products.unit,\r\n        null as product_hierarchy_l1_code,\r\n        md_products.product_hierarchy_l1_name,\r\n        null as product_hierarchy_l2_code,\r\n        md_products.product_hierarchy_l2_name,\r\n        null as product_hierarchy_l3_code,\r\n        md_products.product_hierarchy_l3_name,\r\n        null as product_hierarchy_l4_code,\r\n        md_products.product_hierarchy_l4_name,\r\n        null as product_hierarchy_l5_code,\r\n        md_products.product_hierarchy_l5_name,\r\n        null as product_hierarchy_l6_code,\r\n        md_products.product_hierarchy_l6_name,\r\n        null as product_hierarchy_l7_code,\r\n        md_products.product_hierarchy_l7_name,\r\n        null as product_hierarchy_l8_code,\r\n        md_products.product_hierarchy_l8_name,\r\n        'excel_file' as from_source\r\n\r\n    from {{ ref('food_stg_excel_sales__md_products') }} md_products\r\n    left join matr_type_text on md_products.type_code = matr_type_text.code\r\n\r\n),\r\n\r\nunioned_products as (\r\n    -- not duplicated\r\n    select * from gkitchen_products\r\n    union all\r\n    select * from cms_leboucher_products\r\n\r\n),\r\n\r\ndedup as (\r\n\r\n    select \r\n        *,\r\n        row_number() over (partition by code order by from_source desc) as priority\r\n\r\n    from unioned_products\r\n\r\n)\r\n\r\nselect \r\n    code,\r\n    name,\r\n    type_code,\r\n    type_name,\r\n    net_weight,\r\n    unit,\r\n    product_hierarchy_l1_code,\r\n    coalesce(product_hierarchy_l1_name, 'Other') as product_hierarchy_l1_name,\r\n    product_hierarchy_l2_code,\r\n    coalesce(product_hierarchy_l2_name, 'Other') as product_hierarchy_l2_name,\r\n    product_hierarchy_l3_code,\r\n    coalesce(product_hierarchy_l3_name, 'Other') as product_hierarchy_l3_name,\r\n    product_hierarchy_l4_code,\r\n    coalesce(product_hierarchy_l4_name, 'Other') as product_hierarchy_l4_name,\r\n    product_hierarchy_l5_code,\r\n    coalesce(product_hierarchy_l5_name, 'Other') as product_hierarchy_l5_name,\r\n    product_hierarchy_l6_code,\r\n    coalesce(product_hierarchy_l6_name, 'Other') as product_hierarchy_l6_name,\r\n    product_hierarchy_l7_code,\r\n    coalesce(product_hierarchy_l7_name, 'Other') as product_hierarchy_l7_name,\r\n    product_hierarchy_l8_code,\r\n    coalesce(product_hierarchy_l8_name, 'Other') as product_hierarchy_l8_name,\r\n    from_source\r\n    \r\nfrom dedup\r\nwhere priority = 1", "language": "sql", "refs": [{"name": "food_stg_sap_s4__md_0material_text", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0matl_type_text", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0prod_hier_text", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0material_attr", "package": null, "version": null}, {"name": "food_stg_excel_sales__md_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_sap_s4__md_0material_text", "model.sales_group.food_stg_sap_s4__md_0matl_type_text", "model.sales_group.food_stg_sap_s4__md_0prod_hier_text", "model.sales_group.food_stg_sap_s4__md_0material_attr", "model.sales_group.food_stg_excel_sales__md_products"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_int_sales_groups__unioned": {"database": "food", "schema": "nghi_dev", "name": "food_int_sales_groups__unioned", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\food_int_sales_groups__unioned.sql", "original_file_path": "models\\food\\intermediate\\sales\\food_int_sales_groups__unioned.sql", "unique_id": "model.sales_group.food_int_sales_groups__unioned", "fqn": ["sales_group", "food", "intermediate", "sales", "food_int_sales_groups__unioned"], "alias": "food_int_sales_groups__unioned", "checksum": {"name": "sha256", "checksum": "fef11bcbf73aa8d6c0e2d05bde09b783e2b86431067799167bce74e030f13c9f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.7836277, "relation_name": "\"food\".\"nghi_dev\".\"food_int_sales_groups__unioned\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\"\r\n    )\r\n}}\r\nwith\r\n\r\n    sap_groups as (\r\n        select code, name from {{ ref(\"food_stg_sap_s4__md_0sales_grp_text\") }}\r\n    ),\r\n\r\n    lbc_groups as (\r\n        select to_sales_group_code as code, from_sales_group_name as name\r\n        from {{ ref(\"food_stg_excel_sales__lbc_sales_groups\") }}\r\n    )\r\n\r\nselect\r\n    nvl(sap_groups.code, lbc_groups.code) as code,\r\n    nvl(sap_groups.name, lbc_groups.name) as name,\r\n    case when sap_groups.code is not null then 'SAP' else 'EXCEL' end as _source\r\nfrom sap_groups\r\nfull join lbc_groups using (code)\r\norder by code", "language": "sql", "refs": [{"name": "food_stg_sap_s4__md_0sales_grp_text", "package": null, "version": null}, {"name": "food_stg_excel_sales__lbc_sales_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_sap_s4__md_0sales_grp_text", "model.sales_group.food_stg_excel_sales__lbc_sales_groups"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales": {"database": "food", "schema": "nghi_dev", "name": "food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales.sql", "original_file_path": "models\\food\\intermediate\\sales\\food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales.sql", "unique_id": "model.sales_group.food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales", "fqn": ["sales_group", "food", "intermediate", "sales", "food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales"], "alias": "food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales", "checksum": {"name": "sha256", "checksum": "e29b42819644bd61f2cf762d44c855044dc490b473d0531b5fdaab8af7206fa5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.7875183, "relation_name": "\"food\".\"nghi_dev\".\"food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales\"", "raw_code": "with odbc_channels as (\r\n    \r\n    select * from {{ ref(\"food_stg_excel_sales__md_channels\") }}\r\n    where source = 'ODBC'\r\n\r\n),\r\n\r\nodbc_customer_group as (\r\n\r\n    select * from {{ ref(\"food_stg_excel_sales__md_customer_groups\") }}\r\n    where source = 'ODBC'\r\n\r\n),\r\n\r\nmaterial as (\r\n\r\n    select * \r\n    from {{ ref('food_int_products__unioned') }}\r\n\r\n),\r\n\r\nmapped as (\r\n    \r\n    select \r\n        sales.*, \r\n        odbc_channels.to_code as channel_code,\r\n        odbc_customer_group.to_customer_group_code as customer_group_code,\r\n        odbc_customer_group.to_customer_group_1_code as customer_group_1_code,\r\n        odbc_customer_group.to_customer_group_2_code as customer_group_2_code,\r\n        -- calculated_weight\r\n        (sales.bill_quantity * material.net_weight) as bill_quantity_in_kg\r\n\r\n    from {{ ref(\"food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed\") }} sales\r\n    left join odbc_channels on sales.origin_channel_name = odbc_channels.from_code\r\n    left join odbc_customer_group\r\n        on sales.origin_customer_group_name = odbc_customer_group.from_customer_group_name\r\n        and sales.origin_customer_group_1_name = odbc_customer_group.from_customer_group_1_name\r\n        and sales.origin_customer_group_2_name = odbc_customer_group.from_customer_group_2_name\r\n    left join material on sales.product_code = material.code\r\n\r\n),\r\n\r\ngrouped as (\r\n\r\n    select\r\n        invoice_date,\r\n        ship_date,\r\n        order_number,\r\n        customer_id,\r\n        product_code,\r\n        product_name,\r\n        channel_code,\r\n        origin_channel_name,\r\n        customer_group_code,\r\n        origin_customer_group_name,\r\n        customer_group_1_code,\r\n        origin_customer_group_1_name,\r\n        customer_group_2_code,\r\n        origin_customer_group_2_name,\r\n        order_type,\r\n        ship_name,\r\n        ship_to,\r\n        transportfee,\r\n        sub,\r\n        status,\r\n        promotion,\r\n        promotion_type,\r\n        site_id,\r\n        sum(bill_net_amount) as bill_net_amount,\r\n        sum(bill_quantity) as bill_quantity,\r\n        sum(bill_quantity_in_kg) as bill_quantity_in_kg\r\n\r\n    from mapped {{ dbt_utils.group_by(n=23) }}\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        {{ dbt_utils.generate_surrogate_key([\r\n            'invoice_date',\r\n            'ship_date',\r\n            'order_number',\r\n            'customer_id',\r\n            'product_code',\r\n            'channel_code',\r\n            'customer_group_code',\r\n            'customer_group_1_code',\r\n            'customer_group_2_code',\r\n            'order_type',\r\n            'ship_name',\r\n            'sub',\r\n            'status',\r\n            'promotion',\r\n            'promotion_type',\r\n            'site_id'\r\n            ])\r\n        }} as _key,\r\n        *\r\n    from grouped\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [{"name": "food_stg_excel_sales__md_channels", "package": null, "version": null}, {"name": "food_stg_excel_sales__md_customer_groups", "package": null, "version": null}, {"name": "food_int_products__unioned", "package": null, "version": null}, {"name": "food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sales_group.food_stg_excel_sales__md_channels", "model.sales_group.food_stg_excel_sales__md_customer_groups", "model.sales_group.food_int_products__unioned", "model.sales_group.food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_sales_mapping_channels": {"database": "food", "schema": "nghi_dev", "name": "food_sales_mapping_channels", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\mappings\\food_sales_mapping_channels.sql", "original_file_path": "models\\food\\intermediate\\sales\\mappings\\food_sales_mapping_channels.sql", "unique_id": "model.sales_group.food_sales_mapping_channels", "fqn": ["sales_group", "food", "intermediate", "sales", "mappings", "food_sales_mapping_channels"], "alias": "food_sales_mapping_channels", "checksum": {"name": "sha256", "checksum": "97281bac58a46cedfe1d93fe8453594c069a074e624cd1c26e4ba38f3845385e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.7978032, "relation_name": "\"food\".\"nghi_dev\".\"food_sales_mapping_channels\"", "raw_code": "select trim(source) as source, trim(org_code) as from_name, trim(code) as to_code\r\nfrom {{ ref(\"food_seed_sales_mapping_channels\") }}\r\nwhere source is not null", "language": "sql", "refs": [{"name": "food_seed_sales_mapping_channels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.food_seed_sales_mapping_channels"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_sales_mapping_customer_groups": {"database": "food", "schema": "nghi_dev", "name": "food_sales_mapping_customer_groups", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\mappings\\food_sales_mapping_customer_groups.sql", "original_file_path": "models\\food\\intermediate\\sales\\mappings\\food_sales_mapping_customer_groups.sql", "unique_id": "model.sales_group.food_sales_mapping_customer_groups", "fqn": ["sales_group", "food", "intermediate", "sales", "mappings", "food_sales_mapping_customer_groups"], "alias": "food_sales_mapping_customer_groups", "checksum": {"name": "sha256", "checksum": "72839a295ed71790df6caea64952f2a0a3ea20de22cd060c064e8815d4f79503"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.8007314, "relation_name": "\"food\".\"nghi_dev\".\"food_sales_mapping_customer_groups\"", "raw_code": "select\r\n    trim(source) as source,\r\n    trim(\"customer group\") as from_customer_group_name,\r\n    trim(\"code customer group\") as to_customer_group_code,\r\n    trim(\"customer group 1\") as from_customer_group_1_name,\r\n    trim(\"code customer group 1\") as to_customer_group_1_code,\r\n    trim(\"customer group 2 \") as from_customer_group_2_name,\r\n    trim(\"code customer group 2\") as to_customer_group_2_code\r\nfrom {{ ref(\"food_seed_sales_mapping_customer_groups\") }}\r\nwhere source is not null", "language": "sql", "refs": [{"name": "food_seed_sales_mapping_customer_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.food_seed_sales_mapping_customer_groups"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_sales_mapping_lbc_customers": {"database": "food", "schema": "nghi_dev", "name": "food_sales_mapping_lbc_customers", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\mappings\\food_sales_mapping_lbc_customers.sql", "original_file_path": "models\\food\\intermediate\\sales\\mappings\\food_sales_mapping_lbc_customers.sql", "unique_id": "model.sales_group.food_sales_mapping_lbc_customers", "fqn": ["sales_group", "food", "intermediate", "sales", "mappings", "food_sales_mapping_lbc_customers"], "alias": "food_sales_mapping_lbc_customers", "checksum": {"name": "sha256", "checksum": "d63288f92c4dee81d527d8fc2dd95cedbd494dd9aefe6c66352d06ed61f84524"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.8038, "relation_name": "\"food\".\"nghi_dev\".\"food_sales_mapping_lbc_customers\"", "raw_code": "select\r\n    trim(\"m\u00e3 kh\u00e1ch h\u00e0ng\") as customer_code,\r\n    trim(channel) as channel,\r\n    trim(\"customer group\") as customer_group,\r\n    trim(\"customer group 1\") as customer_group_1,\r\n    trim(\"customer group 2\") as customer_group_2,\r\n    trim(\"sale group\") as sales_group,\r\n    trim(\"ship_to_name\") as ship_to_name,\r\n    trim(\"ship_to\") as ship_to\r\n\r\nfrom {{ ref(\"base_excel_sales__master_data_customer_lbc\") }}\r\nwhere customer_code is not null", "language": "sql", "refs": [{"name": "base_excel_sales__master_data_customer_lbc", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.base_excel_sales__master_data_customer_lbc"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_sales_mapping_lbc_sales_groups": {"database": "food", "schema": "nghi_dev", "name": "food_sales_mapping_lbc_sales_groups", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\mappings\\food_sales_mapping_lbc_sales_groups.sql", "original_file_path": "models\\food\\intermediate\\sales\\mappings\\food_sales_mapping_lbc_sales_groups.sql", "unique_id": "model.sales_group.food_sales_mapping_lbc_sales_groups", "fqn": ["sales_group", "food", "intermediate", "sales", "mappings", "food_sales_mapping_lbc_sales_groups"], "alias": "food_sales_mapping_lbc_sales_groups", "checksum": {"name": "sha256", "checksum": "7953423957a052056c2f19338220f7fb3ddb5029cfcd8b5f547d0f7f568e62d8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.8058012, "relation_name": "\"food\".\"nghi_dev\".\"food_sales_mapping_lbc_sales_groups\"", "raw_code": "select\r\n    trim(source) as source,\r\n    trim(salesgroup) as from_sales_group_name,\r\n    trim(codesalesgroup) as to_sales_group_code\r\nfrom {{ ref(\"food_seed_sales_mapping_lbc_sales_groups\") }}\r\nwhere source is not null", "language": "sql", "refs": [{"name": "food_seed_sales_mapping_lbc_sales_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.food_seed_sales_mapping_lbc_sales_groups"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_sales_mapping_materials": {"database": "food", "schema": "nghi_dev", "name": "food_sales_mapping_materials", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\sales\\mappings\\food_sales_mapping_materials.sql", "original_file_path": "models\\food\\intermediate\\sales\\mappings\\food_sales_mapping_materials.sql", "unique_id": "model.sales_group.food_sales_mapping_materials", "fqn": ["sales_group", "food", "intermediate", "sales", "mappings", "food_sales_mapping_materials"], "alias": "food_sales_mapping_materials", "checksum": {"name": "sha256", "checksum": "a3a8423c5faf21957ecddbc42331f16b069b01b1d00aeb0bf81cc59f7fdb3685"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.8090122, "relation_name": "\"food\".\"nghi_dev\".\"food_sales_mapping_materials\"", "raw_code": "select\r\n    material as code,\r\n    trim(txtmd) as name\r\nfrom {{ ref(\"food_seed_sales_mapping_materials\") }}", "language": "sql", "refs": [{"name": "food_seed_sales_mapping_materials", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.food_seed_sales_mapping_materials"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_cogs": {"database": "food", "schema": "nghi_dev", "name": "food_int_fi_0fi_acdoca_10__filtered_to_cogs", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\score_card\\food_int_fi_0fi_acdoca_10__filtered_to_cogs.sql", "original_file_path": "models\\food\\intermediate\\score_card\\food_int_fi_0fi_acdoca_10__filtered_to_cogs.sql", "unique_id": "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_cogs", "fqn": ["sales_group", "food", "intermediate", "score_card", "food_int_fi_0fi_acdoca_10__filtered_to_cogs"], "alias": "food_int_fi_0fi_acdoca_10__filtered_to_cogs", "checksum": {"name": "sha256", "checksum": "9e25f660c38ea338b7b9b8dc242467355d84b4e146003dd7d3e0cd89126a9e2e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.8120155, "relation_name": "\"food\".\"nghi_dev\".\"food_int_fi_0fi_acdoca_10__filtered_to_cogs\"", "raw_code": "with\r\n    sales_groups_to_channels as (select * from {{ ref(\"food_seed_scorecard_mapping_sales_groups\") }}),\r\n\r\n    _0fi_acdoca_10 as (\r\n        select *\r\n        from {{ ref(\"food_stg_sap_s4__fi_0fi_acdoca_10\") }}\r\n        where budat >= '20230101'\r\n    ),\r\n\r\n    revenue as (\r\n        select *\r\n        from _0fi_acdoca_10\r\n        where\r\n            racct >= '0063240000'\r\n            and racct <= '0063289999'\r\n            and ktopl = 1000\r\n            and kokrs = 1000\r\n            and rbukrs = 3000\r\n            and rldnr = '0L'\r\n    ),\r\n\r\n    mapping_channel as (\r\n        select\r\n            revenue.*,\r\n            -- mapping to channels\r\n            case\r\n                when sales_groups_to_channels.channel_code is not null\r\n                then sales_groups_to_channels.channel_code\r\n                when\r\n                    sales_groups_to_channels.channel_code is null\r\n                    and sales_groups_to_channels.channel_code is null\r\n                then 99\r\n            -- and racct in ('0051121201', '0051183101', '0051123001') then 99\r\n            -- when\r\n            -- (revenue.racct between '0051600000' and '0051900000')\r\n            -- and revenue.racct not in ('0051511000', '0051521000')\r\n            -- and sales_groups_to_channels.channel_code is null then '99'\r\n            end as unioned_channel_code\r\n        from revenue\r\n        left join\r\n            sales_groups_to_channels\r\n            on revenue.vkgrp_pa = sales_groups_to_channels.sales_group_code\r\n    ),\r\n\r\n    mapping_category as (\r\n        select\r\n            case\r\n                when unioned_channel_code = 99\r\n                then 99\r\n                when substring(paph4_pa, 4, 2) in ('11', '12')\r\n                then substring(paph4_pa, 4, 2)::int\r\n                else 98\r\n            end as category,\r\n            mapping_channel.*\r\n        from mapping_channel\r\n    ),\r\n\r\n    mapping_sub_category as (\r\n        select\r\n            case\r\n                when matnr = ''\r\n                then substring(matnr_copa, 1, 11)\r\n                else substring(matnr, 1, 11)\r\n            end as _material,\r\n            case\r\n                when unioned_channel_code = 99\r\n                then 999\r\n                when _material = '00000000002'\r\n                then 997\r\n                when\r\n                    substring(paph5_pa, 6, 3)\r\n                    in ('001', '002', '003', '004', '005', '113', '118', '119')\r\n                then substring(paph5_pa, 6, 3)::int\r\n                else 998\r\n            end as sub_category,\r\n            mapping_category.*\r\n        from mapping_category\r\n    )\r\n\r\nselect *\r\nfrom mapping_sub_category", "language": "sql", "refs": [{"name": "food_seed_scorecard_mapping_sales_groups", "package": null, "version": null}, {"name": "food_stg_sap_s4__fi_0fi_acdoca_10", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.food_seed_scorecard_mapping_sales_groups", "model.sales_group.food_stg_sap_s4__fi_0fi_acdoca_10"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost": {"database": "food", "schema": "nghi_dev", "name": "food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\score_card\\food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost.sql", "original_file_path": "models\\food\\intermediate\\score_card\\food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost.sql", "unique_id": "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost", "fqn": ["sales_group", "food", "intermediate", "score_card", "food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost"], "alias": "food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost", "checksum": {"name": "sha256", "checksum": "852222cf02e9c7b257cf5a392bc16f4e26525faa1c7f1b3a15dcdd4c53f0abe6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.8150108, "relation_name": "\"food\".\"nghi_dev\".\"food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost\"", "raw_code": "with\r\n    sales_groups_to_channels as (select * from {{ ref(\"food_seed_scorecard_mapping_sales_groups\") }}),\r\n\r\n    _0fi_acdoca_10 as (\r\n        select *\r\n        from {{ ref(\"food_stg_sap_s4__fi_0fi_acdoca_10\") }}\r\n        where budat >= '20230101'\r\n    ),\r\n\r\n    revenue as (\r\n        select *\r\n        from _0fi_acdoca_10\r\n        where\r\n            racct >= '0062211101'\r\n            and racct <= '0062780018'\r\n            and ktopl = 1000\r\n            and kokrs = 1000\r\n            and rbukrs = 3100\r\n            and rldnr = '0L'\r\n    ),\r\n\r\n    mapping_channel as (\r\n        select\r\n            revenue.*,\r\n            -- mapping to channels\r\n            case\r\n                when sales_groups_to_channels.channel_code is not null\r\n                then sales_groups_to_channels.channel_code\r\n                when\r\n                    sales_groups_to_channels.channel_code is null\r\n                    and sales_groups_to_channels.channel_code is null\r\n                then 99\r\n            -- and racct in ('0051121201', '0051183101', '0051123001') then 99\r\n            -- when\r\n            -- (revenue.racct between '0051600000' and '0051900000')\r\n            -- and revenue.racct not in ('0051511000', '0051521000')\r\n            -- and sales_groups_to_channels.channel_code is null then '99'\r\n            end as unioned_channel_code\r\n        from revenue\r\n        left join\r\n            sales_groups_to_channels\r\n            on revenue.vkgrp_pa = sales_groups_to_channels.sales_group_code\r\n    ),\r\n\r\n    mapping_category as (\r\n        select\r\n            case\r\n                when unioned_channel_code = 99\r\n                then 99\r\n                when substring(paph4_pa, 4, 2) in ('11', '12')\r\n                then substring(paph4_pa, 4, 2)::int\r\n                else 98\r\n            end as category,\r\n            mapping_channel.*\r\n        from mapping_channel\r\n    ),\r\n\r\n    mapping_sub_category as (\r\n        select\r\n            case\r\n                when matnr = ''\r\n                then substring(matnr_copa, 1, 11)\r\n                else substring(matnr, 1, 11)\r\n            end as _material,\r\n            case\r\n                when unioned_channel_code = 99\r\n                then 999\r\n                when _material = '00000000002'\r\n                then 997\r\n                when\r\n                    substring(paph5_pa, 6, 3)\r\n                    in ('001', '002', '003', '004', '005', '113', '118', '119')\r\n                then substring(paph5_pa, 6, 3)::int\r\n                else 998\r\n            end as sub_category,\r\n            mapping_category.*\r\n        from mapping_category\r\n    )\r\n\r\nselect *\r\nfrom mapping_sub_category", "language": "sql", "refs": [{"name": "food_seed_scorecard_mapping_sales_groups", "package": null, "version": null}, {"name": "food_stg_sap_s4__fi_0fi_acdoca_10", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.food_seed_scorecard_mapping_sales_groups", "model.sales_group.food_stg_sap_s4__fi_0fi_acdoca_10"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_revenue": {"database": "food", "schema": "nghi_dev", "name": "food_int_fi_0fi_acdoca_10__filtered_to_revenue", "resource_type": "model", "package_name": "sales_group", "path": "food\\intermediate\\score_card\\food_int_fi_0fi_acdoca_10__filtered_to_revenue.sql", "original_file_path": "models\\food\\intermediate\\score_card\\food_int_fi_0fi_acdoca_10__filtered_to_revenue.sql", "unique_id": "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_revenue", "fqn": ["sales_group", "food", "intermediate", "score_card", "food_int_fi_0fi_acdoca_10__filtered_to_revenue"], "alias": "food_int_fi_0fi_acdoca_10__filtered_to_revenue", "checksum": {"name": "sha256", "checksum": "e77dd0175d626819362a8364da8356b51ab0bc2d2984129044cbcb3bcd61cd4a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\sales_group\\models\\food\\intermediate\\score_card\\food_int_fi_0fi_acdoca_10__filtered_to_revenue.sql", "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.818573, "relation_name": "\"food\".\"nghi_dev\".\"food_int_fi_0fi_acdoca_10__filtered_to_revenue\"", "raw_code": "with\r\n    _0fi_acdoca_10_filter as (\r\n        select\r\n            racct,\r\n            ktopl,\r\n            kokrs,\r\n            rbukrs,\r\n            rldnr,\r\n            paph4_pa,\r\n            paph5_pa,\r\n            vkgrp_pa,\r\n            matnr,\r\n            budat,\r\n            matnr_copa,\r\n            vtweg,\r\n            fiscyearper,\r\n            rcntr,\r\n            awtyp,\r\n            hsl,\r\n            quant1,\r\n            osl,\r\n            kalnr,\r\n            qsprocess,\r\n            kunnr,\r\n            mlcateg,\r\n            werks\r\n        from {{ ref(\"food_stg_sap_s4__fi_0fi_acdoca_10\") }}\r\n        where\r\n            ktopl = 1000  -- chart of account \r\n            and kokrs = 1000\r\n            and rldnr = '0L'  -- sob type\r\n            and fiscyearper >= '2023001'\r\n\r\n    ),\r\n    mapping_cat_subcat as (\r\n        select\r\n            c.cat_code,\r\n            c.cat_name,\r\n            sc.subcat1_code,\r\n            sc.subcat1_name,\r\n            sc.subcat2_code,\r\n            sc.subcat2_name,\r\n            racct,\r\n            ktopl,\r\n            kokrs,\r\n            rbukrs,\r\n            rldnr,\r\n            paph4_pa,\r\n            paph5_pa,\r\n            vkgrp_pa,\r\n            matnr,\r\n            matnr_copa,\r\n            budat,\r\n            vtweg,\r\n            fiscyearper,\r\n            rcntr,\r\n            hsl,\r\n            quant1,\r\n            osl,\r\n            awtyp,\r\n            kunnr,\r\n            kalnr,\r\n            qsprocess,\r\n            werks\r\n        from _0fi_acdoca_10_filter\r\n        left join\r\n            {{ ref(\"food_seed_scorecard_mapping_categories\") }} c\r\n            on right(paph4_pa, 2) = c.ph4_code\r\n        left join\r\n            {{ ref(\"food_seed_scorecard_mapping_subcategories\") }} sc\r\n            on right(paph5_pa, 3) = sc.ph5_code\r\n    ),\r\n\r\n      mapping_cat_subcat_special_case as (\r\n        select\r\n            cat_code,\r\n            cat_name,\r\n            subcat1_code,\r\n            subcat1_name,\r\n            subcat2_code,\r\n            subcat2_name,\r\n            racct,\r\n            ktopl,\r\n            kokrs,\r\n            rbukrs,\r\n            rldnr,\r\n            paph4_pa,\r\n            paph5_pa,\r\n            vkgrp_pa,\r\n            matnr,\r\n            matnr_copa,\r\n            budat,\r\n            vtweg,\r\n            fiscyearper,\r\n            rcntr,\r\n            hsl,\r\n            quant1,\r\n            osl,\r\n            awtyp,\r\n            kunnr,\r\n            kalnr,\r\n            qsprocess,\r\n            werks,\r\n            case when matnr = '' then matnr_copa else matnr end as _material,\r\n\r\n            case\r\n                when\r\n                    paph4_pa = ''\r\n                    and\r\n                        left(_material, 11) in (\r\n                            '00000000002',\r\n                            '00000000003',\r\n                            '00000000004',\r\n                            '00000000005',\r\n                            '00000000009'\r\n                        )\r\n                    and rbukrs != '3100'\r\n                then '98'\r\n\r\n                 when\r\n                    paph4_pa = ''\r\n                    and _material in (\r\n                        '000000000020000092',\r\n                        '000000000020000084',\r\n                        '000000000020000087'\r\n                    )\r\n                    and rbukrs = '3100'\r\n                then '01'\r\n                when\r\n                    paph4_pa = ''\r\n                    and (left(_material, 11) in (\r\n                        '00000000002',\r\n                        '00000000003',\r\n                        '00000000004',\r\n                        '00000000005',\r\n                        '00000000009'\r\n                    ))\r\n                    and rbukrs = '3100'\r\n                    and _material not in (\r\n                        '000000000020000092',\r\n                        '000000000020000084',\r\n                        '000000000020000087'\r\n                    )\r\n                then '98'\r\n                \r\n                when\r\n                    paph4_pa = ''\r\n                    and racct in ('0051121201', '0051183101', '0064180015')\r\n                then '99'\r\n\r\n                when racct = '0063242002' and rbukrs = '3100'\r\n                then '01'\r\n\r\n                when racct = '0063242001' and rbukrs = '3100'\r\n                then '98'\r\n\r\n                else cat_code\r\n            end as _cat_code,\r\n\r\n            case\r\n                when\r\n                    paph5_pa = ''\r\n                    and (\r\n                        left(_material, 11) in (\r\n                            '00000000002',\r\n                            '00000000003',\r\n                            '00000000004',\r\n                            '00000000005',\r\n                            '00000000009'\r\n                        )\r\n                    )\r\n                    and rbukrs != '3100'\r\n                then '98'\r\n                 when\r\n                    paph5_pa = ''\r\n                    and _material in (\r\n                        '000000000020000092',\r\n                        '000000000020000084',\r\n                        '000000000020000087'\r\n                    )\r\n                    and rbukrs = '3100'\r\n                then '01'\r\n\r\n                when\r\n                    paph5_pa = ''\r\n                    and (left(_material, 11) in (\r\n                        '00000000002',\r\n                        '00000000003',\r\n                        '00000000004',\r\n                        '00000000005',\r\n                        '00000000009'\r\n                    ))\r\n                    and rbukrs = '3100'\r\n                    and _material not in (\r\n                        '000000000020000092',\r\n                        '000000000020000084',\r\n                        '000000000020000087'\r\n                    )\r\n                then '98'\r\n                when\r\n                    paph5_pa = ''\r\n                    and racct in ('0051121201', '0051183101', '0064180015')\r\n                then '99'\r\n\r\n                 when\r\n                    paph5_pa = ''\r\n                    and _material in (\r\n                        '000000000020000092',\r\n                        '000000000020000084',\r\n                        '000000000020000087'\r\n                    )\r\n                    and rbukrs = '3100'\r\n                then '01'\r\n\r\n                when\r\n                    paph5_pa = ''\r\n                    and (left(_material, 11) in (\r\n                        '00000000002',\r\n                        '00000000003',\r\n                        '00000000004',\r\n                        '00000000005',\r\n                        '00000000009'\r\n                    ))\r\n                    and rbukrs = '3100'\r\n                    and _material not in (\r\n                        '000000000020000092',\r\n                        '000000000020000084',\r\n                        '000000000020000087'\r\n                    )\r\n                then '98'\r\n\r\n                else subcat1_code\r\n            end as _subcat_1_code,\r\n            case\r\n                when\r\n                    paph5_pa = ''\r\n                    and (left(_material, 11) in (\r\n                        '00000000002',\r\n                        '00000000003',\r\n                        '00000000004',\r\n                        '00000000005',\r\n                        '00000000009'\r\n                    ))\r\n                    and rbukrs != '3100'\r\n                then '98'\r\n                when\r\n                    paph5_pa = ''\r\n                    and racct in ('0051121201', '0051183101', '0064180015')\r\n                then '99'\r\n\r\n                when\r\n                    paph5_pa = ''\r\n                    and _material in (\r\n                        '000000000020000092',\r\n                        '000000000020000084',\r\n                        '000000000020000087'\r\n                    )\r\n                    and rbukrs = '3100'\r\n                then '01'\r\n\r\n                when\r\n                    paph5_pa = ''\r\n                    and (left(_material, 11) in (\r\n                        '00000000002',\r\n                        '00000000003',\r\n                        '00000000004',\r\n                        '00000000005',\r\n                        '00000000009'\r\n                    ))\r\n                    and rbukrs = '3100'\r\n                    and _material not in (\r\n                        '000000000020000092',\r\n                        '000000000020000084',\r\n                        '000000000020000087'\r\n                    )\r\n                then '98'\r\n\r\n                else subcat2_code\r\n            end as _subcat_2_code\r\n\r\n        from mapping_cat_subcat\r\n    ),\r\n\r\n    concatenate_cat_subcat as (\r\n        select\r\n            case \r\n            when _cat_code is null \r\n            then '99' \r\n            else _cat_code end as cat_code_n,\r\n\r\n            case\r\n                when cat_code_n = '99'\r\n                then 'DT kh\u00e1c'\r\n                when cat_code_n = '98'\r\n                then 'Kh\u00e1c'\r\n                else cat_name\r\n            end as cat_name_n,\r\n\r\n            case\r\n                when _subcat_1_code is null \r\n                then '99' else _subcat_1_code\r\n            end as subcat_1_code,\r\n\r\n            case\r\n                when subcat_1_code = '98'\r\n                then 'Kh\u00e1c'\r\n                when subcat_1_code = '99'\r\n                then 'DT kh\u00e1c'\r\n                else subcat1_name\r\n            end as subcat_1_name,\r\n\r\n            case\r\n                when _subcat_2_code is null \r\n                then '99' else _subcat_2_code\r\n            end as subcat_2_code,\r\n\r\n            case\r\n                when subcat_2_code = '98'\r\n                then 'Kh\u00e1c'\r\n                when subcat_2_code = '99'\r\n                then 'DT kh\u00e1c'\r\n                else subcat2_name\r\n            end as subcat_2_name,\r\n\r\n            racct as \"G/L Account\",\r\n            rbukrs as company_code,\r\n            budat as posting_date,\r\n            case when vtweg = '' then '98' else vtweg end as channel_code,\r\n            matnr as matnr,\r\n            fiscyearper,\r\n            rcntr as costcenter_code,\r\n            awtyp,\r\n            kunnr,\r\n            kalnr,\r\n            qsprocess,\r\n            werks,\r\n            sum(\r\n                case\r\n                    when\r\n                        (racct >= '0051100000' and racct <= '0051199999')\r\n                        and (racct not in ('0051511000', '0051521000'))\r\n                        or racct = '0064180015'\r\n                    then hsl\r\n                    else 0\r\n                end\r\n\r\n            ) as _revenue,\r\n\r\n            sum(\r\n                case\r\n                    when\r\n                        (racct >= '0051100000' and racct <= '0051199999')\r\n                        and (racct not in ('0051511000', '0051521000'))\r\n                    then quant1\r\n                    else 0\r\n                end\r\n\r\n            ) as _quantity,\r\n\r\n            case\r\n                when _quantity != 0 then (_revenue / _quantity) else 0\r\n            end as \"_revenue(D/KG)\",\r\n\r\n            sum(\r\n                case\r\n                    when (racct >= '0063240000' and racct <= '0063289999')\r\n                    then hsl\r\n                    else 0\r\n                end\r\n            ) as _cogs,\r\n\r\n            sum(case when racct = '0063241004' then hsl else 0 end) as \"_cogs(+)\",\r\n\r\n            sum(\r\n                case\r\n                    when\r\n                        (racct >= '0062200000' and racct <= '0062299999')\r\n                        or (racct >= '0062700000' and racct <= '0062799999')\r\n                        then hsl\r\n                        else 0\r\n                        end\r\n            ) as \"_manufacturing cost (4)\",\r\n     \r\n            sum(  \r\n                case\r\n                    when\r\n                        (racct >= '0064100000' and racct <= '0064199999')\r\n                        and racct != '0064180015'\r\n                    then hsl\r\n                    else 0\r\n                end\r\n            ) as \"_mkt & commercial costs (6)\",\r\n\r\n            sum(\r\n                case\r\n                    when racct >= '0064200000' and racct <= '0064299999' then hsl else 0\r\n                end\r\n            ) as \"_administrative costs (7)\",\r\n\r\n            sum(\r\n                case\r\n                    when racct >= '0063500000' and racct <= '0063599999' then hsl else 0\r\n                end\r\n            ) as \"_chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\r\n\r\n            sum(\r\n                case\r\n                    when racct >= '0051500000' and racct <= '0051599999' then hsl else 0\r\n                end\r\n            ) as \"_thu nh\u1eadp t\u00e0i ch\u00ednh(9)\"\r\n\r\n        from mapping_cat_subcat_special_case\r\n        group by\r\n            cat_code_n,\r\n            cat_name_n,\r\n            _subcat_1_code,\r\n            subcat_1_name,\r\n            _subcat_2_code,\r\n            subcat_2_name,\r\n            \"G/L Account\",\r\n            company_code,\r\n            posting_date,\r\n            channel_code,\r\n            matnr,\r\n            fiscyearper,\r\n            costcenter_code,\r\n            awtyp,\r\n            kunnr,\r\n            kalnr,\r\n            qsprocess,\r\n            werks\r\n    ),\r\nfinal as (\r\n    select\r\n    cat_code_n as cat_code,\r\n    cat_name_n as cat_name,\r\n    subcat_1_code,\r\n    subcat_1_name,\r\n    subcat_2_code,\r\n    subcat_2_name,\r\n    \"G/L Account\",\r\n    company_code,\r\n    posting_date,\r\n    channel_code,\r\n    matnr,\r\n    fiscyearper,\r\n    costcenter_code,\r\n    kunnr as customer_code,\r\n    kalnr,\r\n    qsprocess,\r\n    werks,\r\n    sum(_revenue * (-1)) as revenue,\r\n    sum(_quantity * (-1)) as quantity,\r\n    sum(\"_revenue(D/KG)\") as \"revenue(D/KG)\",\r\n    sum(_cogs) as cogs,\r\n    sum(\"_cogs(+)\") as \"cogs(+)\",\r\n\r\n    abs(revenue) - abs(\"cogs(+)\") as \"gross contribution (3) =  (1) - (+)\",\r\n\r\n    sum(\"_manufacturing cost (4)\") as \"manufacturing cost (4)\",\r\n\r\n    abs(\"gross contribution (3) =  (1) - (+)\")\r\n    - abs(\"manufacturing cost (4)\") as \"gross margin (5) = (3) - (4)\",\r\n    \r\n    sum(\"_mkt & commercial costs (6)\") as \"mkt & commercial costs (6)\",\r\n    sum(\"_administrative costs (7)\") as \"administrative costs (7)\",\r\n    sum(\"_chi ph\u00ed t\u00e0i ch\u00ednh(8)\") as \"chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\r\n    sum(\"_thu nh\u1eadp t\u00e0i ch\u00ednh(9)\") as \"thu nh\u1eadp t\u00e0i ch\u00ednh(9)\"\r\nfrom concatenate_cat_subcat\r\ngroup by\r\n    cat_code,\r\n    cat_name,\r\n    subcat_1_code,\r\n    subcat_1_name,\r\n    subcat_2_code,\r\n    subcat_2_name,\r\n    \"G/L Account\",\r\n    company_code,\r\n    posting_date,\r\n    channel_code,\r\n    matnr,\r\n    fiscyearper,\r\n    costcenter_code,\r\n    customer_code,\r\n    kalnr,\r\n    qsprocess,\r\n    werks\r\n),\r\n    _inter_profit as (\r\n        select kalnr_mat,\r\n               process,\r\n               element,\r\n               sum(prcdif_var) as _prcdif_var,\r\n                sum(prcdif_fix) as _prcdif_fix\r\n        from {{ ref('food_stg_sap_s4__tbl_fcml_ccs_r_all_v') }}\r\n        where curtp = '10'\r\n            and categ = 'VN'\r\n            and elesmhk = 'M0'\r\n            group by kalnr_mat,\r\n                    process,\r\n                    element),\r\n\r\n    distribution_inter_profit as (\r\n        select distinct\r\n            fi.ktopl,\r\n            fi.kokrs,\r\n            fi.rbukrs,\r\n            fi.rldnr,\r\n            case when fi.matnr = '' then fi.matnr_copa else fi.matnr end as _material,\r\n            fi.fiscyearper,\r\n            fi.kalnr,\r\n            fi.qsprocess,\r\n            fi.werks,\r\n            ip._prcdif_var,\r\n            ip._prcdif_fix,\r\n            ip.element\r\n            from _0fi_acdoca_10_filter as fi\r\n            left join _inter_profit as ip\r\n            on fi.kalnr = ip.kalnr_mat\r\n            and fi.qsprocess = ip.process\r\n            and fi.mlcateg = 'VN'\r\n            and fi.fiscyearper = '2023005'\r\n            ),\r\n{# \r\n    tmp as (\r\n        select *\r\n        row_number() over (\r\n            partition by user_id\r\n            order by created_at desc\r\n        ) as row_num\r\n        from final \r\n    ) #}\r\n\r\n   distinct_final as (\r\n        select distinct\r\n                max(cat_code) as _cat_code,\r\n               max(cat_name) as _cat_name,\r\n               max(subcat_1_code) as _subcat_1_code,\r\n               max(subcat_1_name) as _subcat_1_name,\r\n               max(subcat_2_code) as _subcat_2_code,\r\n               max(subcat_2_name) as _subcat_2_name,\r\n               max(\"G/L Account\") as \"_G/L Account\",\r\n               company_code,\r\n               max(posting_date) as _posting_date,\r\n               max(channel_code) as _channel_code,\r\n               matnr,\r\n               fiscyearper,\r\n               max(costcenter_code) as _costcenter_code,\r\n               kalnr,\r\n               qsprocess,\r\n               werks,\r\n               max(customer_code) as _customer_code\r\n        from final\r\n        group by matnr,\r\n                 fiscyearper,\r\n                 kalnr,\r\n                 qsprocess,\r\n                 company_code,\r\n                 werks\r\n                 ),\r\n\r\n    inter_profit_1 as (\r\n        select \r\n            rbukrs,\r\n            werks,\r\n            _material,\r\n            sum(case\r\n            when ip.element = '010'\r\n            then ip._prcdif_var\r\n            end ) as \"10-Raw Material\",\r\n\r\n            sum(case\r\n            when ip.element = '020'\r\n            then ip._prcdif_var\r\n            end ) as \"20-Packaging\",\r\n\r\n            sum(case\r\n            when ip.element = '030'\r\n            then ip._prcdif_var\r\n            end ) as \"30-Subcontract\",\r\n\r\n            sum(case\r\n            when ip.element = '040'\r\n            then ip._prcdif_var\r\n            end ) as \"40-Delivery cost STO\",\r\n\r\n            sum(case\r\n            when ip.element = '051'\r\n            then ip._prcdif_var\r\n            end ) as \"51-Emp.Outsourcing\",\r\n\r\n            sum(case\r\n            when ip.element = '052'\r\n            then ip._prcdif_var\r\n            end ) as \"52-Consum&supplies\",\r\n\r\n            sum(case\r\n            when ip.element = '053'\r\n            then ip._prcdif_var\r\n            end ) as \"53-Energy& utilities\",\r\n\r\n            sum(case\r\n            when ip.element = '059'\r\n            then ip._prcdif_var\r\n            end ) as \"59-Other expenses\",\r\n\r\n            sum(case\r\n            when ip.element = '061'\r\n            then ip._prcdif_var\r\n            end ) as \"61-Wages\",\r\n\r\n            sum(case\r\n            when ip.element = '062'\r\n            then ip._prcdif_var\r\n            end ) as \"62-Other wages\",\r\n\r\n            sum(case\r\n            when ip.element = '063'\r\n            then ip._prcdif_var\r\n            end ) as \"63-Depreciation exp\",\r\n\r\n            sum(case\r\n            when ip.element = '069'\r\n            then ip._prcdif_var\r\n            end ) as \"69-Other expenses\",\r\n\r\n            sum(case\r\n            when ip.element = '080'\r\n            then ip._prcdif_var\r\n            end ) as \"80-merchendise\",\r\n\r\n            sum(case\r\n            when ip.element = '090'\r\n            then ip._prcdif_var\r\n            end ) as \"90-Inter.Profit\"\r\n        from distribution_inter_profit as ip\r\n        group by rbukrs, werks, _material),\r\n\r\n    inter_profit_2 as (\r\n        select \r\n            rbukrs,\r\n            werks,\r\n            _material,\r\n            sum(case\r\n            when ip.element = '010'\r\n            then ip._prcdif_fix\r\n            end ) as \"10-Raw Material\",\r\n\r\n            sum(case\r\n            when ip.element = '020'\r\n            then ip._prcdif_fix\r\n            end ) as \"20-Packaging\",\r\n\r\n            sum(case\r\n            when ip.element = '030'\r\n            then ip._prcdif_fix\r\n            end ) as \"30-Subcontract\",\r\n\r\n            sum(case\r\n            when ip.element = '040'\r\n            then ip._prcdif_fix\r\n            end ) as \"40-Delivery cost STO\",\r\n\r\n            sum(case\r\n            when ip.element = '051'\r\n            then ip._prcdif_fix\r\n            end ) as \"51-Emp.Outsourcing\",\r\n\r\n            sum(case\r\n            when ip.element = '052'\r\n            then ip._prcdif_fix\r\n            end ) as \"52-Consum&supplies\",\r\n\r\n            sum(case\r\n            when ip.element = '053'\r\n            then ip._prcdif_fix\r\n            end ) as \"53-Energy& utilities\",\r\n\r\n            sum(case\r\n            when ip.element = '059'\r\n            then ip._prcdif_fix\r\n            end ) as \"59-Other expenses\",\r\n\r\n            sum(case\r\n            when ip.element = '061'\r\n            then ip._prcdif_fix\r\n            end ) as \"61-Wages\",\r\n\r\n            sum(case\r\n            when ip.element = '062'\r\n            then ip._prcdif_fix\r\n            end ) as \"62-Other wages\",\r\n\r\n            sum(case\r\n            when ip.element = '063'\r\n            then ip._prcdif_fix\r\n            end ) as \"63-Depreciation exp\",\r\n\r\n            sum(case\r\n            when ip.element = '069'\r\n            then ip._prcdif_fix\r\n            end ) as \"69-Other expenses\",\r\n\r\n            0 as \"80-merchendise\",\r\n            0 as \"90-Inter.Profit\"\r\n        from distribution_inter_profit as ip\r\n        group by rbukrs, werks, _material),\r\n\r\n     final_all_inter_profit as (\r\n        select * from inter_profit_1\r\n                   union all\r\n        select * from inter_profit_2),\r\n\r\n\r\nfinal_distribution_inter_profit as(\r\n        select\r\n        a._cat_code,\r\n        a._cat_name,\r\n        a._subcat_1_code,\r\n        a._subcat_1_name,\r\n        a._subcat_2_code,\r\n        a._subcat_2_name,\r\n        a.\"_G/L Account\",\r\n        a.company_code,\r\n        a._posting_date,\r\n        a._channel_code,\r\n        a.matnr,\r\n        a.fiscyearper,\r\n        a._costcenter_code,\r\n        a._customer_code,\r\n        a.kalnr,\r\n        a.qsprocess,\r\n        a.werks,\r\n        b1.\"10-raw material\",\r\n        b1.\"20-packaging\",\r\n        b1.\"30-subcontract\",\r\n        b1.\"40-delivery cost sto\",\r\n        b1.\"51-emp.outsourcing\",\r\n        b1.\"52-consum&supplies\",\r\n        b1.\"53-energy& utilities\",\r\n        b1.\"59-other expenses\",\r\n        b1.\"61-wages\",\r\n        b1.\"62-other wages\",\r\n        b1.\"63-depreciation exp\",\r\n        b1.\"69-other expenses\",\r\n        b1.\"80-merchendise\",\r\n        b1.\"90-inter.profit\"\r\n        from distinct_final as a\r\n        inner join final_all_inter_profit as b1\r\n        on a.matnr = b1._material\r\n        and a.company_code = b1.rbukrs\r\n        and a.werks = b1.werks\r\n    ),\r\n\r\nfinal_all as (\r\n    select \r\n    cat_code,\r\n    cat_name,\r\n    subcat_1_code,\r\n    subcat_1_name,\r\n    subcat_2_code,\r\n    subcat_2_name,\r\n    \"G/L Account\",\r\n    company_code,\r\n    posting_date,\r\n    channel_code,\r\n    matnr,\r\n    fiscyearper,\r\n    costcenter_code,\r\n    customer_code,\r\n    '' as kalnr,\r\n    '' as qsprocess,\r\n    werks as plant,\r\n    revenue,\r\n    quantity,\r\n    \"revenue(D/KG)\",\r\n    cogs,\r\n    \"cogs(+)\",\r\n    \"gross contribution (3) =  (1) - (+)\",\r\n    \"manufacturing cost (4)\",\r\n    \"gross margin (5) = (3) - (4)\",\r\n    \"mkt & commercial costs (6)\",\r\n    \"administrative costs (7)\",\r\n    \"chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\r\n    \"thu nh\u1eadp t\u00e0i ch\u00ednh(9)\",\r\n    0 as \"10-raw material\",\r\n    0 as \"20-packaging\",\r\n    0 as \"30-subcontract\",\r\n    0 as \"40-delivery cost sto\",\r\n    0 as \"51-emp.outsourcing\",\r\n    0 as \"52-consum&supplies\",\r\n    0 as \"53-energy& utilities\",\r\n    0 as \"59-other expenses\",\r\n    0 as \"61-wages\",\r\n    0 as \"62-other wages\",\r\n    0 as \"63-depreciation exp\",\r\n    0 as \"69-other expenses\",\r\n    0 as \"80-merchendise\",\r\n    0 as \"90-inter.profit\"\r\n\r\n    from final\r\n\r\n    union all\r\n\r\n    select\r\n    _cat_code as cat_code,\r\n    _cat_name as cat_name,\r\n    _subcat_1_code as subcat_1_code,\r\n    _subcat_1_name as subcat_1_name,\r\n    _subcat_2_code as subcat_2_code,\r\n    _subcat_2_name as subcat_2_name,\r\n    \"_G/L Account\" as \"G/L Account\" ,\r\n    company_code,\r\n    _posting_date as posting_date,\r\n    _channel_code as channel_code,\r\n    matnr,\r\n    fiscyearper,\r\n    _costcenter_code as costcenter_code,\r\n    _customer_code as customer_code,\r\n    kalnr,\r\n    qsprocess,\r\n    werks as plant,\r\n    0 as  revenue,\r\n    0 as  quantity,\r\n    0 as  \"revenue(D/KG)\",\r\n    0 as  cogs,\r\n    0 as  \"cogs(+)\",\r\n    0 as  \"gross contribution (3) = (1) - (+)\",\r\n    0 as  \"manufacturing cost (4)\",\r\n    0 as  \"gross margin (5) = (3) - (4)\",\r\n    0 as  \"mkt & commercial costs (6)\",\r\n    0 as  \"administrative costs (7)\",\r\n    0 as  \"chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\r\n    0 as  \"thu nh\u1eadp t\u00e0i ch\u00ednh(9)\",\r\n    \"10-raw material\",\r\n    \"20-packaging\",\r\n    \"30-subcontract\",\r\n    \"40-delivery cost sto\",\r\n    \"51-emp.outsourcing\",\r\n    \"52-consum&supplies\",\r\n    \"53-energy& utilities\",\r\n    \"59-other expenses\",\r\n    \"61-wages\",\r\n    \"62-other wages\",\r\n    \"63-depreciation exp\",\r\n    \"69-other expenses\",\r\n    \"80-merchendise\",\r\n    \"90-inter.profit\"\r\n    from final_distribution_inter_profit)\r\n\r\n    select * from final_all", "language": "sql", "refs": [{"name": "food_stg_sap_s4__fi_0fi_acdoca_10", "package": null, "version": null}, {"name": "food_seed_scorecard_mapping_categories", "package": null, "version": null}, {"name": "food_seed_scorecard_mapping_subcategories", "package": null, "version": null}, {"name": "food_stg_sap_s4__tbl_fcml_ccs_r_all_v", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_sap_s4__fi_0fi_acdoca_10", "seed.sales_group.food_seed_scorecard_mapping_categories", "seed.sales_group.food_seed_scorecard_mapping_subcategories", "model.sales_group.food_stg_sap_s4__tbl_fcml_ccs_r_all_v"]}, "compiled_path": "target\\compiled\\sales_group\\models\\food\\intermediate\\score_card\\food_int_fi_0fi_acdoca_10__filtered_to_revenue.sql", "compiled": true, "compiled_code": "with\n    _0fi_acdoca_10_filter as (\n        select\n            racct,\n            ktopl,\n            kokrs,\n            rbukrs,\n            rldnr,\n            paph4_pa,\n            paph5_pa,\n            vkgrp_pa,\n            matnr,\n            budat,\n            matnr_copa,\n            vtweg,\n            fiscyearper,\n            rcntr,\n            awtyp,\n            hsl,\n            quant1,\n            osl,\n            kalnr,\n            qsprocess,\n            kunnr,\n            mlcateg,\n            werks\n        from \"food\".\"nghi_dev\".\"food_stg_sap_s4__fi_0fi_acdoca_10\"\n        where\n            ktopl = 1000  -- chart of account \n            and kokrs = 1000\n            and rldnr = '0L'  -- sob type\n            and fiscyearper >= '2023001'\n\n    ),\n    mapping_cat_subcat as (\n        select\n            c.cat_code,\n            c.cat_name,\n            sc.subcat1_code,\n            sc.subcat1_name,\n            sc.subcat2_code,\n            sc.subcat2_name,\n            racct,\n            ktopl,\n            kokrs,\n            rbukrs,\n            rldnr,\n            paph4_pa,\n            paph5_pa,\n            vkgrp_pa,\n            matnr,\n            matnr_copa,\n            budat,\n            vtweg,\n            fiscyearper,\n            rcntr,\n            hsl,\n            quant1,\n            osl,\n            awtyp,\n            kunnr,\n            kalnr,\n            qsprocess,\n            werks\n        from _0fi_acdoca_10_filter\n        left join\n            \"food\".\"nghi_dev\".\"food_seed_scorecard_mapping_categories\" c\n            on right(paph4_pa, 2) = c.ph4_code\n        left join\n            \"food\".\"nghi_dev\".\"food_seed_scorecard_mapping_subcategories\" sc\n            on right(paph5_pa, 3) = sc.ph5_code\n    ),\n\n      mapping_cat_subcat_special_case as (\n        select\n            cat_code,\n            cat_name,\n            subcat1_code,\n            subcat1_name,\n            subcat2_code,\n            subcat2_name,\n            racct,\n            ktopl,\n            kokrs,\n            rbukrs,\n            rldnr,\n            paph4_pa,\n            paph5_pa,\n            vkgrp_pa,\n            matnr,\n            matnr_copa,\n            budat,\n            vtweg,\n            fiscyearper,\n            rcntr,\n            hsl,\n            quant1,\n            osl,\n            awtyp,\n            kunnr,\n            kalnr,\n            qsprocess,\n            werks,\n            case when matnr = '' then matnr_copa else matnr end as _material,\n\n            case\n                when\n                    paph4_pa = ''\n                    and\n                        left(_material, 11) in (\n                            '00000000002',\n                            '00000000003',\n                            '00000000004',\n                            '00000000005',\n                            '00000000009'\n                        )\n                    and rbukrs != '3100'\n                then '98'\n\n                 when\n                    paph4_pa = ''\n                    and _material in (\n                        '000000000020000092',\n                        '000000000020000084',\n                        '000000000020000087'\n                    )\n                    and rbukrs = '3100'\n                then '01'\n                when\n                    paph4_pa = ''\n                    and (left(_material, 11) in (\n                        '00000000002',\n                        '00000000003',\n                        '00000000004',\n                        '00000000005',\n                        '00000000009'\n                    ))\n                    and rbukrs = '3100'\n                    and _material not in (\n                        '000000000020000092',\n                        '000000000020000084',\n                        '000000000020000087'\n                    )\n                then '98'\n                \n                when\n                    paph4_pa = ''\n                    and racct in ('0051121201', '0051183101', '0064180015')\n                then '99'\n\n                when racct = '0063242002' and rbukrs = '3100'\n                then '01'\n\n                when racct = '0063242001' and rbukrs = '3100'\n                then '98'\n\n                else cat_code\n            end as _cat_code,\n\n            case\n                when\n                    paph5_pa = ''\n                    and (\n                        left(_material, 11) in (\n                            '00000000002',\n                            '00000000003',\n                            '00000000004',\n                            '00000000005',\n                            '00000000009'\n                        )\n                    )\n                    and rbukrs != '3100'\n                then '98'\n                 when\n                    paph5_pa = ''\n                    and _material in (\n                        '000000000020000092',\n                        '000000000020000084',\n                        '000000000020000087'\n                    )\n                    and rbukrs = '3100'\n                then '01'\n\n                when\n                    paph5_pa = ''\n                    and (left(_material, 11) in (\n                        '00000000002',\n                        '00000000003',\n                        '00000000004',\n                        '00000000005',\n                        '00000000009'\n                    ))\n                    and rbukrs = '3100'\n                    and _material not in (\n                        '000000000020000092',\n                        '000000000020000084',\n                        '000000000020000087'\n                    )\n                then '98'\n                when\n                    paph5_pa = ''\n                    and racct in ('0051121201', '0051183101', '0064180015')\n                then '99'\n\n                 when\n                    paph5_pa = ''\n                    and _material in (\n                        '000000000020000092',\n                        '000000000020000084',\n                        '000000000020000087'\n                    )\n                    and rbukrs = '3100'\n                then '01'\n\n                when\n                    paph5_pa = ''\n                    and (left(_material, 11) in (\n                        '00000000002',\n                        '00000000003',\n                        '00000000004',\n                        '00000000005',\n                        '00000000009'\n                    ))\n                    and rbukrs = '3100'\n                    and _material not in (\n                        '000000000020000092',\n                        '000000000020000084',\n                        '000000000020000087'\n                    )\n                then '98'\n\n                else subcat1_code\n            end as _subcat_1_code,\n            case\n                when\n                    paph5_pa = ''\n                    and (left(_material, 11) in (\n                        '00000000002',\n                        '00000000003',\n                        '00000000004',\n                        '00000000005',\n                        '00000000009'\n                    ))\n                    and rbukrs != '3100'\n                then '98'\n                when\n                    paph5_pa = ''\n                    and racct in ('0051121201', '0051183101', '0064180015')\n                then '99'\n\n                when\n                    paph5_pa = ''\n                    and _material in (\n                        '000000000020000092',\n                        '000000000020000084',\n                        '000000000020000087'\n                    )\n                    and rbukrs = '3100'\n                then '01'\n\n                when\n                    paph5_pa = ''\n                    and (left(_material, 11) in (\n                        '00000000002',\n                        '00000000003',\n                        '00000000004',\n                        '00000000005',\n                        '00000000009'\n                    ))\n                    and rbukrs = '3100'\n                    and _material not in (\n                        '000000000020000092',\n                        '000000000020000084',\n                        '000000000020000087'\n                    )\n                then '98'\n\n                else subcat2_code\n            end as _subcat_2_code\n\n        from mapping_cat_subcat\n    ),\n\n    concatenate_cat_subcat as (\n        select\n            case \n            when _cat_code is null \n            then '99' \n            else _cat_code end as cat_code_n,\n\n            case\n                when cat_code_n = '99'\n                then 'DT kh\u00e1c'\n                when cat_code_n = '98'\n                then 'Kh\u00e1c'\n                else cat_name\n            end as cat_name_n,\n\n            case\n                when _subcat_1_code is null \n                then '99' else _subcat_1_code\n            end as subcat_1_code,\n\n            case\n                when subcat_1_code = '98'\n                then 'Kh\u00e1c'\n                when subcat_1_code = '99'\n                then 'DT kh\u00e1c'\n                else subcat1_name\n            end as subcat_1_name,\n\n            case\n                when _subcat_2_code is null \n                then '99' else _subcat_2_code\n            end as subcat_2_code,\n\n            case\n                when subcat_2_code = '98'\n                then 'Kh\u00e1c'\n                when subcat_2_code = '99'\n                then 'DT kh\u00e1c'\n                else subcat2_name\n            end as subcat_2_name,\n\n            racct as \"G/L Account\",\n            rbukrs as company_code,\n            budat as posting_date,\n            case when vtweg = '' then '98' else vtweg end as channel_code,\n            matnr as matnr,\n            fiscyearper,\n            rcntr as costcenter_code,\n            awtyp,\n            kunnr,\n            kalnr,\n            qsprocess,\n            werks,\n            sum(\n                case\n                    when\n                        (racct >= '0051100000' and racct <= '0051199999')\n                        and (racct not in ('0051511000', '0051521000'))\n                        or racct = '0064180015'\n                    then hsl\n                    else 0\n                end\n\n            ) as _revenue,\n\n            sum(\n                case\n                    when\n                        (racct >= '0051100000' and racct <= '0051199999')\n                        and (racct not in ('0051511000', '0051521000'))\n                    then quant1\n                    else 0\n                end\n\n            ) as _quantity,\n\n            case\n                when _quantity != 0 then (_revenue / _quantity) else 0\n            end as \"_revenue(D/KG)\",\n\n            sum(\n                case\n                    when (racct >= '0063240000' and racct <= '0063289999')\n                    then hsl\n                    else 0\n                end\n            ) as _cogs,\n\n            sum(case when racct = '0063241004' then hsl else 0 end) as \"_cogs(+)\",\n\n            sum(\n                case\n                    when\n                        (racct >= '0062200000' and racct <= '0062299999')\n                        or (racct >= '0062700000' and racct <= '0062799999')\n                        then hsl\n                        else 0\n                        end\n            ) as \"_manufacturing cost (4)\",\n     \n            sum(  \n                case\n                    when\n                        (racct >= '0064100000' and racct <= '0064199999')\n                        and racct != '0064180015'\n                    then hsl\n                    else 0\n                end\n            ) as \"_mkt & commercial costs (6)\",\n\n            sum(\n                case\n                    when racct >= '0064200000' and racct <= '0064299999' then hsl else 0\n                end\n            ) as \"_administrative costs (7)\",\n\n            sum(\n                case\n                    when racct >= '0063500000' and racct <= '0063599999' then hsl else 0\n                end\n            ) as \"_chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\n\n            sum(\n                case\n                    when racct >= '0051500000' and racct <= '0051599999' then hsl else 0\n                end\n            ) as \"_thu nh\u1eadp t\u00e0i ch\u00ednh(9)\"\n\n        from mapping_cat_subcat_special_case\n        group by\n            cat_code_n,\n            cat_name_n,\n            _subcat_1_code,\n            subcat_1_name,\n            _subcat_2_code,\n            subcat_2_name,\n            \"G/L Account\",\n            company_code,\n            posting_date,\n            channel_code,\n            matnr,\n            fiscyearper,\n            costcenter_code,\n            awtyp,\n            kunnr,\n            kalnr,\n            qsprocess,\n            werks\n    ),\nfinal as (\n    select\n    cat_code_n as cat_code,\n    cat_name_n as cat_name,\n    subcat_1_code,\n    subcat_1_name,\n    subcat_2_code,\n    subcat_2_name,\n    \"G/L Account\",\n    company_code,\n    posting_date,\n    channel_code,\n    matnr,\n    fiscyearper,\n    costcenter_code,\n    kunnr as customer_code,\n    kalnr,\n    qsprocess,\n    werks,\n    sum(_revenue * (-1)) as revenue,\n    sum(_quantity * (-1)) as quantity,\n    sum(\"_revenue(D/KG)\") as \"revenue(D/KG)\",\n    sum(_cogs) as cogs,\n    sum(\"_cogs(+)\") as \"cogs(+)\",\n\n    abs(revenue) - abs(\"cogs(+)\") as \"gross contribution (3) =  (1) - (+)\",\n\n    sum(\"_manufacturing cost (4)\") as \"manufacturing cost (4)\",\n\n    abs(\"gross contribution (3) =  (1) - (+)\")\n    - abs(\"manufacturing cost (4)\") as \"gross margin (5) = (3) - (4)\",\n    \n    sum(\"_mkt & commercial costs (6)\") as \"mkt & commercial costs (6)\",\n    sum(\"_administrative costs (7)\") as \"administrative costs (7)\",\n    sum(\"_chi ph\u00ed t\u00e0i ch\u00ednh(8)\") as \"chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\n    sum(\"_thu nh\u1eadp t\u00e0i ch\u00ednh(9)\") as \"thu nh\u1eadp t\u00e0i ch\u00ednh(9)\"\nfrom concatenate_cat_subcat\ngroup by\n    cat_code,\n    cat_name,\n    subcat_1_code,\n    subcat_1_name,\n    subcat_2_code,\n    subcat_2_name,\n    \"G/L Account\",\n    company_code,\n    posting_date,\n    channel_code,\n    matnr,\n    fiscyearper,\n    costcenter_code,\n    customer_code,\n    kalnr,\n    qsprocess,\n    werks\n),\n    _inter_profit as (\n        select kalnr_mat,\n               process,\n               element,\n               sum(prcdif_var) as _prcdif_var,\n                sum(prcdif_fix) as _prcdif_fix\n        from \"food\".\"nghi_dev\".\"food_stg_sap_s4__tbl_fcml_ccs_r_all_v\"\n        where curtp = '10'\n            and categ = 'VN'\n            and elesmhk = 'M0'\n            group by kalnr_mat,\n                    process,\n                    element),\n\n    distribution_inter_profit as (\n        select distinct\n            fi.ktopl,\n            fi.kokrs,\n            fi.rbukrs,\n            fi.rldnr,\n            case when fi.matnr = '' then fi.matnr_copa else fi.matnr end as _material,\n            fi.fiscyearper,\n            fi.kalnr,\n            fi.qsprocess,\n            fi.werks,\n            ip._prcdif_var,\n            ip._prcdif_fix,\n            ip.element\n            from _0fi_acdoca_10_filter as fi\n            left join _inter_profit as ip\n            on fi.kalnr = ip.kalnr_mat\n            and fi.qsprocess = ip.process\n            and fi.mlcateg = 'VN'\n            and fi.fiscyearper = '2023005'\n            ),\n\n\n   distinct_final as (\n        select distinct\n                max(cat_code) as _cat_code,\n               max(cat_name) as _cat_name,\n               max(subcat_1_code) as _subcat_1_code,\n               max(subcat_1_name) as _subcat_1_name,\n               max(subcat_2_code) as _subcat_2_code,\n               max(subcat_2_name) as _subcat_2_name,\n               max(\"G/L Account\") as \"_G/L Account\",\n               company_code,\n               max(posting_date) as _posting_date,\n               max(channel_code) as _channel_code,\n               matnr,\n               fiscyearper,\n               max(costcenter_code) as _costcenter_code,\n               kalnr,\n               qsprocess,\n               werks,\n               max(customer_code) as _customer_code\n        from final\n        group by matnr,\n                 fiscyearper,\n                 kalnr,\n                 qsprocess,\n                 company_code,\n                 werks\n                 ),\n\n    inter_profit_1 as (\n        select \n            rbukrs,\n            werks,\n            _material,\n            sum(case\n            when ip.element = '010'\n            then ip._prcdif_var\n            end ) as \"10-Raw Material\",\n\n            sum(case\n            when ip.element = '020'\n            then ip._prcdif_var\n            end ) as \"20-Packaging\",\n\n            sum(case\n            when ip.element = '030'\n            then ip._prcdif_var\n            end ) as \"30-Subcontract\",\n\n            sum(case\n            when ip.element = '040'\n            then ip._prcdif_var\n            end ) as \"40-Delivery cost STO\",\n\n            sum(case\n            when ip.element = '051'\n            then ip._prcdif_var\n            end ) as \"51-Emp.Outsourcing\",\n\n            sum(case\n            when ip.element = '052'\n            then ip._prcdif_var\n            end ) as \"52-Consum&supplies\",\n\n            sum(case\n            when ip.element = '053'\n            then ip._prcdif_var\n            end ) as \"53-Energy& utilities\",\n\n            sum(case\n            when ip.element = '059'\n            then ip._prcdif_var\n            end ) as \"59-Other expenses\",\n\n            sum(case\n            when ip.element = '061'\n            then ip._prcdif_var\n            end ) as \"61-Wages\",\n\n            sum(case\n            when ip.element = '062'\n            then ip._prcdif_var\n            end ) as \"62-Other wages\",\n\n            sum(case\n            when ip.element = '063'\n            then ip._prcdif_var\n            end ) as \"63-Depreciation exp\",\n\n            sum(case\n            when ip.element = '069'\n            then ip._prcdif_var\n            end ) as \"69-Other expenses\",\n\n            sum(case\n            when ip.element = '080'\n            then ip._prcdif_var\n            end ) as \"80-merchendise\",\n\n            sum(case\n            when ip.element = '090'\n            then ip._prcdif_var\n            end ) as \"90-Inter.Profit\"\n        from distribution_inter_profit as ip\n        group by rbukrs, werks, _material),\n\n    inter_profit_2 as (\n        select \n            rbukrs,\n            werks,\n            _material,\n            sum(case\n            when ip.element = '010'\n            then ip._prcdif_fix\n            end ) as \"10-Raw Material\",\n\n            sum(case\n            when ip.element = '020'\n            then ip._prcdif_fix\n            end ) as \"20-Packaging\",\n\n            sum(case\n            when ip.element = '030'\n            then ip._prcdif_fix\n            end ) as \"30-Subcontract\",\n\n            sum(case\n            when ip.element = '040'\n            then ip._prcdif_fix\n            end ) as \"40-Delivery cost STO\",\n\n            sum(case\n            when ip.element = '051'\n            then ip._prcdif_fix\n            end ) as \"51-Emp.Outsourcing\",\n\n            sum(case\n            when ip.element = '052'\n            then ip._prcdif_fix\n            end ) as \"52-Consum&supplies\",\n\n            sum(case\n            when ip.element = '053'\n            then ip._prcdif_fix\n            end ) as \"53-Energy& utilities\",\n\n            sum(case\n            when ip.element = '059'\n            then ip._prcdif_fix\n            end ) as \"59-Other expenses\",\n\n            sum(case\n            when ip.element = '061'\n            then ip._prcdif_fix\n            end ) as \"61-Wages\",\n\n            sum(case\n            when ip.element = '062'\n            then ip._prcdif_fix\n            end ) as \"62-Other wages\",\n\n            sum(case\n            when ip.element = '063'\n            then ip._prcdif_fix\n            end ) as \"63-Depreciation exp\",\n\n            sum(case\n            when ip.element = '069'\n            then ip._prcdif_fix\n            end ) as \"69-Other expenses\",\n\n            0 as \"80-merchendise\",\n            0 as \"90-Inter.Profit\"\n        from distribution_inter_profit as ip\n        group by rbukrs, werks, _material),\n\n     final_all_inter_profit as (\n        select * from inter_profit_1\n                   union all\n        select * from inter_profit_2),\n\n\nfinal_distribution_inter_profit as(\n        select\n        a._cat_code,\n        a._cat_name,\n        a._subcat_1_code,\n        a._subcat_1_name,\n        a._subcat_2_code,\n        a._subcat_2_name,\n        a.\"_G/L Account\",\n        a.company_code,\n        a._posting_date,\n        a._channel_code,\n        a.matnr,\n        a.fiscyearper,\n        a._costcenter_code,\n        a._customer_code,\n        a.kalnr,\n        a.qsprocess,\n        a.werks,\n        b1.\"10-raw material\",\n        b1.\"20-packaging\",\n        b1.\"30-subcontract\",\n        b1.\"40-delivery cost sto\",\n        b1.\"51-emp.outsourcing\",\n        b1.\"52-consum&supplies\",\n        b1.\"53-energy& utilities\",\n        b1.\"59-other expenses\",\n        b1.\"61-wages\",\n        b1.\"62-other wages\",\n        b1.\"63-depreciation exp\",\n        b1.\"69-other expenses\",\n        b1.\"80-merchendise\",\n        b1.\"90-inter.profit\"\n        from distinct_final as a\n        inner join final_all_inter_profit as b1\n        on a.matnr = b1._material\n        and a.company_code = b1.rbukrs\n        and a.werks = b1.werks\n    ),\n\nfinal_all as (\n    select \n    cat_code,\n    cat_name,\n    subcat_1_code,\n    subcat_1_name,\n    subcat_2_code,\n    subcat_2_name,\n    \"G/L Account\",\n    company_code,\n    posting_date,\n    channel_code,\n    matnr,\n    fiscyearper,\n    costcenter_code,\n    customer_code,\n    '' as kalnr,\n    '' as qsprocess,\n    werks as plant,\n    revenue,\n    quantity,\n    \"revenue(D/KG)\",\n    cogs,\n    \"cogs(+)\",\n    \"gross contribution (3) =  (1) - (+)\",\n    \"manufacturing cost (4)\",\n    \"gross margin (5) = (3) - (4)\",\n    \"mkt & commercial costs (6)\",\n    \"administrative costs (7)\",\n    \"chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\n    \"thu nh\u1eadp t\u00e0i ch\u00ednh(9)\",\n    0 as \"10-raw material\",\n    0 as \"20-packaging\",\n    0 as \"30-subcontract\",\n    0 as \"40-delivery cost sto\",\n    0 as \"51-emp.outsourcing\",\n    0 as \"52-consum&supplies\",\n    0 as \"53-energy& utilities\",\n    0 as \"59-other expenses\",\n    0 as \"61-wages\",\n    0 as \"62-other wages\",\n    0 as \"63-depreciation exp\",\n    0 as \"69-other expenses\",\n    0 as \"80-merchendise\",\n    0 as \"90-inter.profit\"\n\n    from final\n\n    union all\n\n    select\n    _cat_code as cat_code,\n    _cat_name as cat_name,\n    _subcat_1_code as subcat_1_code,\n    _subcat_1_name as subcat_1_name,\n    _subcat_2_code as subcat_2_code,\n    _subcat_2_name as subcat_2_name,\n    \"_G/L Account\" as \"G/L Account\" ,\n    company_code,\n    _posting_date as posting_date,\n    _channel_code as channel_code,\n    matnr,\n    fiscyearper,\n    _costcenter_code as costcenter_code,\n    _customer_code as customer_code,\n    kalnr,\n    qsprocess,\n    werks as plant,\n    0 as  revenue,\n    0 as  quantity,\n    0 as  \"revenue(D/KG)\",\n    0 as  cogs,\n    0 as  \"cogs(+)\",\n    0 as  \"gross contribution (3) = (1) - (+)\",\n    0 as  \"manufacturing cost (4)\",\n    0 as  \"gross margin (5) = (3) - (4)\",\n    0 as  \"mkt & commercial costs (6)\",\n    0 as  \"administrative costs (7)\",\n    0 as  \"chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\n    0 as  \"thu nh\u1eadp t\u00e0i ch\u00ednh(9)\",\n    \"10-raw material\",\n    \"20-packaging\",\n    \"30-subcontract\",\n    \"40-delivery cost sto\",\n    \"51-emp.outsourcing\",\n    \"52-consum&supplies\",\n    \"53-energy& utilities\",\n    \"59-other expenses\",\n    \"61-wages\",\n    \"62-other wages\",\n    \"63-depreciation exp\",\n    \"69-other expenses\",\n    \"80-merchendise\",\n    \"90-inter.profit\"\n    from final_distribution_inter_profit)\n\n    select * from final_all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_budget_of_accounting_department": {"database": "food", "schema": "nghi_dev", "name": "food_budget_of_accounting_department", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\sales\\food_budget_of_accounting_department.sql", "original_file_path": "models\\food\\marts\\sales\\food_budget_of_accounting_department.sql", "unique_id": "model.sales_group.food_budget_of_accounting_department", "fqn": ["sales_group", "food", "marts", "sales", "food_budget_of_accounting_department"], "alias": "budget_of_accounting_department", "checksum": {"name": "sha256", "checksum": "8dd21bc25b909e6770b7abb0bbeb7b6384629815de52e532118eb8b085da72d0"}, "config": {"enabled": true, "alias": "budget_of_accounting_department", "schema": "marts_sales", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\sales\\_food_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "budget_of_accounting_department", "ra3_node": true}, "created_at": 1692186446.934607, "relation_name": "\"food\".\"nghi_dev\".\"budget_of_accounting_department\"", "raw_code": "select * from {{ ref('food_stg_excel_sales__budget_of_accounting_department') }}", "language": "sql", "refs": [{"name": "food_stg_excel_sales__budget_of_accounting_department", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_excel_sales__budget_of_accounting_department"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_cms_billing_sales": {"database": "food", "schema": "nghi_dev", "name": "food_cms_billing_sales", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\sales\\food_cms_billing_sales.sql", "original_file_path": "models\\food\\marts\\sales\\food_cms_billing_sales.sql", "unique_id": "model.sales_group.food_cms_billing_sales", "fqn": ["sales_group", "food", "marts", "sales", "food_cms_billing_sales"], "alias": "cms_billing_sales", "checksum": {"name": "sha256", "checksum": "83ddbc1c3fa6d92b0ca9e7e7f9c56aaca3d9ecf15c04b4db2c6a690a53becf21"}, "config": {"enabled": true, "alias": "cms_billing_sales", "schema": "marts_sales", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\sales\\_food_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "cms_billing_sales", "ra3_node": true}, "created_at": 1692186446.9243531, "relation_name": "\"food\".\"nghi_dev\".\"cms_billing_sales\"", "raw_code": "select\r\n\r\n    _key,\r\n    invoice_date as posting_date,\r\n    ship_date,\r\n    order_number as sale_order_number,\r\n    customer_id as sold_to,\r\n    product_code,\r\n    product_name,\r\n    channel_code as distribution_channel_code,\r\n    origin_channel_name as distribution_channel_name,\r\n    -- t\u00ean k\u00eanh b\u00e1n h\u00e0ng\r\n    distchan.name as channel_name,  \r\n    customer_group_code,\r\n    origin_customer_group_name,\r\n    -- t\u00ean nh\u00f3m kh\u00e1ch h\u00e0ng\r\n    cusgrp.name as customer_group_name,  \r\n    customer_group_1_code,\r\n    origin_customer_group_1_name,\r\n    -- t\u00ean nh\u00f3m kh\u00e1ch h\u00e0ng 1\r\n    cusgrp1.name as customer_group_1_name,  \r\n    customer_group_2_code,\r\n    origin_customer_group_2_name,\r\n    -- t\u00ean nh\u00f3m kh\u00e1ch h\u00e0ng 2\r\n    cusgrp2.name as customer_group_2_name,  \r\n    order_type as billing_type_name,\r\n    ship_name as sold_to_name,\r\n    ship_to,\r\n    transportfee,\r\n    sub,\r\n    status,\r\n    promotion,\r\n    promotion_type,\r\n    site_id,\r\n    bill_net_amount as bill_net_amount,\r\n    bill_quantity as bill_quantity,\r\n    bill_quantity_in_kg as bill_quantity_in_kg\r\n\r\nfrom {{ ref(\"food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales\") }} cms\r\nleft join {{ ref(\"food_int_channels__unioned\") }} distchan \r\n    on cms.channel_code = distchan.code\r\nleft join {{ ref(\"food_int_customer_groups__unioned\") }} cusgrp \r\n    on cms.customer_group_code = cusgrp.code\r\nleft join {{ ref(\"food_int_customer_groups_1__unioned\") }} cusgrp1\r\n    on cms.customer_group_1_code = cusgrp1.code\r\nleft join {{ ref(\"food_int_customer_groups_2__unioned\") }} cusgrp2\r\n    on cms.customer_group_2_code = cusgrp2.code", "language": "sql", "refs": [{"name": "food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales", "package": null, "version": null}, {"name": "food_int_channels__unioned", "package": null, "version": null}, {"name": "food_int_customer_groups__unioned", "package": null, "version": null}, {"name": "food_int_customer_groups_1__unioned", "package": null, "version": null}, {"name": "food_int_customer_groups_2__unioned", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales", "model.sales_group.food_int_channels__unioned", "model.sales_group.food_int_customer_groups__unioned", "model.sales_group.food_int_customer_groups_1__unioned", "model.sales_group.food_int_customer_groups_2__unioned"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_feedy_dnf_customers": {"database": "food", "schema": "nghi_dev", "name": "food_feedy_dnf_customers", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\sales\\food_feedy_dnf_customers.sql", "original_file_path": "models\\food\\marts\\sales\\food_feedy_dnf_customers.sql", "unique_id": "model.sales_group.food_feedy_dnf_customers", "fqn": ["sales_group", "food", "marts", "sales", "food_feedy_dnf_customers"], "alias": "feedy_dnf_customers", "checksum": {"name": "sha256", "checksum": "2b4cd716e872b666d0e45a2bd52090d3e44710fd257af69922f02366e94d774b"}, "config": {"enabled": true, "alias": "feedy_dnf_customers", "schema": "marts_sales", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\sales\\_food_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "feedy_dnf_customers", "ra3_node": true}, "created_at": 1692186446.9376063, "relation_name": "\"food\".\"nghi_dev\".\"feedy_dnf_customers\"", "raw_code": "select\r\n    {# zindex as \"Index of the invalid record\", #}\r\n    bu_crusr as \"User who created the object\",\r\n    bu_crdat as \"Date on which the object was created\",\r\n    bu_birthdt as \"Date of Birth of Business Partner\",\r\n    bu_birthpl as \"Birthplace of business partner\",\r\n    bu_namep_l as \"Last name of business partner (person)\",\r\n    bu_namep_f as \"First name of business partner (person)\",\r\n    bu_nameor1 as \"Name 1 of organization\",\r\n    bu_nameor2 as \"Name 2 of organization\",\r\n    bu_nameor3 as \"Name 3 of organization\",\r\n    bu_nameor4 as \"Name 4 of organization\",\r\n    ad_title as \"Form-of-Address Key\",\r\n    bu_sort1 as \"Search Term 1 for Business Partner\",\r\n    bu_sort2 as \"Search Term 2 for Business Partner\",\r\n    bu_partner as \"Business Partner Number\",\r\n    bu_type as \"Business Partner Category\",\r\n    bu_group as \"Business Partner Grouping\",\r\n    bu_bpext as \"Business Partner Number in External System\",\r\n    bu_bpkind as \"Business Partner Type\",\r\n    bu_bkvid as \"Bank details ID\",\r\n    bu_banks as \"Bank Country Key\",\r\n    bu_bankk as \"Bank Key\",\r\n    bu_bankn as \"Bank Account Number\",\r\n    bu_bkont as \"Bank Control Key\",\r\n    bu_bkref as \"Reference Details for Bank Details\",\r\n    bu_koinh as \"Account Holder Name\",\r\n    bu_bankaccname as \"Name of Bank Account\",\r\n    bu_relnr as \"BP Relationship Number\",\r\n    bu_partner_2 as \"Business Partner Number_2\",\r\n    bptaxtype as \"Tax Number Category\",\r\n    bptaxnum as \"Business Partner Tax Number\",\r\n    ukm_limit_zero as \"Limit Is Zero\",\r\n    ukm_credit_sgmnt as \"Credit Segment\",\r\n    ukm_credit_limit as \"Credit Limit\",\r\n    ukm_sgm_currency as \"Credit Segment Currency\",\r\n    land1 as \"Country/Region Key\",\r\n    regiogroup as \"Regional structure grouping\",\r\n    ad_strspp1 as \"Street 2\",\r\n    ad_strspp2 as \"Street 3\",\r\n    ad_strspp3 as \"Street 4\",\r\n    ad_lctn as \"Street 5\",\r\n    ad_street as \"Street\",\r\n    regio as \"Region (State, Province, County)\",\r\n    kdgrp as \"Customer Group\",\r\n    bzirk as \"Sales District\",\r\n    waers_v02d as \"Currency\",\r\n    ktgrd as \"Account Assignment Group for this customer\",\r\n    dzterm as \"Terms of payment key\",\r\n    dwerk_ext as \"Delivering Plant (Own or External)\",\r\n    vkbur as \"Sales office\",\r\n    vkgrp as \"Sales group\",\r\n    kvgr1 as \"Customer group 1\",\r\n    kvgr2 as \"Customer group 2\",\r\n    podkz as \"Relevant for POD processing\",\r\n    vkorg as \"Sales Organization\",\r\n    spart as \"Division\",\r\n    vtweg as \"Distribution Channel\",\r\n    dzuawa as \"Key for sorting according to assignment numbers\",\r\n    akont as \"Reconciliation Account in General Ledger\",\r\n    dzahls as \"Block Key for Payment\",\r\n    dzterm_2 as \"Terms of payment key 2\",\r\n    hbkid as \"Short Key for a House Bank\",\r\n    bukrs as \"Company Code\",\r\n    fdgrv as \"Planning Group\",\r\n    name1 as \"Name1\",\r\n    landx50 as \"Country Name\",\r\n    ad_titletx as \"Title text\",\r\n    bu_name1tx as \"Full Name tx1\",\r\n    val_text as \"Short Text for Fixed Values\",\r\n    bu_text40 as \"Description\",\r\n    landx50_2 as \"Country Name 2\",\r\n    bu_text40_2 as \"Description bu 2\",\r\n    bu_name1tx_2 as \"Full Name tx2\",\r\n    text50 as \"Text Field\",\r\n    bezei20 as \"Description bzi20\",\r\n    vtxtk as \"Name\",\r\n    bztxt as \"Name of the district\",\r\n    ltext as \"Long Text\",\r\n    bezei20_2 as \"Description 2\",\r\n    bezei20_3 as \"Description 3\",\r\n    bezei20_4 as \"Description 4\",\r\n    bezei20_5 as \"Description 5\",\r\n    val_text_2 as \"Short Text for Fixed Values 2\",\r\n    vtxtk_2 as \"Name 2\",\r\n    vtxtk_3 as \"Name 3\",\r\n    vtxtk_4 as \"Name 4\",\r\n    txt30 as \"Text\",\r\n    text1_zun as \"Description of the Sort Key\",\r\n    textl_008 as \"Explanation of the Reason for Payment Block\",\r\n    ltxt1 as \"Description ltx1\",\r\n    butxt as \"Name of Company Code or Company\",\r\n    val_text_3 as \"Short Text for Fixed Values 3\",\r\n    ukm_credit_sgmnt_txt as \"Name of Credit Segment\",\r\n    kunn2 as \"Customer number of business partner\",\r\n    knref as \"Customer description of partner (plant, storage location)\",\r\n    parvw as \"Partner Function\",\r\n    vtxtk_5 as \"Name 5\",\r\n    name1_gp as \"Name 1\",\r\n    dzwels as \"List of Respected Payment Methods\",\r\n    ad_smtpadr as \"E-Mail Address\",\r\n    full_adress as \"Text, 255 Characters full adress\",\r\n    zadd as \"Text, 255 Characters zzadd\",\r\n    zstore as \"Text, 255 Characters\",\r\n    takld as \"Tax classification for customer\",\r\n    kverm as \"Memo\",\r\n    ad_tlnmbr1 as \"First telephone no.: dialling code+number\",\r\n    ukm_check_rule_txt as \"Name of Check Rule\",\r\n    ukm_risk_class_txt as \"Name of Risk Class\",\r\n    check_rule as \"Rule for Credit Check\",\r\n    risk_class as \"Risk Class\"\r\nfrom {{ ref(\"food_stg_sap_s4__tbl_ztt_zsdc0016\") }}", "language": "sql", "refs": [{"name": "food_stg_sap_s4__tbl_ztt_zsdc0016", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_sap_s4__tbl_ztt_zsdc0016"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_gkitchen_sales": {"database": "food", "schema": "nghi_dev", "name": "food_gkitchen_sales", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\sales\\food_gkitchen_sales.sql", "original_file_path": "models\\food\\marts\\sales\\food_gkitchen_sales.sql", "unique_id": "model.sales_group.food_gkitchen_sales", "fqn": ["sales_group", "food", "marts", "sales", "food_gkitchen_sales"], "alias": "gkitchen_sales", "checksum": {"name": "sha256", "checksum": "f570031758f0030352924e1b6be97f66941394a9ee7b0946c892d7398e3097dd"}, "config": {"enabled": true, "alias": "gkitchen_sales", "schema": "marts_sales", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"posting_date": {"name": "posting_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\sales\\_food_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "gkitchen_sales", "ra3_node": true}, "created_at": 1692186446.9183571, "relation_name": "\"food\".\"nghi_dev\".\"gkitchen_sales\"", "raw_code": "with joined_dims as (\r\n\r\n    select\r\n        sales.posting_date,\r\n        sales.period_year,\r\n        sales.company_code,\r\n        sales.plant_code,\r\n        plant.name as plant_name,\r\n        sales.sales_office_code,\r\n        soff.name as sales_office_name,\r\n        sales.sales_organization_code,\r\n        sales.sales_group_code,\r\n        sgrp.name as sales_group_name,\r\n        sales.sales_district_code,\r\n        sdist.name as sales_district_name,\r\n        sales.distribution_channel_code,\r\n        distchan.name as distribution_channel_name,\r\n\r\n        case when left(sales.product_code, 3) = '000' then sales.product_code::int::text \r\n            else sales.product_code end as product_code, \r\n\r\n        product.name as product_name,\r\n        sales.product_hierachy_code,\r\n        sales.customer_group_code,\r\n        cusgrp.name as customer_group_name,\r\n\r\n        case when left(sales.sold_to,2) = '00' then sold_to::int::text\r\n          else sales.sold_to end as sold_to,\r\n\r\n        cus.name as sold_to_name,\r\n        sales.customer_group_1_code,\r\n        cusgrp1.name as customer_group_1_name,\r\n        sales.customer_group_2_code,\r\n        cusgrp2.name as customer_group_2_name,\r\n        sales.gl_account_code,\r\n        sales.division_code,\r\n        sales.billing_type,\r\n        md_billing.name as billing_type_name,\r\n        sales.bill_to::int::text as bill_to,\r\n        sales.ship_to::int::text as ship_to,\r\n        ship_cus.name as ship_to_name,\r\n        sales.catagory_item as item_category,\r\n        sales.pempz11 as sale_salesman,\r\n        sales.pempz12 as sale_executive,\r\n        sales.pempz13 as sale_supervisor,\r\n        sales.pempz14 as sale_asm,\r\n        sales.pempz15 as sale_rsm,\r\n        sales.document_number,\r\n        sales.psodocno as sale_order_number,\r\n        sales.reason_code,\r\n        rs_text.name as reason,\r\n        sales.bill_quantity,\r\n        sales.unit,\r\n        -- TODO: review should process net_weight type before or cast after apply formula\r\n        (sales.bill_quantity * net_weight)::decimal(15,3) as bill_quantity_in_kg,\r\n        sales.bill_net_amount\r\n\r\n    from {{ ref(\"food_int_fi_ofi_acdoca_10__filtered_to_sales\") }} as sales\r\n\r\n    left join\r\n        {{ ref(\"food_stg_sap_s4__md_0plant_text\") }} plant on sales.plant_code = plant.code\r\n\r\n    left join\r\n        {{ ref(\"food_stg_sap_s4__md_0sales_off_text\") }} soff\r\n        on sales.sales_office_code = soff.code\r\n\r\n    left join\r\n        {{ ref(\"food_int_sales_groups__unioned\") }} sgrp \r\n        on sales.sales_group_code = sgrp.code\r\n\r\n    left join\r\n        {{ ref(\"food_stg_sap_s4__md_0sales_dist_text\") }} sdist\r\n        on sales.sales_district_code = sdist.code\r\n\r\n    left join\r\n        {{ ref(\"food_int_channels__unioned\") }} distchan\r\n        on sales.distribution_channel_code = distchan.code\r\n\r\n    left join\r\n        {{ ref(\"food_stg_sap_s4__md_0material_text\") }} product\r\n        on sales.product_code = product.code\r\n\r\n    left join\r\n        {{ ref(\"food_int_customer_groups__unioned\") }} cusgrp\r\n        on sales.customer_group_code = cusgrp.code\r\n\r\n    left join {{ ref(\"food_stg_sap_s4__md_0customer_text\") }} cus \r\n        on sales.sold_to = cus.code\r\n\r\n    left join {{ ref(\"food_stg_sap_s4__md_0customer_text\") }} ship_cus \r\n        on sales.ship_to = ship_cus.code\r\n\r\n    left join\r\n        {{ ref(\"food_int_customer_groups_1__unioned\") }} cusgrp1\r\n        on sales.customer_group_1_code = cusgrp1.code\r\n\r\n    left join\r\n        {{ ref(\"food_int_customer_groups_2__unioned\") }} cusgrp2\r\n        on sales.customer_group_2_code = cusgrp2.code\r\n\r\n    left join \r\n        {{ ref(\"food_stg_sap_s4__md_0ord_reason_text\") }} rs_text\r\n        on sales.reason_code = rs_text.reason_code\r\n\r\n    left join\r\n        {{ ref(\"food_stg_sap_s4__md_0bill_type_text\") }} md_billing\r\n        on sales.billing_type = md_billing.code\r\n\r\n)\r\n\r\nselect\r\n    {{ dbt_utils.generate_surrogate_key([\r\n            'posting_date', 'company_code', 'plant_code', 'sales_office_code', 'sales_organization_code',\r\n            'sales_group_code', 'sales_district_code', 'distribution_channel_code', 'product_code', 'product_hierachy_code',\r\n            'customer_group_code', 'sold_to', 'customer_group_1_code', 'customer_group_2_code', '\"gl_account_code\"', 'division_code'\r\n        ])\r\n    }} as _key,\r\n    *\r\n\r\nfrom joined_dims", "language": "sql", "refs": [{"name": "food_int_fi_ofi_acdoca_10__filtered_to_sales", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0plant_text", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0sales_off_text", "package": null, "version": null}, {"name": "food_int_sales_groups__unioned", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0sales_dist_text", "package": null, "version": null}, {"name": "food_int_channels__unioned", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0material_text", "package": null, "version": null}, {"name": "food_int_customer_groups__unioned", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0customer_text", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0customer_text", "package": null, "version": null}, {"name": "food_int_customer_groups_1__unioned", "package": null, "version": null}, {"name": "food_int_customer_groups_2__unioned", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0ord_reason_text", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0bill_type_text", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sales_group.food_int_fi_ofi_acdoca_10__filtered_to_sales", "model.sales_group.food_stg_sap_s4__md_0plant_text", "model.sales_group.food_stg_sap_s4__md_0sales_off_text", "model.sales_group.food_int_sales_groups__unioned", "model.sales_group.food_stg_sap_s4__md_0sales_dist_text", "model.sales_group.food_int_channels__unioned", "model.sales_group.food_stg_sap_s4__md_0material_text", "model.sales_group.food_int_customer_groups__unioned", "model.sales_group.food_stg_sap_s4__md_0customer_text", "model.sales_group.food_stg_sap_s4__md_0customer_text", "model.sales_group.food_int_customer_groups_1__unioned", "model.sales_group.food_int_customer_groups_2__unioned", "model.sales_group.food_stg_sap_s4__md_0ord_reason_text", "model.sales_group.food_stg_sap_s4__md_0bill_type_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_leboucher_sales": {"database": "food", "schema": "nghi_dev", "name": "food_leboucher_sales", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\sales\\food_leboucher_sales.sql", "original_file_path": "models\\food\\marts\\sales\\food_leboucher_sales.sql", "unique_id": "model.sales_group.food_leboucher_sales", "fqn": ["sales_group", "food", "marts", "sales", "food_leboucher_sales"], "alias": "leboucher_sales", "checksum": {"name": "sha256", "checksum": "4cf67875b766ac9b5ef444d3e3875627f37b69397795377e6e9103770f44f79e"}, "config": {"enabled": true, "alias": "leboucher_sales", "schema": "marts_sales", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"posting_date": {"name": "posting_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\sales\\_food_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "leboucher_sales", "ra3_node": true}, "created_at": 1692186446.9213595, "relation_name": "\"food\".\"nghi_dev\".\"leboucher_sales\"", "raw_code": "-- Note: 2 file c\u1ea7n update t\u1eeb user\r\nselect\r\n    {{ dbt_utils.generate_surrogate_key([\"general_ledger_id\"]) }} as _key,\r\n    -- DIMENSIONS\r\n    posting_date,  -- ng\u00e0y ch\u1ee9ng t\u1eeb\r\n    posted_date,  -- ng\u00e0y ho\u1ea1ch to\u00e1n\r\n    ref_no as document_number,  -- s\u1ed1 ch\u1ee9ng t\u1eeb\r\n    customer_code as sold_to,  -- m\u00e3 kh\u00e1ch h\u00e0ng\r\n    customer_name as sold_to_name,  -- t\u00ean kh\u00e1ch h\u00e0ng\r\n    invoice_date,  -- ng\u00e0y h\u00f3a \u0111\u01a1n\r\n    invoice_no,  -- s\u1ed1 h\u00f3a \u0111\u01a1n\r\n    item_code as product_code,  -- m\u00e3 h\u00e0ng\r\n    item_name as product_name,\r\n    unit_name,\r\n    order_id,\r\n    so_number as sale_order_number,\r\n    accountobjectaddress,\r\n    shippingaddress,\r\n    --\r\n    channel_code as distribution_channel_code,\r\n    origin_channel_name as origin_distribution_channel_name,\r\n    distchan.name as distribution_channel_name,  -- t\u00ean k\u00eanh b\u00e1n h\u00e0ng\r\n    sales_group_code,\r\n    origin_sales_group_name,\r\n    sgrp.name as sales_group_name,  -- t\u00ean nh\u00f3m b\u00e1n h\u00e0ng\r\n    customer_group_code,\r\n    origin_customer_group_name,\r\n    cusgrp.name as customer_group_name,  -- t\u00ean nh\u00f3m kh\u00e1ch h\u00e0ng\r\n    customer_group_1_code,\r\n    origin_customer_group_1_name,\r\n    cusgrp1.name as customer_group_1_name,  -- t\u00ean nh\u00f3m kh\u00e1ch h\u00e0ng 1\r\n    customer_group_2_code,\r\n    origin_customer_group_2_name,\r\n    cusgrp2.name as customer_group_2_name,  -- t\u00ean nh\u00f3m kh\u00e1ch h\u00e0ng 2\r\n    ship_to_name,\r\n    ship_to,\r\n    -- METRICS\r\n    quantity as bill_quantity,  -- S\u1ed1 l\u01b0\u1ee3ng b\u00e1n\r\n    unit_price,\r\n    quantity * cv_rate.conversion_rate as bill_quantity_in_kg,  -- S\u1ed1 l\u01b0\u1ee3ng b\u00e1n theo \u0110VC\r\n    credit_amount,  -- chi\u1ebft kh\u1ea5u\r\n    sales_amount as bill_net_amount,  -- Doanh s\u1ed1 b\u00e1n\r\n    vat,  -- Thu\u1ebf GTGT\r\n    total_payment,  -- t\u1ed5ng thanh to\u00e1n\r\n    main_unit_price,  -- \u0110\u01a1n gi\u00e1 theo \u0110VC\r\n    returned_quantity,  -- T\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng tr\u1ea3 l\u1ea1i\r\n    returned_quantity * cv_rate.conversion_rate as returned_quantity_in_kg\r\n\r\n    \r\nfrom {{ ref(\"food_int_misa_lbc2022_generalledger__filtered_to_sales\") }} lbc\r\n\r\nleft join\r\n    {{ ref(\"food_int_sales_groups__unioned\") }} sgrp on lbc.sales_group_code = sgrp.code\r\n\r\nleft join\r\n    {{ ref(\"food_int_channels__unioned\") }} distchan on lbc.channel_code = distchan.code\r\n\r\nleft join\r\n    {{ ref(\"food_int_customer_groups__unioned\") }} cusgrp\r\n    on lbc.customer_group_code = cusgrp.code\r\n\r\nleft join\r\n    {{ ref(\"food_int_customer_groups_1__unioned\") }} cusgrp1\r\n    on lbc.customer_group_1_code = cusgrp1.code\r\n\r\nleft join\r\n    {{ ref(\"food_int_customer_groups_2__unioned\") }} cusgrp2\r\n    on lbc.customer_group_2_code = cusgrp2.code\r\n\r\nleft join \r\n    {{ ref(\"food_stg_excel_sales__md_products_conversion_rate_lbc\") }} cv_rate\r\n    on lbc.item_code = cv_rate.code and lbc.unit_name = cv_rate.unit", "language": "sql", "refs": [{"name": "food_int_misa_lbc2022_generalledger__filtered_to_sales", "package": null, "version": null}, {"name": "food_int_sales_groups__unioned", "package": null, "version": null}, {"name": "food_int_channels__unioned", "package": null, "version": null}, {"name": "food_int_customer_groups__unioned", "package": null, "version": null}, {"name": "food_int_customer_groups_1__unioned", "package": null, "version": null}, {"name": "food_int_customer_groups_2__unioned", "package": null, "version": null}, {"name": "food_stg_excel_sales__md_products_conversion_rate_lbc", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sales_group.food_int_misa_lbc2022_generalledger__filtered_to_sales", "model.sales_group.food_int_sales_groups__unioned", "model.sales_group.food_int_channels__unioned", "model.sales_group.food_int_customer_groups__unioned", "model.sales_group.food_int_customer_groups_1__unioned", "model.sales_group.food_int_customer_groups_2__unioned", "model.sales_group.food_stg_excel_sales__md_products_conversion_rate_lbc"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_products": {"database": "food", "schema": "nghi_dev", "name": "food_products", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\sales\\food_products.sql", "original_file_path": "models\\food\\marts\\sales\\food_products.sql", "unique_id": "model.sales_group.food_products", "fqn": ["sales_group", "food", "marts", "sales", "food_products"], "alias": "products", "checksum": {"name": "sha256", "checksum": "18876cc9dd196fc0962370a2b8c4a0e5d08f95361045c019a52e82c6875c3672"}, "config": {"enabled": true, "alias": "products", "schema": "marts_sales", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\sales\\_food_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "products", "ra3_node": true}, "created_at": 1692186446.9316056, "relation_name": "\"food\".\"nghi_dev\".\"products\"", "raw_code": "select * \r\nfrom {{ ref('food_int_products__unioned') }}", "language": "sql", "refs": [{"name": "food_int_products__unioned", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_int_products__unioned"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_sales_target_by_channels": {"database": "food", "schema": "nghi_dev", "name": "food_sales_target_by_channels", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\sales\\food_sales_target_by_channels.sql", "original_file_path": "models\\food\\marts\\sales\\food_sales_target_by_channels.sql", "unique_id": "model.sales_group.food_sales_target_by_channels", "fqn": ["sales_group", "food", "marts", "sales", "food_sales_target_by_channels"], "alias": "sales_target_by_channels", "checksum": {"name": "sha256", "checksum": "51836d0cce13f34440edae574d9c1717ad1511e32ff9759959c0b0291c4ccc4f"}, "config": {"enabled": true, "alias": "sales_target_by_channels", "schema": "marts_sales", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\sales\\_food_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "sales_target_by_channels", "ra3_node": true}, "created_at": 1692186446.9264455, "relation_name": "\"food\".\"nghi_dev\".\"sales_target_by_channels\"", "raw_code": "select * from {{ ref(\"food_stg_excel_sales__target_by_channel\") }}", "language": "sql", "refs": [{"name": "food_stg_excel_sales__target_by_channel", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_excel_sales__target_by_channel"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_sales_target_by_channels_products": {"database": "food", "schema": "nghi_dev", "name": "food_sales_target_by_channels_products", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\sales\\food_sales_target_by_channels_products.sql", "original_file_path": "models\\food\\marts\\sales\\food_sales_target_by_channels_products.sql", "unique_id": "model.sales_group.food_sales_target_by_channels_products", "fqn": ["sales_group", "food", "marts", "sales", "food_sales_target_by_channels_products"], "alias": "sales_target_by_channels_products", "checksum": {"name": "sha256", "checksum": "a45fadfd8713084c2e154fa1be22e83a7383312b410b91a873b62a5a9a223fdb"}, "config": {"enabled": true, "alias": "sales_target_by_channels_products", "schema": "marts_sales", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\sales\\_food_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "sales_target_by_channels_products", "ra3_node": true}, "created_at": 1692186446.929606, "relation_name": "\"food\".\"nghi_dev\".\"sales_target_by_channels_products\"", "raw_code": "select * from {{ ref(\"food_stg_excel_sales__target_by_channel_by_product\") }}", "language": "sql", "refs": [{"name": "food_stg_excel_sales__target_by_channel_by_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_excel_sales__target_by_channel_by_product"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_channels": {"database": "food", "schema": "nghi_dev", "name": "food_channels", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\score_card\\food_channels.sql", "original_file_path": "models\\food\\marts\\score_card\\food_channels.sql", "unique_id": "model.sales_group.food_channels", "fqn": ["sales_group", "food", "marts", "score_card", "food_channels"], "alias": "channels", "checksum": {"name": "sha256", "checksum": "b77e8df1b5678d87857ab71d273a24f6dcf379b02b5a41bd5fdea33db1be9a88"}, "config": {"enabled": true, "alias": "channels", "schema": "marts_score_card", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\score_card\\_food_score_card__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_score_card", "alias": "channels", "ra3_node": true}, "created_at": 1692186447.0529354, "relation_name": "\"food\".\"nghi_dev\".\"channels\"", "raw_code": "select code, name, _source from {{ ref(\"food_int_channels__unioned\") }}", "language": "sql", "refs": [{"name": "food_int_channels__unioned", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_int_channels__unioned"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_cogs": {"database": "food", "schema": "nghi_dev", "name": "food_cogs", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\score_card\\food_cogs.sql", "original_file_path": "models\\food\\marts\\score_card\\food_cogs.sql", "unique_id": "model.sales_group.food_cogs", "fqn": ["sales_group", "food", "marts", "score_card", "food_cogs"], "alias": "cogs", "checksum": {"name": "sha256", "checksum": "4c55f81451a0f8836e2624bf695f7b09fd9bbe367a117bfe0f129e7c481a2c5f"}, "config": {"enabled": true, "alias": "cogs", "schema": "marts_score_card", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\score_card\\_food_score_card__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_score_card", "alias": "cogs", "ra3_node": true}, "created_at": 1692186447.0387588, "relation_name": "\"food\".\"nghi_dev\".\"cogs\"", "raw_code": "select\r\n    budat as posting_date,\r\n    hsl as amount,\r\n    unioned_channel_code as channel_code,\r\n    category,\r\n    sub_category\r\nfrom {{ ref(\"food_int_fi_0fi_acdoca_10__filtered_to_cogs\") }}", "language": "sql", "refs": [{"name": "food_int_fi_0fi_acdoca_10__filtered_to_cogs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_cogs"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_companies": {"database": "food", "schema": "nghi_dev", "name": "food_companies", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\score_card\\food_companies.sql", "original_file_path": "models\\food\\marts\\score_card\\food_companies.sql", "unique_id": "model.sales_group.food_companies", "fqn": ["sales_group", "food", "marts", "score_card", "food_companies"], "alias": "companies", "checksum": {"name": "sha256", "checksum": "09bef2a73183a1ddc7c7568da0a0136b13188c86d560dde86ed0a52dd209a2ef"}, "config": {"enabled": true, "alias": "companies", "schema": "marts_score_card", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\score_card\\_food_score_card__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_score_card", "alias": "companies", "ra3_node": true}, "created_at": 1692186447.0570803, "relation_name": "\"food\".\"nghi_dev\".\"companies\"", "raw_code": "select * from {{ ref('food_stg_sap_s4__md_0comp_code_text') }}", "language": "sql", "refs": [{"name": "food_stg_sap_s4__md_0comp_code_text", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_sap_s4__md_0comp_code_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_cost_elements": {"database": "food", "schema": "nghi_dev", "name": "food_cost_elements", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\score_card\\food_cost_elements.sql", "original_file_path": "models\\food\\marts\\score_card\\food_cost_elements.sql", "unique_id": "model.sales_group.food_cost_elements", "fqn": ["sales_group", "food", "marts", "score_card", "food_cost_elements"], "alias": "cost_elements", "checksum": {"name": "sha256", "checksum": "4c89d94c9b99a0f1b37c73bea4074c9f92c1c1a9cd9580c8b4265552f93c2dcf"}, "config": {"enabled": true, "alias": "cost_elements", "schema": "marts_score_card", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\score_card\\_food_score_card__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_score_card", "alias": "cost_elements", "ra3_node": true}, "created_at": 1692186447.0679922, "relation_name": "\"food\".\"nghi_dev\".\"cost_elements\"", "raw_code": "select\r\n    code,\r\n    short_name,\r\n    full_name\r\nfrom {{ ref(\"food_stg_sap_s4__md_0costelmnt_text\") }}", "language": "sql", "refs": [{"name": "food_stg_sap_s4__md_0costelmnt_text", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_sap_s4__md_0costelmnt_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_manufacturing_cost": {"database": "food", "schema": "nghi_dev", "name": "food_manufacturing_cost", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\score_card\\food_manufacturing_cost.sql", "original_file_path": "models\\food\\marts\\score_card\\food_manufacturing_cost.sql", "unique_id": "model.sales_group.food_manufacturing_cost", "fqn": ["sales_group", "food", "marts", "score_card", "food_manufacturing_cost"], "alias": "manufacturing_cost", "checksum": {"name": "sha256", "checksum": "c32516b7941ffb59356a8ac53d56011f10dcb72d0702fb397760f01a4dd05635"}, "config": {"enabled": true, "alias": "manufacturing_cost", "schema": "marts_score_card", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\score_card\\_food_score_card__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_score_card", "alias": "manufacturing_cost", "ra3_node": true}, "created_at": 1692186447.0417547, "relation_name": "\"food\".\"nghi_dev\".\"manufacturing_cost\"", "raw_code": "select\r\n    budat as posting_date,\r\n    hsl as amount,\r\n    unioned_channel_code as channel_code,\r\n    rcntr as category,\r\n    sub_category\r\nfrom {{ ref(\"food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost\") }}", "language": "sql", "refs": [{"name": "food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_mapping_categories": {"database": "food", "schema": "nghi_dev", "name": "food_mapping_categories", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\score_card\\food_mapping_categories.sql", "original_file_path": "models\\food\\marts\\score_card\\food_mapping_categories.sql", "unique_id": "model.sales_group.food_mapping_categories", "fqn": ["sales_group", "food", "marts", "score_card", "food_mapping_categories"], "alias": "mapping_categories", "checksum": {"name": "sha256", "checksum": "6e259490822da874936a1297459b8b37c0747465c4a36988d3d7ae128c0d16a0"}, "config": {"enabled": true, "alias": "mapping_categories", "schema": "marts_score_card", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\score_card\\_food_score_card__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_score_card", "alias": "mapping_categories", "ra3_node": true}, "created_at": 1692186447.044751, "relation_name": "\"food\".\"nghi_dev\".\"mapping_categories\"", "raw_code": "select\r\n    cat_code as category_code,\r\n    cat_name as category_name,\r\n    ph4_code as product_hierarchy_04_code\r\nfrom {{ ref(\"food_seed_scorecard_mapping_categories\") }}", "language": "sql", "refs": [{"name": "food_seed_scorecard_mapping_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.food_seed_scorecard_mapping_categories"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_mapping_costcenter_costcentergroup": {"database": "food", "schema": "nghi_dev", "name": "food_mapping_costcenter_costcentergroup", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\score_card\\food_mapping_costcenter_costcentergroup.sql", "original_file_path": "models\\food\\marts\\score_card\\food_mapping_costcenter_costcentergroup.sql", "unique_id": "model.sales_group.food_mapping_costcenter_costcentergroup", "fqn": ["sales_group", "food", "marts", "score_card", "food_mapping_costcenter_costcentergroup"], "alias": "food_mapping_costcenter_costcentergroup", "checksum": {"name": "sha256", "checksum": "f5e42be8d3fc06057ed9de6cce78ec6556643c1022cfa85f00df21f38b6ba9f7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\sales_group\\models\\food\\marts\\score_card\\food_mapping_costcenter_costcentergroup.sql", "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.8831935, "relation_name": "\"food\".\"nghi_dev\".\"food_mapping_costcenter_costcentergroup\"", "raw_code": "select \r\ncost_center as costcenter_code, \r\ncost_center_name as costcenter_name, \r\ncc_group as costcenter_group_code, \r\ncc_group_name as  costcenter_group_name\r\nfrom {{ ref(\"food_seed_scorecard_mapping_cost_center_ccgroup\") }}", "language": "sql", "refs": [{"name": "food_seed_scorecard_mapping_cost_center_ccgroup", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.food_seed_scorecard_mapping_cost_center_ccgroup"]}, "compiled_path": "target\\compiled\\sales_group\\models\\food\\marts\\score_card\\food_mapping_costcenter_costcentergroup.sql", "compiled": true, "compiled_code": "select \ncost_center as costcenter_code, \ncost_center_name as costcenter_name, \ncc_group as costcenter_group_code, \ncc_group_name as  costcenter_group_name\nfrom \"food\".\"nghi_dev\".\"food_seed_scorecard_mapping_cost_center_ccgroup\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_mapping_hierarchies_costelement": {"database": "food", "schema": "nghi_dev", "name": "food_mapping_hierarchies_costelement", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\score_card\\food_mapping_hierarchies_costelement.sql", "original_file_path": "models\\food\\marts\\score_card\\food_mapping_hierarchies_costelement.sql", "unique_id": "model.sales_group.food_mapping_hierarchies_costelement", "fqn": ["sales_group", "food", "marts", "score_card", "food_mapping_hierarchies_costelement"], "alias": "food_mapping_hierarchies_costelement", "checksum": {"name": "sha256", "checksum": "55a35f11fe0068a278f1783febf848f65885fe804cf67bc2e9af23cb07aca6e3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\sales_group\\models\\food\\marts\\score_card\\food_mapping_hierarchies_costelement.sql", "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.887882, "relation_name": "\"food\".\"nghi_dev\".\"food_mapping_hierarchies_costelement\"", "raw_code": "select\r\n    hier_cost_element_code,\r\n    hier_cost_element_name,\r\n    case\r\n        when cost_element is not null then right(cost_element, 10)\r\n    end as cost_element_code\r\nfrom {{ ref(\"food_seed_scorecard_hierarchies_costelement\") }}", "language": "sql", "refs": [{"name": "food_seed_scorecard_hierarchies_costelement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.food_seed_scorecard_hierarchies_costelement"]}, "compiled_path": "target\\compiled\\sales_group\\models\\food\\marts\\score_card\\food_mapping_hierarchies_costelement.sql", "compiled": true, "compiled_code": "select\n    hier_cost_element_code,\n    hier_cost_element_name,\n    case\n        when cost_element is not null then right(cost_element, 10)\n    end as cost_element_code\nfrom \"food\".\"nghi_dev\".\"food_seed_scorecard_hierarchies_costelement\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_mapping_pl_plgroup": {"database": "food", "schema": "nghi_dev", "name": "food_mapping_pl_plgroup", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\score_card\\food_mapping_pl_plgroup.sql", "original_file_path": "models\\food\\marts\\score_card\\food_mapping_pl_plgroup.sql", "unique_id": "model.sales_group.food_mapping_pl_plgroup", "fqn": ["sales_group", "food", "marts", "score_card", "food_mapping_pl_plgroup"], "alias": "food_mapping_pl_plgroup", "checksum": {"name": "sha256", "checksum": "757fac53061d441dd1f40943de46b048f87d4d6392557290601ecb7be4da9abb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\sales_group\\models\\food\\marts\\score_card\\food_mapping_pl_plgroup.sql", "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.8908823, "relation_name": "\"food\".\"nghi_dev\".\"food_mapping_pl_plgroup\"", "raw_code": "select \r\n'00' || gl_account as \"G/L Account\",\r\n name_gl_account, \r\n pl_code, \r\n pl_name, \r\n pl_group_code, \r\n pl_group_name\r\nfrom {{ ref(\"food_seed_scorecard_mapping_pl_and_plgroup\") }} pl", "language": "sql", "refs": [{"name": "food_seed_scorecard_mapping_pl_and_plgroup", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.food_seed_scorecard_mapping_pl_and_plgroup"]}, "compiled_path": "target\\compiled\\sales_group\\models\\food\\marts\\score_card\\food_mapping_pl_plgroup.sql", "compiled": true, "compiled_code": "select \n'00' || gl_account as \"G/L Account\",\n name_gl_account, \n pl_code, \n pl_name, \n pl_group_code, \n pl_group_name\nfrom \"food\".\"nghi_dev\".\"food_seed_scorecard_mapping_pl_and_plgroup\" pl", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_mapping_subcategories": {"database": "food", "schema": "nghi_dev", "name": "food_mapping_subcategories", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\score_card\\food_mapping_subcategories.sql", "original_file_path": "models\\food\\marts\\score_card\\food_mapping_subcategories.sql", "unique_id": "model.sales_group.food_mapping_subcategories", "fqn": ["sales_group", "food", "marts", "score_card", "food_mapping_subcategories"], "alias": "mapping_subcategories", "checksum": {"name": "sha256", "checksum": "68c34ff1c7bda7f236930205bcb752459fb45193745fea664f61080405ab58d6"}, "config": {"enabled": true, "alias": "mapping_subcategories", "schema": "marts_score_card", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\score_card\\_food_score_card__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_score_card", "alias": "mapping_subcategories", "ra3_node": true}, "created_at": 1692186447.046756, "relation_name": "\"food\".\"nghi_dev\".\"mapping_subcategories\"", "raw_code": "select\r\n    subcat1_code as subcategory_1_code,\r\n    subcat1_name as subcategory_1_name,\r\n    subcat2_code as subcategory_2_code,\r\n    subcat2_name as subcategory_2_name,\r\n    ph5_code as product_hierarchy_05_code\r\nfrom {{ ref(\"food_seed_scorecard_mapping_subcategories\") }}", "language": "sql", "refs": [{"name": "food_seed_scorecard_mapping_subcategories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.food_seed_scorecard_mapping_subcategories"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_scorecard_kpi_budget": {"database": "food", "schema": "nghi_dev", "name": "food_scorecard_kpi_budget", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\score_card\\food_scorecard_kpi_budget.sql", "original_file_path": "models\\food\\marts\\score_card\\food_scorecard_kpi_budget.sql", "unique_id": "model.sales_group.food_scorecard_kpi_budget", "fqn": ["sales_group", "food", "marts", "score_card", "food_scorecard_kpi_budget"], "alias": "kpi_budget", "checksum": {"name": "sha256", "checksum": "92e045f9f6d286e67a8e77470fe861129bf88132b92eb3def15d9cb9ec1a99c2"}, "config": {"enabled": true, "alias": "kpi_budget", "schema": "marts_score_card", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\score_card\\_food_score_card__models.yml", "build_path": "target\\run\\sales_group\\models\\food\\marts\\score_card\\food_scorecard_kpi_budget.sql", "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_score_card", "alias": "kpi_budget", "ra3_node": true}, "created_at": 1692186447.062091, "relation_name": "\"food\".\"nghi_dev\".\"kpi_budget\"", "raw_code": "select\r\n    cat_code,\r\n    cat_name,\r\n    subcat1_code as subcat_1_code,\r\n    subcat1_name as subcat_1_name,\r\n    '' as subcat_2_code,\r\n    '' as subcat_2_name,\r\n    '' as \"G/L Account\",\r\n    '' as expense_group_code,\r\n    '' as expense_group_name,\r\n    '' as company_code,\r\n    case \r\n    when month is not null \r\n    then left(month,4) || right(month,2) || '01'\r\n    end as posting_date,\r\n    '' as channel_code,\r\n    '' as channel_name,\r\n    '' as matnr,\r\n    '20' as value_type,\r\n    month as fiscyearper,\r\n        kpi_code,\r\n        kpi_name,\r\n    '' as pl_code, \r\n    '' as pl_name, \r\n    '' as pl_group_code, \r\n    '' as pl_group_name,\r\n    '' as costcenter_code,\r\n    '' as costcenter_name,\r\n    '' as costcenter_full_name,\r\n    '' as costcenter_group_code,\r\n    '' as costcenter_group_name,\r\n    0 as revenue,\r\n    0 as quantity,\r\n    0 as \"revenue(D/KG)\",\r\n    0 as inter_profit,\r\n    0 as cogs,\r\n    0 as \"cogs(+)\",\r\n    0 as \"gross contribution (3) =  (1) - (+)\",\r\n    0 as \"manufacturing cost (4)\",\r\n    0 as \"gross margin (5) = (3) - (4)\",\r\n    0 as \"mkt & commercial costs (6)\",\r\n    0 as \"administrative costs (7)\",\r\n    0 as \"chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\r\n    0 as \"thu nh\u1eadp t\u00e0i ch\u00ednh(9)\",\r\n    amount::numeric(38,2) as budget\r\nfrom {{ ref(\"food_seed_scorecard_budget_2023\") }}", "language": "sql", "refs": [{"name": "food_seed_scorecard_budget_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.food_seed_scorecard_budget_2023"]}, "compiled_path": "target\\compiled\\sales_group\\models\\food\\marts\\score_card\\food_scorecard_kpi_budget.sql", "compiled": true, "compiled_code": "select\n    cat_code,\n    cat_name,\n    subcat1_code as subcat_1_code,\n    subcat1_name as subcat_1_name,\n    '' as subcat_2_code,\n    '' as subcat_2_name,\n    '' as \"G/L Account\",\n    '' as expense_group_code,\n    '' as expense_group_name,\n    '' as company_code,\n    case \n    when month is not null \n    then left(month,4) || right(month,2) || '01'\n    end as posting_date,\n    '' as channel_code,\n    '' as channel_name,\n    '' as matnr,\n    '20' as value_type,\n    month as fiscyearper,\n        kpi_code,\n        kpi_name,\n    '' as pl_code, \n    '' as pl_name, \n    '' as pl_group_code, \n    '' as pl_group_name,\n    '' as costcenter_code,\n    '' as costcenter_name,\n    '' as costcenter_full_name,\n    '' as costcenter_group_code,\n    '' as costcenter_group_name,\n    0 as revenue,\n    0 as quantity,\n    0 as \"revenue(D/KG)\",\n    0 as inter_profit,\n    0 as cogs,\n    0 as \"cogs(+)\",\n    0 as \"gross contribution (3) =  (1) - (+)\",\n    0 as \"manufacturing cost (4)\",\n    0 as \"gross margin (5) = (3) - (4)\",\n    0 as \"mkt & commercial costs (6)\",\n    0 as \"administrative costs (7)\",\n    0 as \"chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\n    0 as \"thu nh\u1eadp t\u00e0i ch\u00ednh(9)\",\n    amount::numeric(38,2) as budget\nfrom \"food\".\"nghi_dev\".\"food_seed_scorecard_budget_2023\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_excel_sales__budget_of_accounting_department": {"database": "food", "schema": "nghi_dev", "name": "food_stg_excel_sales__budget_of_accounting_department", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\excel\\sales\\food_stg_excel_sales__budget_of_accounting_department.sql", "original_file_path": "models\\food\\staging\\excel\\sales\\food_stg_excel_sales__budget_of_accounting_department.sql", "unique_id": "model.sales_group.food_stg_excel_sales__budget_of_accounting_department", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_stg_excel_sales__budget_of_accounting_department"], "alias": "food_stg_excel_sales__budget_of_accounting_department", "checksum": {"name": "sha256", "checksum": "8eb6bdf41e786a38c36e267da072232be0d99c732a23b2fa095685512010d77b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.8988833, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_excel_sales__budget_of_accounting_department\"", "raw_code": "select date,category,bud_revenue,bud_volume from {{ source(\"food_excel_sales\",\"md_budget_bpkt\") }}", "language": "sql", "refs": [], "sources": [["food_excel_sales", "md_budget_bpkt"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_excel_sales.md_budget_bpkt"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_excel_sales__lbc_sales_groups": {"database": "food", "schema": "nghi_dev", "name": "food_stg_excel_sales__lbc_sales_groups", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\excel\\sales\\food_stg_excel_sales__lbc_sales_groups.sql", "original_file_path": "models\\food\\staging\\excel\\sales\\food_stg_excel_sales__lbc_sales_groups.sql", "unique_id": "model.sales_group.food_stg_excel_sales__lbc_sales_groups", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_stg_excel_sales__lbc_sales_groups"], "alias": "food_stg_excel_sales__lbc_sales_groups", "checksum": {"name": "sha256", "checksum": "d84cc0d5e3af045c315cc3be9d84360f69d8b808e4fd7f7c3d4107ec5fc45316"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.902921, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_excel_sales__lbc_sales_groups\"", "raw_code": "select\r\n    trim(source) as source,\r\n    trim(salesgroup) as from_sales_group_name,\r\n    trim(codesalesgroup) as to_sales_group_code\r\n\r\nfrom {{ source(\"food_excel_sales\", \"md_sales_groups\") }}\r\nwhere source is not null", "language": "sql", "refs": [], "sources": [["food_excel_sales", "md_sales_groups"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_excel_sales.md_sales_groups"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_excel_sales__master_data_customer_lbc": {"database": "food", "schema": "nghi_dev", "name": "food_stg_excel_sales__master_data_customer_lbc", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\excel\\sales\\food_stg_excel_sales__master_data_customer_lbc.sql", "original_file_path": "models\\food\\staging\\excel\\sales\\food_stg_excel_sales__master_data_customer_lbc.sql", "unique_id": "model.sales_group.food_stg_excel_sales__master_data_customer_lbc", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_stg_excel_sales__master_data_customer_lbc"], "alias": "food_stg_excel_sales__master_data_customer_lbc", "checksum": {"name": "sha256", "checksum": "fb66f03be710488299b294d6da19a36ac66c5072db3a52b37576116ee591de44"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.9059217, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_excel_sales__master_data_customer_lbc\"", "raw_code": "-- deprecated\r\nwith\r\n    unioned as (\r\n        {{\r\n            dbt_utils.union_relations(\r\n                relations=[\r\n                    ref(\"base_excel_sales__master_data_customer_lbc\"),\r\n                    ref(\"food_seed_sales_mapping_lbc_customers_2023_03_27\"),\r\n                ],\r\n                include=[\r\n                    \"customer group\",\r\n                    \"m\u00e3 kh\u00e1ch h\u00e0ng\",\r\n                    \"t\u00ean kh\u00e1ch h\u00e0ng\",\r\n                    \"customer group 1\",\r\n                    \"customer group 2\",\r\n                    \"channel\",\r\n                    \"sale group\",\r\n                    \"ship_to\",\r\n                    \"ship_to_name\",\r\n                ],\r\n            )\r\n        }}\r\n    ),\r\n\r\n    deduped as (\r\n        {# {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"unioned\",\r\n                partition_by='\"m\u00e3 kh\u00e1ch h\u00e0ng\"',\r\n                order_by=\"ship_to nulls last\",\r\n            )\r\n        }} #}\r\n        select \r\n            *,\r\n            row_number() over (partition by \"m\u00e3 kh\u00e1ch h\u00e0ng\" order by ship_to nulls last) as dedup\r\n        from unioned\r\n    )\r\n\r\nselect *\r\nfrom deduped\r\nwhere dedup = 1", "language": "sql", "refs": [{"name": "base_excel_sales__master_data_customer_lbc", "package": null, "version": null}, {"name": "food_seed_sales_mapping_lbc_customers_2023_03_27", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"], "nodes": ["model.sales_group.base_excel_sales__master_data_customer_lbc", "seed.sales_group.food_seed_sales_mapping_lbc_customers_2023_03_27"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_excel_sales__md_channels": {"database": "food", "schema": "nghi_dev", "name": "food_stg_excel_sales__md_channels", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\excel\\sales\\food_stg_excel_sales__md_channels.sql", "original_file_path": "models\\food\\staging\\excel\\sales\\food_stg_excel_sales__md_channels.sql", "unique_id": "model.sales_group.food_stg_excel_sales__md_channels", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_stg_excel_sales__md_channels"], "alias": "food_stg_excel_sales__md_channels", "checksum": {"name": "sha256", "checksum": "b4392a2307c54cffddfa926ee09e0795080dcb30de308a949eea6118121af0ad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.9276257, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_excel_sales__md_channels\"", "raw_code": "select \r\n    trim(source) as source, \r\n    trim(org_code) as from_code,\r\n    trim(code) as to_code\r\nfrom {{ source(\"food_excel_sales\", \"md_channels\") }}\r\nwhere source is not null", "language": "sql", "refs": [], "sources": [["food_excel_sales", "md_channels"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_excel_sales.md_channels"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_excel_sales__md_customer_groups": {"database": "food", "schema": "nghi_dev", "name": "food_stg_excel_sales__md_customer_groups", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\excel\\sales\\food_stg_excel_sales__md_customer_groups.sql", "original_file_path": "models\\food\\staging\\excel\\sales\\food_stg_excel_sales__md_customer_groups.sql", "unique_id": "model.sales_group.food_stg_excel_sales__md_customer_groups", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_stg_excel_sales__md_customer_groups"], "alias": "food_stg_excel_sales__md_customer_groups", "checksum": {"name": "sha256", "checksum": "5e986f9391b92605c49b15c35320433c97a20e2bd08d3af2c7038fef6ce0c71f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.930633, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_excel_sales__md_customer_groups\"", "raw_code": "select\r\n    trim(source) as source,\r\n    trim(\"customer group\") as from_customer_group_name,\r\n    trim(\"code customer group\") as to_customer_group_code,\r\n    trim(\"customer group 1\") as from_customer_group_1_name,\r\n    trim(\"code customer group 1\") as to_customer_group_1_code,\r\n    trim(\"customer group 2 \") as from_customer_group_2_name,\r\n    trim(\"code customer group 2\") as to_customer_group_2_code\r\n    \r\nfrom {{ source(\"food_excel_sales\", \"md_customer_groups\") }}\r\nwhere source is not null", "language": "sql", "refs": [], "sources": [["food_excel_sales", "md_customer_groups"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_excel_sales.md_customer_groups"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_excel_sales__md_products": {"database": "food", "schema": "nghi_dev", "name": "food_stg_excel_sales__md_products", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\excel\\sales\\food_stg_excel_sales__md_products.sql", "original_file_path": "models\\food\\staging\\excel\\sales\\food_stg_excel_sales__md_products.sql", "unique_id": "model.sales_group.food_stg_excel_sales__md_products", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_stg_excel_sales__md_products"], "alias": "food_stg_excel_sales__md_products", "checksum": {"name": "sha256", "checksum": "1059cd26f948d5b9e92733cba6c860071db7d28191fcb751e68b07351235f392"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.932975, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_excel_sales__md_products\"", "raw_code": "with renamed as (\r\n    select \r\n        invtid as code,\r\n        descr as descr,\r\n        \"type code\" as type_code,\r\n        \"net weight\" as net_weight,\r\n        unit as unit,\r\n        level1 as product_hierarchy_l1_name,\r\n        level2 as product_hierarchy_l2_name,\r\n        level3 as product_hierarchy_l3_name,\r\n        level4 as product_hierarchy_l4_name,\r\n        level5 as product_hierarchy_l5_name,\r\n        level6 as product_hierarchy_l6_name,\r\n        level7 as product_hierarchy_l7_name,\r\n        \"level 8\" as product_hierarchy_l8_name\r\n\r\n    from {{ source(\"food_excel_sales\", \"md_products\") }}\r\n\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["food_excel_sales", "md_products"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_excel_sales.md_products"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_excel_sales__md_products_conversion_rate_lbc": {"database": "food", "schema": "nghi_dev", "name": "food_stg_excel_sales__md_products_conversion_rate_lbc", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\excel\\sales\\food_stg_excel_sales__md_products_conversion_rate_lbc.sql", "original_file_path": "models\\food\\staging\\excel\\sales\\food_stg_excel_sales__md_products_conversion_rate_lbc.sql", "unique_id": "model.sales_group.food_stg_excel_sales__md_products_conversion_rate_lbc", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_stg_excel_sales__md_products_conversion_rate_lbc"], "alias": "food_stg_excel_sales__md_products_conversion_rate_lbc", "checksum": {"name": "sha256", "checksum": "b7937a97c17035623e4cb0d8ca56bd489e3b31d800f3da774fbd0326c120deb4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.9377363, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_excel_sales__md_products_conversion_rate_lbc\"", "raw_code": "select \r\n    trim(code) as code,\r\n    quy_doi as conversion_rate,\r\n    trim(unit) as unit\r\nfrom {{ source(\"food_excel_sales\",\"md_products_conversion_rate_lbc\") }}", "language": "sql", "refs": [], "sources": [["food_excel_sales", "md_products_conversion_rate_lbc"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_excel_sales.md_products_conversion_rate_lbc"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_excel_sales__target_by_channel": {"database": "food", "schema": "nghi_dev", "name": "food_stg_excel_sales__target_by_channel", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\excel\\sales\\food_stg_excel_sales__target_by_channel.sql", "original_file_path": "models\\food\\staging\\excel\\sales\\food_stg_excel_sales__target_by_channel.sql", "unique_id": "model.sales_group.food_stg_excel_sales__target_by_channel", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_stg_excel_sales__target_by_channel"], "alias": "food_stg_excel_sales__target_by_channel", "checksum": {"name": "sha256", "checksum": "0f2a569472ce7c2746eb090d0cc193ed62b657b72d680677494e1246e515df74"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.9397423, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_excel_sales__target_by_channel\"", "raw_code": "select\r\n    channelcode::varchar as channel_code,\r\n    channel::varchar as channel,\r\n    month::date,\r\n    nvl(budget, 0)::double precision as budget,\r\n    nvl(kpi, 0)::double precision as kpi,\r\n    nvl(forecast, 0)::double precision as forecast\r\nfrom {{ source(\"food_excel_sales\", \"sales_target_by_channels\") }}", "language": "sql", "refs": [], "sources": [["food_excel_sales", "sales_target_by_channels"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_excel_sales.sales_target_by_channels"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_excel_sales__target_by_channel_by_product": {"database": "food", "schema": "nghi_dev", "name": "food_stg_excel_sales__target_by_channel_by_product", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\excel\\sales\\food_stg_excel_sales__target_by_channel_by_product.sql", "original_file_path": "models\\food\\staging\\excel\\sales\\food_stg_excel_sales__target_by_channel_by_product.sql", "unique_id": "model.sales_group.food_stg_excel_sales__target_by_channel_by_product", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_stg_excel_sales__target_by_channel_by_product"], "alias": "food_stg_excel_sales__target_by_channel_by_product", "checksum": {"name": "sha256", "checksum": "eaf3c4feaf2aace90dccb0c558fb159fb1c96fd58421950460d09c63bde12618"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.9427407, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_excel_sales__target_by_channel_by_product\"", "raw_code": "select\r\n    \"ChannelCode\"::varchar as channel_code,\r\n    \"Channel\"::varchar as channel,\r\n    \"Group category\" as group_category,\r\n    \"Storage\"::varchar as storage,\r\n    \"Category\"::varchar as category,\r\n    \"Class\"::varchar as class,\r\n    \"Product group\"::varchar as product_group,\r\n    \"Subcat\"::varchar as subcategory,\r\n    \"Month\"::date as month,\r\n    nvl(\"Budget\", 0)::double precision as budget,\r\n    nvl(\"KPI\", 0)::double precision as kpi,\r\n    nvl(\"Forecast\", 0)::double precision as forecast\r\nfrom {{ source(\"food_excel_sales\", \"sales_target_by_channels_products\") }}", "language": "sql", "refs": [], "sources": [["food_excel_sales", "sales_target_by_channels_products"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_excel_sales.sales_target_by_channels_products"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.base_excel_sales__master_data_customer_lbc": {"database": "food", "schema": "nghi_dev", "name": "base_excel_sales__master_data_customer_lbc", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\excel\\sales\\base\\base_excel_sales__master_data_customer_lbc.sql", "original_file_path": "models\\food\\staging\\excel\\sales\\base\\base_excel_sales__master_data_customer_lbc.sql", "unique_id": "model.sales_group.base_excel_sales__master_data_customer_lbc", "fqn": ["sales_group", "food", "staging", "excel", "sales", "base", "base_excel_sales__master_data_customer_lbc"], "alias": "base_excel_sales__master_data_customer_lbc", "checksum": {"name": "sha256", "checksum": "5440ca3230216a9a70f70089d4805a4551bb0242f1456ec0e52996de28ec1223"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.9457426, "relation_name": "\"food\".\"nghi_dev\".\"base_excel_sales__master_data_customer_lbc\"", "raw_code": "select \r\n    *\r\nfrom {{ source(\"food_excel_sales\", \"master_data_customer_lbc\") }}", "language": "sql", "refs": [], "sources": [["food_excel_sales", "master_data_customer_lbc"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_excel_sales.master_data_customer_lbc"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_excel_misa_lbc_tb_account_mapping": {"database": "food", "schema": "nghi_dev", "name": "food_stg_excel_misa_lbc_tb_account_mapping", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\misa\\food_stg_excel_misa_lbc_tb_account_mapping.sql", "original_file_path": "models\\food\\staging\\misa\\food_stg_excel_misa_lbc_tb_account_mapping.sql", "unique_id": "model.sales_group.food_stg_excel_misa_lbc_tb_account_mapping", "fqn": ["sales_group", "food", "staging", "misa", "food_stg_excel_misa_lbc_tb_account_mapping"], "alias": "food_stg_excel_misa_lbc_tb_account_mapping", "checksum": {"name": "sha256", "checksum": "1c347834756abddacd80953aaaac65e2da90d2eae79bf7e1882feade16eb3e6f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.9488575, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_excel_misa_lbc_tb_account_mapping\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect\r\n    \"account misa\"::text as racct_misa,\r\n    \"company code\"::text as company_code,\r\n    left(\"sap account\",8)::text as racct_sap\r\nfrom {{ source(\"food_excel_misa_lbc\", \"tb_account_mapping\") }}", "language": "sql", "refs": [], "sources": [["food_excel_misa_lbc", "tb_account_mapping"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_excel_misa_lbc.tb_account_mapping"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_excel_misa_lbc_tp_lbc_3200_v2": {"database": "food", "schema": "nghi_dev", "name": "food_stg_excel_misa_lbc_tp_lbc_3200_v2", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\misa\\food_stg_excel_misa_lbc_tp_lbc_3200_v2.sql", "original_file_path": "models\\food\\staging\\misa\\food_stg_excel_misa_lbc_tp_lbc_3200_v2.sql", "unique_id": "model.sales_group.food_stg_excel_misa_lbc_tp_lbc_3200_v2", "fqn": ["sales_group", "food", "staging", "misa", "food_stg_excel_misa_lbc_tp_lbc_3200_v2"], "alias": "food_stg_excel_misa_lbc_tp_lbc_3200_v2", "checksum": {"name": "sha256", "checksum": "5c0237bc06efc25490439f4d4877bce3199f279b662ea53592e16b51fe38d97f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.9519634, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_excel_misa_lbc_tp_lbc_3200_v2\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"food_excel_misa_lbc\", \"tp_lbc_3200_v2\") }}", "language": "sql", "refs": [], "sources": [["food_excel_misa_lbc", "tp_lbc_3200_v2"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_excel_misa_lbc.tp_lbc_3200_v2"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_misa__lbc_generalledger": {"database": "food", "schema": "nghi_dev", "name": "food_stg_misa__lbc_generalledger", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\misa\\food_stg_misa__lbc_generalledger.sql", "original_file_path": "models\\food\\staging\\misa\\food_stg_misa__lbc_generalledger.sql", "unique_id": "model.sales_group.food_stg_misa__lbc_generalledger", "fqn": ["sales_group", "food", "staging", "misa", "food_stg_misa__lbc_generalledger"], "alias": "food_stg_misa__lbc_generalledger", "checksum": {"name": "sha256", "checksum": "0e537f0c65a3dbaf64dd332954ca9451d5bb4304b23004e516f085db8db554a6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.9560313, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_misa__lbc_generalledger\"", "raw_code": "with misa_2022 as (\r\n\r\n    select \r\n        *\r\n    from {{ source(\"food_misa_22\", \"generalledger\") }}\r\n    where posteddate < '2023-01-01'\r\n\r\n),\r\n\r\nmisa_2023 as (\r\n\r\n    select \r\n        *\r\n    from {{ source(\"food_misa\", \"generalledger\") }}\r\n    where posteddate >= '2023-01-01'\r\n\r\n)\r\n\r\nselect * from misa_2022\r\nunion all\r\nselect * from misa_2023", "language": "sql", "refs": [], "sources": [["food_misa", "generalledger"], ["food_misa_22", "generalledger"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_misa.generalledger", "source.sales_group.food_misa_22.generalledger"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__fi_0fi_gl_12": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__fi_0fi_gl_12", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__fi_0fi_gl_12.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__fi_0fi_gl_12.sql", "unique_id": "model.sales_group.food_stg_sap_s4__fi_0fi_gl_12", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__fi_0fi_gl_12"], "alias": "food_stg_sap_s4__fi_0fi_gl_12", "checksum": {"name": "sha256", "checksum": "e35aaa0564f79aab66df10792d419fb67510412bf822b2ae4dc870b6a42779a4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186445.973234, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__fi_0fi_gl_12\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"food_sap_s4\", \"fi_0fi_gl_12\") }}", "language": "sql", "refs": [], "sources": [["food_sap_s4", "fi_0fi_gl_12"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_sap_s4.fi_0fi_gl_12"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0accnt_grp_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0accnt_grp_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0accnt_grp_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0accnt_grp_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0accnt_grp_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0accnt_grp_text"], "alias": "food_stg_sap_s4__md_0accnt_grp_text", "checksum": {"name": "sha256", "checksum": "00a4a916be8bd9f14e48e3928118e211c5f3de851187e7ae810b341f38722555"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.976158, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0accnt_grp_text\"", "raw_code": "with\r\n    selected_fields as (\r\n        select ktokd as code, txt30 as name\r\n        from {{ source(\"food_sap_s4\", \"md_0accnt_grp_text\") }}\r\n        where spras = 'E'\r\n    ),\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0accnt_grp_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0accnt_grp_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0bill_type_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0bill_type_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0bill_type_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0bill_type_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0bill_type_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0bill_type_text"], "alias": "food_stg_sap_s4__md_0bill_type_text", "checksum": {"name": "sha256", "checksum": "66cd5c8206cc8d67d1221f69e45649a05d4bdc12de23b2178e620bbcea9ce440"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.9831598, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0bill_type_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith selected_fields as (\r\n    select \r\n        fkart as code,\r\n        vtext as name\r\n    from {{ source(\"food_sap_s4\", \"md_0bill_type_text\") }}\r\n    where spras = 'E'\r\n),\r\n\r\ndeduped as (\r\n    {{\r\n        dbt_utils.deduplicate(\r\n            relation=\"selected_fields\",\r\n            partition_by=\"code\",\r\n            order_by=\"name asc\",\r\n        )\r\n    }}\r\n)\r\n\r\nselect *\r\nfrom deduped", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0bill_type_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0bill_type_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0comp_code_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0comp_code_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0comp_code_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0comp_code_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0comp_code_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0comp_code_text"], "alias": "food_stg_sap_s4__md_0comp_code_text", "checksum": {"name": "sha256", "checksum": "ee7577888596d29c2de598cb6f616209503c3ff1a6901cd7ad6beff1926ef316"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186445.9899566, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0comp_code_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith\r\n    selected_fields as (\r\n        select bukrs as code, txtmd as name\r\n        from {{ source(\"food_sap_s4\", \"md_0comp_code_text\") }}\r\n        where langu = 'E'\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0comp_code_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0comp_code_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0costcenter_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0costcenter_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0costcenter_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0costcenter_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0costcenter_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0costcenter_text"], "alias": "food_stg_sap_s4__md_0costcenter_text", "checksum": {"name": "sha256", "checksum": "84bc4976cc6d19a9499e11d9b556920c91be4938e8cf3903858e50466afb3164"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\sales_group\\models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0costcenter_text.sql", "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.0280159, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0costcenter_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith\r\n    selected_fields as (\r\n        select kostl as code, txtsh as short_name, txtmd as medium_name\r\n        from {{ source(\"food_sap_s4\", \"md_0costcenter_text\") }}\r\n        where langu = 'E' and kokrs = '1000'\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"code asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0costcenter_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0costcenter_text"]}, "compiled_path": "target\\compiled\\sales_group\\models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0costcenter_text.sql", "compiled": true, "compiled_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\n-- row), ...\nwith\n    selected_fields as (\n        select kostl as code, txtsh as short_name, txtmd as medium_name\n        from \"food\".\"stg_sap_s4\".\"md_0costcenter_text\"\n        where langu = 'E' and kokrs = '1000'\n    ),\n\n    deduped as (\n        with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by code\n                order by code asc\n            ) as rn\n        from selected_fields as _inner\n    )\n\n    select\n        distinct data.*\n    from selected_fields as data\n    \n    natural join row_numbered\n    where row_numbered.rn = 1\n    )\nselect *\nfrom deduped\norder by code", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0costelmnt_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0costelmnt_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0costelmnt_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0costelmnt_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0costelmnt_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0costelmnt_text"], "alias": "food_stg_sap_s4__md_0costelmnt_text", "checksum": {"name": "sha256", "checksum": "736c8e419fd52d8469d0a745b94e50ce94febb70d48504a7b50984ab31a07015"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.0342917, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0costelmnt_text\"", "raw_code": "with\r\n    selected_fields as (\r\n        select kstar as code, txtsh as short_name, txtmd as full_name\r\n        from {{ source(\"food_sap_s4\", \"md_0costelmnt_text\") }}\r\n        where langu = 'E' and kokrs = '1000'\r\n    ),\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"short_name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0costelmnt_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0costelmnt_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0customer_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0customer_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0customer_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0customer_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0customer_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0customer_text"], "alias": "food_stg_sap_s4__md_0customer_text", "checksum": {"name": "sha256", "checksum": "cae7cf205299d221a0cd373775baeaf606c3e7cd922f94d6eb80982597dec668"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.0403118, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0customer_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith\r\n    selected_fields as (\r\n        select kunnr as code, txtmd as name\r\n        from {{ source(\"food_sap_s4\", \"md_0customer_text\") }}\r\n    ),\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0customer_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0customer_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0cust_group_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0cust_group_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0cust_group_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0cust_group_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0cust_group_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0cust_group_text"], "alias": "food_stg_sap_s4__md_0cust_group_text", "checksum": {"name": "sha256", "checksum": "c591d82c612c7298994a5a2a13920e4db4397943a10552fd6f5606ca61111448"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.046426, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0cust_group_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith\r\n    selected_fields as (\r\n        select kdgrp as code, ktext as name\r\n        from {{ source(\"food_sap_s4\", \"md_0cust_group_text\") }}\r\n        where spras = 'E'\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0cust_group_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0cust_group_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0cust_grp1_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0cust_grp1_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0cust_grp1_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0cust_grp1_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0cust_grp1_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0cust_grp1_text"], "alias": "food_stg_sap_s4__md_0cust_grp1_text", "checksum": {"name": "sha256", "checksum": "d3a436d17addd904c237f96a50403aeec5cebe684624e2b211ecb3bd386e1b99"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.053507, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0cust_grp1_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith\r\n    selected_fields as (\r\n        select kvgr1 as code, bezei as name\r\n        from {{ source(\"food_sap_s4\", \"md_0cust_grp1_text\") }}\r\n        where spras = 'E'\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0cust_grp1_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0cust_grp1_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0cust_grp2_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0cust_grp2_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0cust_grp2_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0cust_grp2_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0cust_grp2_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0cust_grp2_text"], "alias": "food_stg_sap_s4__md_0cust_grp2_text", "checksum": {"name": "sha256", "checksum": "14813a1098279b72b6059dd709146b1fc548aaa48ca14e2f4eb7365c1bfc19cd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.0616598, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0cust_grp2_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith\r\n    selected_fields as (\r\n        select kvgr2 as code, bezei as name\r\n        from {{ source(\"food_sap_s4\", \"md_0cust_grp2_text\") }}\r\n        where spras = 'E'\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0cust_grp2_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0cust_grp2_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0distr_chan_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0distr_chan_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0distr_chan_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0distr_chan_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0distr_chan_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0distr_chan_text"], "alias": "food_stg_sap_s4__md_0distr_chan_text", "checksum": {"name": "sha256", "checksum": "faea5c5a215b6151fdf38ae12f8bd0a014f0d9dc143bb249506158e828172aec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\sales_group\\models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0distr_chan_text.sql", "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.067587, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0distr_chan_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith\r\n    selected_fields as (\r\n        select vtweg as code, vtext as name\r\n        from {{ source(\"food_sap_s4\", \"md_0distr_chan_text\") }}\r\n        where spras = 'E'\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0distr_chan_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0distr_chan_text"]}, "compiled_path": "target\\compiled\\sales_group\\models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0distr_chan_text.sql", "compiled": true, "compiled_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\n-- row), ...\nwith\n    selected_fields as (\n        select vtweg as code, vtext as name\n        from \"food\".\"stg_sap_s4\".\"md_0distr_chan_text\"\n        where spras = 'E'\n    ),\n\n    deduped as (\n        with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by code\n                order by name asc\n            ) as rn\n        from selected_fields as _inner\n    )\n\n    select\n        distinct data.*\n    from selected_fields as data\n    \n    natural join row_numbered\n    where row_numbered.rn = 1\n    )\nselect *\nfrom deduped\norder by code", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0material_attr": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0material_attr", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0material_attr.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0material_attr.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0material_attr", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0material_attr"], "alias": "food_stg_sap_s4__md_0material_attr", "checksum": {"name": "sha256", "checksum": "58885714668a3f8cdd987447f56e45de3739debfa5e567dcf0cf9e09e1609401"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.0747797, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0material_attr\"", "raw_code": "{{ \r\n    config(materialized=\"table\") \r\n}}\r\n\r\nwith selected_fields as (\r\n    \r\n    select\r\n        matnr as code,\r\n        case when left(matnr, 3) = '000' then matnr::int::text else matnr end as code_,\r\n        mtart as type_code,\r\n        meins as unit,\r\n        gewei as weight_unit,\r\n        brgew as gross_weight,\r\n        ntgew as net_weight,\r\n        case when len(prdha) >= 1 then left(prdha, 1) end as product_hierarchy_l1_code,\r\n        case when len(prdha) >= 2 then left(prdha, 2) end as product_hierarchy_l2_code,\r\n        case when len(prdha) >= 3 then left(prdha, 3) end as product_hierarchy_l3_code,\r\n        case when len(prdha) >= 5 then left(prdha, 5) end as product_hierarchy_l4_code,\r\n        case when len(prdha) >= 8 then left(prdha, 8) end as product_hierarchy_l5_code,\r\n        case when len(prdha) >= 12 then left(prdha, 12) end as product_hierarchy_l6_code,\r\n        case when len(prdha) >= 16 then left(prdha, 16) end as product_hierarchy_l7_code,\r\n        case when len(prdha) >= 18 then left(prdha, 18) end as product_hierarchy_l8_code,\r\n        row_number() over (partition by matnr order by matnr asc) as dedup\r\n\r\n    from {{ source(\"food_sap_s4\", \"md_0material_attr\") }}\r\n\r\n),\r\n\r\nidentify_latest as (\r\n\r\n    select \r\n        *,\r\n        max(dedup) over (partition by code) as row_latest\r\n\r\n    from selected_fields\r\n\r\n),\r\n-- deduped wrong\r\n{# deduped as (\r\n\r\n    {{\r\n        dbt_utils.deduplicate(\r\n            relation=\"selected_fields\",\r\n            partition_by=\"code\",\r\n            order_by=\"code asc\",\r\n        )\r\n    }}\r\n) #}\r\n-- Don't need order by\r\nfinal as (\r\n\r\n    select \r\n        *\r\n    from identify_latest\r\n    where dedup = row_latest\r\n    order by code\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0material_attr"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_sap_s4.md_0material_attr"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0material_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0material_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0material_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0material_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0material_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0material_text"], "alias": "food_stg_sap_s4__md_0material_text", "checksum": {"name": "sha256", "checksum": "00aa1c8355d194b6171ff906fee9f9c92deb6e37075384d9d80199851f2fba9d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.077807, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0material_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith\r\n    selected_fields as (\r\n        select matnr as code, txtmd as name\r\n        from {{ source(\"food_sap_s4\", \"md_0material_text\") }}\r\n        where spras = 'E'\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0material_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0material_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0matl_type_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0matl_type_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0matl_type_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0matl_type_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0matl_type_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0matl_type_text"], "alias": "food_stg_sap_s4__md_0matl_type_text", "checksum": {"name": "sha256", "checksum": "1a627f5586a21fd4fd04d86efb352607715d8e9299fcbdfc282035cd113b1131"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.0839434, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0matl_type_text\"", "raw_code": "with\r\n    selected_fields as (\r\n        select mtart as code, mtbez as name\r\n        from {{ source(\"food_sap_s4\", \"md_0matl_type_text\") }}\r\n        where spras = 'E'\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0matl_type_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0matl_type_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0ord_reason_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0ord_reason_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0ord_reason_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0ord_reason_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0ord_reason_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0ord_reason_text"], "alias": "food_stg_sap_s4__md_0ord_reason_text", "checksum": {"name": "sha256", "checksum": "1cda26b99e0432f6b4e32ef2f24378b7d2745f9a57178cc6db0665be866bc93b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.0910428, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0ord_reason_text\"", "raw_code": "with selected_fields as (\r\n\r\n    select\r\n        spras as language, \r\n        augru as reason_code,\r\n        bezei as name\r\n    from {{ source(\"food_sap_s4\", \"md_0ord_reason_text\") }}\r\n    where spras = 'E'\r\n\r\n),\r\n\r\ndeduped as (\r\n    {{\r\n        dbt_utils.deduplicate(\r\n            relation=\"selected_fields\",\r\n            partition_by=\"language, reason_code\",\r\n            order_by=\"name asc\",\r\n        )\r\n    }}\r\n)\r\n\r\nselect *\r\nfrom deduped", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0ord_reason_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0ord_reason_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0plant_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0plant_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0plant_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0plant_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0plant_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0plant_text"], "alias": "food_stg_sap_s4__md_0plant_text", "checksum": {"name": "sha256", "checksum": "e4dadf4a9d28376c27c855d184f3662710374221aa591031957d8c9653c47284"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.0970423, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0plant_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith\r\n    selected_fields as (\r\n        select werks as code, txtmd as name\r\n        from {{ source(\"food_sap_s4\", \"md_0plant_text\") }}\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0plant_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0plant_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0prod_hier_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0prod_hier_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0prod_hier_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0prod_hier_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0prod_hier_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0prod_hier_text"], "alias": "food_stg_sap_s4__md_0prod_hier_text", "checksum": {"name": "sha256", "checksum": "93192e097ae78e4f4d819196ba84103537971906fe9f52562bdfbc4273058209"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.1040142, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0prod_hier_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith\r\n    selected_fields as (\r\n        select prodh as code, vtext as name\r\n        from {{ source(\"food_sap_s4\", \"md_0prod_hier_text\") }}\r\n        where spras = 'E'\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0prod_hier_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0prod_hier_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0sales_dist_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0sales_dist_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0sales_dist_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0sales_dist_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0sales_dist_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0sales_dist_text"], "alias": "food_stg_sap_s4__md_0sales_dist_text", "checksum": {"name": "sha256", "checksum": "4551169c29aa03b407d7696c7ba3155843f8bcff7869e69224bcb162dc02e2d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.1100328, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0sales_dist_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith\r\n    selected_fields as (\r\n        select bzirk as code, bztxt as name\r\n        from {{ source(\"food_sap_s4\", \"md_0sales_dist_text\") }}\r\n        where spras = 'E'\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0sales_dist_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0sales_dist_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0sales_grp_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0sales_grp_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0sales_grp_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0sales_grp_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0sales_grp_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0sales_grp_text"], "alias": "food_stg_sap_s4__md_0sales_grp_text", "checksum": {"name": "sha256", "checksum": "3301d7653316f7af81fbacdfcd02b482d1b2e2017fee4b47978b27047dbca267"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.1160326, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0sales_grp_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith\r\n    selected_fields as (\r\n        select vkgrp as code, bezei as name\r\n        from {{ source(\"food_sap_s4\", \"md_0sales_grp_text\") }}\r\n        where spras = 'E'\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0sales_grp_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0sales_grp_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__md_0sales_off_text": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__md_0sales_off_text", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__md_0sales_off_text.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__md_0sales_off_text.sql", "unique_id": "model.sales_group.food_stg_sap_s4__md_0sales_off_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__md_0sales_off_text"], "alias": "food_stg_sap_s4__md_0sales_off_text", "checksum": {"name": "sha256", "checksum": "cb0ab0e027e6c99111f8d9fd4c7b46420db7c771bd6269e653d14d47797190d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.1237857, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0sales_off_text\"", "raw_code": "-- TODO: add dedup mechanism, ex. truncate before loading, or use macro (get lastest\r\n-- row), ...\r\nwith\r\n    selected_fields as (\r\n        select vkbur as code, bezei as name\r\n        from {{ source(\"food_sap_s4\", \"md_0sales_off_text\") }}\r\n        where spras = 'E'\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"selected_fields\",\r\n                partition_by=\"code\",\r\n                order_by=\"name asc\",\r\n            )\r\n        }}\r\n    )\r\nselect *\r\nfrom deduped\r\norder by code", "language": "sql", "refs": [], "sources": [["food_sap_s4", "md_0sales_off_text"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.md_0sales_off_text"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__mm_2lis_03_bf": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__mm_2lis_03_bf", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__mm_2lis_03_bf.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__mm_2lis_03_bf.sql", "unique_id": "model.sales_group.food_stg_sap_s4__mm_2lis_03_bf", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__mm_2lis_03_bf"], "alias": "food_stg_sap_s4__mm_2lis_03_bf", "checksum": {"name": "sha256", "checksum": "cca63da799d68ea104b8164e83d4148eb431a527bced19ce7ae7571c08f198e4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.1297858, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__mm_2lis_03_bf\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nwith\r\n    source as (select * from {{ source(\"food_sap_s4\", \"mm_2lis_03_bf\") }}),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"source\",\r\n                partition_by=\"mblnr, zeile, mjahr, bwcounter\",\r\n                order_by=\"mblnr desc\",\r\n            )\r\n        }}\r\n    )\r\n\r\nselect *\r\nfrom deduped", "language": "sql", "refs": [], "sources": [["food_sap_s4", "mm_2lis_03_bf"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.mm_2lis_03_bf"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__mm_2lis_03_um": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__mm_2lis_03_um", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__mm_2lis_03_um.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__mm_2lis_03_um.sql", "unique_id": "model.sales_group.food_stg_sap_s4__mm_2lis_03_um", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__mm_2lis_03_um"], "alias": "food_stg_sap_s4__mm_2lis_03_um", "checksum": {"name": "sha256", "checksum": "3c896a0fe1f5a8906277cc2a5c1296d8778b47ab3aa6c07f82dbcbd19f2109ce"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.1370268, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__mm_2lis_03_um\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nwith\r\n    source as (select * from {{ source(\"food_sap_s4\", \"mm_2lis_03_um\") }}),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"source\",\r\n                partition_by=\"budat, bukrs, matnr, bwart, werks, bwvorg, meins, lifnr, bwkey, belnr, bldat, sobkz, bklas, bwapplnm, bsttyp, bstaus\",\r\n                order_by=\"budat desc\",\r\n            )\r\n        }}\r\n    )\r\n\r\nselect *\r\nfrom deduped", "language": "sql", "refs": [], "sources": [["food_sap_s4", "mm_2lis_03_um"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.mm_2lis_03_um"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__sd_2lis_11_vaitm": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__sd_2lis_11_vaitm", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__sd_2lis_11_vaitm.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__sd_2lis_11_vaitm.sql", "unique_id": "model.sales_group.food_stg_sap_s4__sd_2lis_11_vaitm", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__sd_2lis_11_vaitm"], "alias": "food_stg_sap_s4__sd_2lis_11_vaitm", "checksum": {"name": "sha256", "checksum": "1809651e8c905ac985601e5288f622e8f802be2cccbe32c874ab6741c4372a77"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.1430159, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__sd_2lis_11_vaitm\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nwith\r\n    source as (select * from {{ source(\"food_sap_s4\", \"sd_2lis_11_vaitm\") }}),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"source\",\r\n                partition_by=\"vbeln, posnr, erdat\",\r\n                order_by=\"erdat desc\",\r\n            )\r\n        }}\r\n    )\r\n\r\nselect *\r\nfrom deduped", "language": "sql", "refs": [], "sources": [["food_sap_s4", "sd_2lis_11_vaitm"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.sd_2lis_11_vaitm"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__sd_2lis_13_vditm": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__sd_2lis_13_vditm", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__sd_2lis_13_vditm.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__sd_2lis_13_vditm.sql", "unique_id": "model.sales_group.food_stg_sap_s4__sd_2lis_13_vditm", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__sd_2lis_13_vditm"], "alias": "food_stg_sap_s4__sd_2lis_13_vditm", "checksum": {"name": "sha256", "checksum": "3c7afbc71a489b1b69a1bb85a26daa0e1aa5c726dde50622509399ce4e2c448b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.150347, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__sd_2lis_13_vditm\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nwith source as (\r\n\r\n    select * from {{ source(\"food_sap_s4\", \"sd_2lis_13_vditm\") }}\r\n\r\n),\r\n\r\ndeduped as (\r\n    {{\r\n        dbt_utils.deduplicate(\r\n            relation=\"source\",\r\n            partition_by=\"vbeln, posnr, fkdat\",\r\n            order_by=\"fkdat desc\",\r\n        )\r\n    }}\r\n)\r\n\r\nselect * from deduped", "language": "sql", "refs": [], "sources": [["food_sap_s4", "sd_2lis_13_vditm"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.sd_2lis_13_vditm"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__tbl_customer_sale_person": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__tbl_customer_sale_person", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__tbl_customer_sale_person.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__tbl_customer_sale_person.sql", "unique_id": "model.sales_group.food_stg_sap_s4__tbl_customer_sale_person", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__tbl_customer_sale_person"], "alias": "food_stg_sap_s4__tbl_customer_sale_person", "checksum": {"name": "sha256", "checksum": "2e417b37e2ebb985a92728123c6b4869aeb19b8428b04c99d5e26345b35a4c0d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.1578867, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__tbl_customer_sale_person\"", "raw_code": "with\r\n    source as (\r\n        select *\r\n        from {{ source(\"food_sap_s4\", \"tbl_customer_sale_person\") }}\r\n\r\n    ),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"source\",\r\n                partition_by=\"kunnr, vkorg, vtweg, spart, parvw, parza\",\r\n                order_by=\"kunnr desc\",\r\n            )\r\n        }}\r\n    )\r\n\r\nselect *\r\nfrom deduped", "language": "sql", "refs": [], "sources": [["food_sap_s4", "tbl_customer_sale_person"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.tbl_customer_sale_person"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__tbl_fcml_ccs_r_all_v": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__tbl_fcml_ccs_r_all_v", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__tbl_fcml_ccs_r_all_v.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__tbl_fcml_ccs_r_all_v.sql", "unique_id": "model.sales_group.food_stg_sap_s4__tbl_fcml_ccs_r_all_v", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__tbl_fcml_ccs_r_all_v"], "alias": "food_stg_sap_s4__tbl_fcml_ccs_r_all_v", "checksum": {"name": "sha256", "checksum": "63aa188703f893a925582d5286942f9e9c2b036d361cc27684a32c0e9d5a4467"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\sales_group\\models\\food\\staging\\sap_s4\\food_stg_sap_s4__tbl_fcml_ccs_r_all_v.sql", "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.1638858, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__tbl_fcml_ccs_r_all_v\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nwith\r\n    source as (select * from {{ source(\"food_sap_s4\", \"tbl_fcml_ccs_r_all_v\") }}),\r\n\r\n    deduped as (\r\n        {{\r\n            dbt_utils.deduplicate(\r\n                relation=\"source\",\r\n                partition_by=\"kalnr_mat, poper, bdatj, run_act, run_appl, categ, ptyp, psart, kalnr_pmat, bvalt, process, elesmhk, element, mlcct, curtp \",\r\n                order_by=\"kalnr_mat desc\",\r\n            )\r\n        }}\r\n    )\r\n\r\nselect *\r\nfrom deduped", "language": "sql", "refs": [], "sources": [["food_sap_s4", "tbl_fcml_ccs_r_all_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.tbl_fcml_ccs_r_all_v"]}, "compiled_path": "target\\compiled\\sales_group\\models\\food\\staging\\sap_s4\\food_stg_sap_s4__tbl_fcml_ccs_r_all_v.sql", "compiled": true, "compiled_code": "\n\nwith\n    source as (select * from \"food\".\"stg_sap_s4\".\"tbl_fcml_ccs_r_all_v\"),\n\n    deduped as (\n        with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by kalnr_mat, poper, bdatj, run_act, run_appl, categ, ptyp, psart, kalnr_pmat, bvalt, process, elesmhk, element, mlcct, curtp \n                order by kalnr_mat desc\n            ) as rn\n        from source as _inner\n    )\n\n    select\n        distinct data.*\n    from source as data\n    \n    natural join row_numbered\n    where row_numbered.rn = 1\n    )\n\nselect *\nfrom deduped", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__tbl_vbpa": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__tbl_vbpa", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__tbl_vbpa.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__tbl_vbpa.sql", "unique_id": "model.sales_group.food_stg_sap_s4__tbl_vbpa", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__tbl_vbpa"], "alias": "food_stg_sap_s4__tbl_vbpa", "checksum": {"name": "sha256", "checksum": "c49379fe82e472f24c766ec1bc97bb409bc4257f59078b7869c4ab3466aa0b74"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.171175, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__tbl_vbpa\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nwith latest_sales as (\r\n\r\n    select \r\n        vbeln,\r\n        kunnr,\r\n        parvw,\r\n        posnr,\r\n        row_number() over (partition by vbeln, posnr, parvw order by aedat desc nulls last, erdat nulls last) as latest\r\n\r\n    from {{ source(\"food_sap_s4\", \"tbl_vbpa\") }}\r\n\r\n)\r\n\r\nselect *\r\nfrom latest_sales\r\nwhere latest = 1", "language": "sql", "refs": [], "sources": [["food_sap_s4", "tbl_vbpa"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_sap_s4.tbl_vbpa"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__tbl_ztt_zsdc0016": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__tbl_ztt_zsdc0016", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__tbl_ztt_zsdc0016.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__tbl_ztt_zsdc0016.sql", "unique_id": "model.sales_group.food_stg_sap_s4__tbl_ztt_zsdc0016", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__tbl_ztt_zsdc0016"], "alias": "food_stg_sap_s4__tbl_ztt_zsdc0016", "checksum": {"name": "sha256", "checksum": "3239240392aea242681d355f55636f71e6c62004b7e2db11939bed4178cb8e98"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.1741724, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__tbl_ztt_zsdc0016\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nwith dedup as (\r\n\r\n    select \r\n        distinct {{ dbt_utils.star(from=source(\"food_sap_s4\", \"tbl_ztt_zsdc0016\"), except=[\"zindex\"]) }} \r\n    from {{ source(\"food_sap_s4\", \"tbl_ztt_zsdc0016\") }}\r\n\r\n)\r\n\r\nselect * from dedup", "language": "sql", "refs": [], "sources": [["food_sap_s4", "tbl_ztt_zsdc0016"], ["food_sap_s4", "tbl_ztt_zsdc0016"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.sales_group.food_sap_s4.tbl_ztt_zsdc0016", "source.sales_group.food_sap_s4.tbl_ztt_zsdc0016"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sol\\food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed.sql", "original_file_path": "models\\food\\staging\\sol\\food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed.sql", "unique_id": "model.sales_group.food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed", "fqn": ["sales_group", "food", "staging", "sol", "food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed"], "alias": "food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed", "checksum": {"name": "sha256", "checksum": "48e255ed115551369f09ce32e9dac017504d7eccfca6effd7fe6146f28fa3eca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.1803193, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed\"", "raw_code": "with renamed as (\r\n\r\n    select\r\n        -- DIMENSIONS\r\n        invoicedate as invoice_date,\r\n        shipdate as ship_date,\r\n        ordernbr as order_number,\r\n        custid as customer_id,\r\n        upper(invtid) as product_code,\r\n        trandesc as product_name,\r\n        lpad(upper(invtid), 18, '0') as product_code_padded,\r\n        channel as origin_channel_name,\r\n        customergroup as origin_customer_group_name,\r\n        customergroup1 as origin_customer_group_1_name,\r\n        customergroup2 as origin_customer_group_2_name,\r\n        ordertype as order_type,\r\n        shipname as ship_name,\r\n        shiptoid as ship_to,\r\n        transportfee,\r\n        sub as sub,\r\n        status as status,\r\n        program as promotion,\r\n        promotiontype as promotion_type,\r\n        siteid as site_id,\r\n\r\n        -- METRICS\r\n        afdamt as bill_net_amount,  -- bill - net amount\r\n        actqty as bill_quantity\r\n\r\n    from {{ source(\"food_sol_gnf1001apprepl\", \"vs_safoorderl_salesadmin\") }}\r\n\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["food_sol_gnf1001apprepl", "vs_safoorderl_salesadmin"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.food_sol_gnf1001apprepl.vs_safoorderl_salesadmin"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.assert_cms_billing_sales_audit": {"database": "food", "schema": "nghi_dev", "name": "assert_cms_billing_sales_audit", "resource_type": "model", "package_name": "sales_group", "path": "food\\tests\\assert_cms_billing_sales_audit.sql", "original_file_path": "models\\food\\tests\\assert_cms_billing_sales_audit.sql", "unique_id": "model.sales_group.assert_cms_billing_sales_audit", "fqn": ["sales_group", "food", "tests", "assert_cms_billing_sales_audit"], "alias": "assert_cms_billing_sales_audit", "checksum": {"name": "sha256", "checksum": "baa5a0ef6aa6a88dd01590c7215912f6e876bc49c624cc330a4064862d6ff545"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186446.184396, "relation_name": "\"food\".\"nghi_dev\".\"assert_cms_billing_sales_audit\"", "raw_code": "select * from {{ ref(\"food_audit_sales_cms\") }} where percent_of_total < 100", "language": "sql", "refs": [{"name": "food_audit_sales_cms", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_audit_sales_cms"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.assert_gkitchen_sales_audit": {"database": "food", "schema": "nghi_dev", "name": "assert_gkitchen_sales_audit", "resource_type": "model", "package_name": "sales_group", "path": "food\\tests\\assert_gkitchen_sales_audit.sql", "original_file_path": "models\\food\\tests\\assert_gkitchen_sales_audit.sql", "unique_id": "model.sales_group.assert_gkitchen_sales_audit", "fqn": ["sales_group", "food", "tests", "assert_gkitchen_sales_audit"], "alias": "assert_gkitchen_sales_audit", "checksum": {"name": "sha256", "checksum": "61b415974bf67fc4a9d4f563ee9f0d4557325f2f1844b9e5713a579a5ef11bfc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186446.1873958, "relation_name": "\"food\".\"nghi_dev\".\"assert_gkitchen_sales_audit\"", "raw_code": "select * from {{ ref(\"food_audit_sales_gkitchen\") }} where percent_of_total < 100", "language": "sql", "refs": [{"name": "food_audit_sales_gkitchen", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_audit_sales_gkitchen"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.assert_leboucher_ref_no_is_not_null": {"database": "food", "schema": "nghi_dev", "name": "assert_leboucher_ref_no_is_not_null", "resource_type": "model", "package_name": "sales_group", "path": "food\\tests\\assert_leboucher_ref_no_is_not_null.sql", "original_file_path": "models\\food\\tests\\assert_leboucher_ref_no_is_not_null.sql", "unique_id": "model.sales_group.assert_leboucher_ref_no_is_not_null", "fqn": ["sales_group", "food", "tests", "assert_leboucher_ref_no_is_not_null"], "alias": "assert_leboucher_ref_no_is_not_null", "checksum": {"name": "sha256", "checksum": "30989f295cc23a023b999a5448dfed17364336fc70229344fab105a8c5e5ad27"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186446.1903963, "relation_name": "\"food\".\"nghi_dev\".\"assert_leboucher_ref_no_is_not_null\"", "raw_code": "select * from {{ ref(\"food_leboucher_sales\") }} where ref_no is null limit 1", "language": "sql", "refs": [{"name": "food_leboucher_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_leboucher_sales"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.assert_leboucher_sales_audit": {"database": "food", "schema": "nghi_dev", "name": "assert_leboucher_sales_audit", "resource_type": "model", "package_name": "sales_group", "path": "food\\tests\\assert_leboucher_sales_audit.sql", "original_file_path": "models\\food\\tests\\assert_leboucher_sales_audit.sql", "unique_id": "model.sales_group.assert_leboucher_sales_audit", "fqn": ["sales_group", "food", "tests", "assert_leboucher_sales_audit"], "alias": "assert_leboucher_sales_audit", "checksum": {"name": "sha256", "checksum": "227370ac2cd5ed9829d8bdfbfffed340315e358f84c2cd3a81fe5dfc670579aa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186446.192396, "relation_name": "\"food\".\"nghi_dev\".\"assert_leboucher_sales_audit\"", "raw_code": "select * from {{ ref(\"food_audit_sales_leboucher\") }} where percent_of_total < 100", "language": "sql", "refs": [{"name": "food_audit_sales_leboucher", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_audit_sales_leboucher"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.consol_balance_sheet_backup": {"database": "food", "schema": "nghi_dev", "name": "consol_balance_sheet_backup", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\core\\consol_balance_sheet_backup.sql", "original_file_path": "models\\group\\intermediate\\core\\consol_balance_sheet_backup.sql", "unique_id": "model.sales_group.consol_balance_sheet_backup", "fqn": ["sales_group", "group", "intermediate", "core", "consol_balance_sheet_backup"], "alias": "consol_balance_sheet_backup", "checksum": {"name": "sha256", "checksum": "04382407a547cde2c93543c1a2fae6f2f8e7b50d8e7b36b7a1530a5424b890a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.195494, "relation_name": "\"food\".\"nghi_dev\".\"consol_balance_sheet_backup\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nwith\r\n    raw_fi as (\r\n        select gl.*, debit - credit as accumulated_balance\r\n        from {{ ref(\"food_stg_sap_s4__fi_0fi_gl_12\") }} gl\r\n        where\r\n            curtype = '10'\r\n            and valuetype = '010'\r\n            and kokrs = '1000'\r\n            and chartaccts = '1000'\r\n            and rbukrs = '3000'\r\n    ),\r\n    accumulated as (\r\n        select a.period, b.*\r\n        from {{ ref(\"consol_fiscal_period\") }} as a\r\n        cross join raw_fi as b\r\n        where b.fiscper <= a.period and \"left\"(b.fiscper, 4) = \"left\"(a.period, 4)\r\n    ),\r\n\r\n    final as (\r\n        select\r\n            period,\r\n            racct as gl_account,\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0011100000'\r\n                        and racct <= '0011199999'\r\n                        or racct >= '0011200000'\r\n                        and racct <= '0011299999'\r\n                        or racct >= '0011300000'\r\n                        and racct <= '0011399999'\r\n                        or racct >= '0012111000'\r\n                        and racct <= '0012111000'\r\n                        or racct >= '0012121000'\r\n                        and racct <= '0012121000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"111\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0012811000'\r\n                        and racct <= '0012811000'\r\n                        or racct >= '0012812000'\r\n                        and racct <= '0012812000'\r\n                        or racct >= '0012813000'\r\n                        and racct <= '0012813000'\r\n                        or racct >= '0012818000'\r\n                        and racct <= '0012818000'\r\n                        or racct >= '0012819099'\r\n                        and racct <= '0012819099'\r\n                        or racct >= '0012814000'\r\n                        and racct <= '0012814000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"112\",\r\n            --\"111\" + \"112\" as \"110\",\r\n            sum(\r\n                case\r\n                    when racct >= '0012100000' and racct <= '0012199999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"121\",\r\n            sum(\r\n                case\r\n                    when racct >= '0022910000' and racct <= '0022910000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"122\",\r\n            sum(\r\n                case\r\n                    when racct >= '0012881000' and racct <= '0012881000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"123\",\r\n            --\"121\" + \"122\" + \"123\" as \"120\",\r\n            sum(\r\n                case\r\n                    when racct >= '0013100000' and racct <= '0013119999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"131\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0024218004'\r\n                        and racct <= '0024218004'\r\n                        or racct >= '0033120000'\r\n                        and racct <= '0033129999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"132\",\r\n            sum(\r\n                case\r\n                    when racct >= '0013600000' and racct <= '0013699999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"133\",\r\n            sum(\r\n                case\r\n                    when racct >= '0013499999' and racct <= '0013499999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"134\",\r\n            sum(\r\n                case\r\n                    when racct >= '0013599999' and racct <= '0013599999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"135\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0014100000'\r\n                        and racct <= '0014199999'\r\n                        or racct >= '0013851000'\r\n                        and racct <= '0013887299'\r\n                        or racct >= '0013889100'\r\n                        and racct <= '0013889999'\r\n                        or racct >= '0024411002'\r\n                        and racct <= '0024419001'\r\n                        and racct <> '0024411001'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"136\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0022931001'\r\n                        and racct <= '0022931001'\r\n                        or racct >= '0022931002'\r\n                        and racct <= '0022931002'\r\n                        or racct >= '0022931003'\r\n                        and racct <= '0022931003'\r\n                        or racct >= '0022931008'\r\n                        and racct <= '0022931008'\r\n                        or racct >= '0022961000'\r\n                        and racct <= '0022961000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"137\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0013811000'\r\n                        and racct <= '0013811000'\r\n                        or racct >= '0013812000'\r\n                        and racct <= '0013812000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"139\",\r\n            --\"131\" + \"132\" + \"133\" + \"134\" + \"135\" + \"136\" + + \"137\" + \"139\" as \"130\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0015100000'\r\n                        and racct <= '0015199999'\r\n                        or racct >= '0015200000'\r\n                        and racct <= '0015299999'\r\n                        or racct >= '0015300000'\r\n                        and racct <= '0015399999'\r\n                        or racct >= '0015400000'\r\n                        and racct <= '0015499999'\r\n                        or racct >= '0015500000'\r\n                        and racct <= '0015599999'\r\n                        or racct >= '0015600000'\r\n                        and racct <= '0015699999'\r\n                        or racct >= '0015431000'\r\n                        and racct <= '0015431000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"141\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0022941000'\r\n                        and racct <= '0022941000'\r\n                        or racct >= '0022948000'\r\n                        and racct <= '0022948000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"149\",\r\n            --\"141\" + \"149\" as \"140\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0024210000'\r\n                        and racct <= '0024219999'\r\n                        and racct <> '0024218004'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"151\",\r\n            sum(\r\n                case\r\n                    when racct >= '0013300000' and racct <= '0013399999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"152\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0013887300'\r\n                        and racct <= '0013887300'\r\n                        or racct >= '0013887400'\r\n                        and racct <= '0013887400'\r\n                        or racct >= '0013887500'\r\n                        and racct <= '0013887500'\r\n                        or racct >= '0013887800'\r\n                        and racct <= '0013887800'\r\n                        or racct >= '0013887899'\r\n                        and racct <= '0013887899'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"153\",\r\n            sum(\r\n                case\r\n                    when racct >= '0015499999' and racct <= '0015499999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"154\",\r\n            sum(\r\n                case\r\n                    when racct >= '0015599999' and racct <= '0015599999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"155\",\r\n           -- \"151\" + \"152\" + \"153\" + \"154\" + \"155\" as \"150\",\r\n            --\"110\" + \"120\" + \"130\" + \"140\" + \"150\" as \"100\",\r\n            sum(\r\n                case\r\n                    when racct >= '0021199999' and racct <= '0021199999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"211\",\r\n            sum(\r\n                case\r\n                    when racct >= '0033146000' and racct <= '0033146000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"212\",\r\n            sum(\r\n                case\r\n                    when racct >= '0021399999' and racct <= '0021399999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"213\",\r\n            sum(\r\n                case\r\n                    when racct >= '0021499999' and racct <= '0021499999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"214\",\r\n            sum(\r\n                case\r\n                    when racct >= '0021599999' and racct <= '0021599999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"215\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0024420000'\r\n                        and racct <= '0024429999'\r\n                        or racct >= '0024411001'\r\n                        and racct <= '0024411001'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"216\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0022932001'\r\n                        and racct <= '0022932001'\r\n                        or racct >= '0022932002'\r\n                        and racct <= '0022932002'\r\n                        or racct >= '0022932003'\r\n                        and racct <= '0022932003'\r\n                        or racct >= '0022932008'\r\n                        and racct <= '0022932008'\r\n                        or racct >= '0022962000'\r\n                        and racct <= '0022962000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"219\",\r\n            --\"211\" + \"212\" + \"213\" + \"214\" + \"215\" + \"216\" + \"219\" as \"210\",\r\n            sum(\r\n                case\r\n                    when racct >= '0021100000' and racct <= '0021199999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"222\",\r\n            sum(\r\n                case\r\n                    when racct >= '0021410000' and racct <= '0021419999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"223\",\r\n            sum(\r\n                case\r\n                    when racct >= '0021200000' and racct <= '0021299999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"225\",\r\n            sum(\r\n                case\r\n                    when racct >= '0021420000' and racct <= '0021429999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"226\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0021300000'\r\n                        and racct <= '0021399999'\r\n                        and racct <> '0021382000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"228\",\r\n            sum(\r\n                case\r\n                    when racct >= '0021430000' and racct <= '0021439999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"229\",\r\n            --\"222\" + \"223\" + \"225\" + \"226\" + \"228\" + \"229\" as \"220\",\r\n            sum(\r\n                case\r\n                    when racct >= '0023199999' and racct <= '0023199999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"231\",\r\n            sum(\r\n                case\r\n                    when racct >= '0023299999' and racct <= '0023299999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"232\",\r\n            --\"231\" + \"232\" as \"230\",\r\n            sum(\r\n                case\r\n                    when racct >= '0024199999' and racct <= '0024199999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"241\",\r\n            sum(\r\n                case\r\n                    when racct >= '0024110000' and racct <= '0024139999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"242\",\r\n            --\"241\" + \"242\" as \"240\",\r\n            sum(\r\n                case\r\n                    when racct >= '0022100000' and racct <= '0022199999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"251\",\r\n            sum(\r\n                case\r\n                    when racct >= '0022200000' and racct <= '0022299999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"252\",\r\n            sum(\r\n                case\r\n                    when racct >= '0022800000' and racct <= '0022899999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"253\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0022921000'\r\n                        and racct <= '0022921000'\r\n                        or racct >= '0022928000'\r\n                        and racct <= '0022928000'\r\n                        or racct >= '0033560006'\r\n                        and racct <= '0033560006'\r\n                        or racct >= '0022900002'\r\n                        and racct <= '0022900002'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"254\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0022599999'\r\n                        and racct <= '0022599999'\r\n                        or racct >= '0012882000'\r\n                        and racct <= '0012882000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"255\",\r\n            --\"251\" + \"252\" + \"253\" + \"254\" + \"255\" as \"250\",\r\n            sum(\r\n                case\r\n                    when racct >= '0024220000' and racct <= '0024229999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"261\",\r\n            sum(\r\n                case\r\n                    when racct >= '0024300000' and racct <= '0024399999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"262\",\r\n            sum(\r\n                case\r\n                    when racct >= '0026399999' and racct <= '0026399999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"263\",\r\n            sum(\r\n                case\r\n                    when racct >= '0026899999' and racct <= '0026899999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"268\",\r\n            sum(\r\n                case\r\n                    when racct >= '0021382000' and racct <= '0021382000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"269\",\r\n            --\"261\" + \"262\" + \"263\" + \"268\" + \"269\" as \"260\",\r\n           -- \"210\" + \"220\" + \"230\" + \"240\" + \"250\" + \"260\" as \"200\",\r\n           -- \"100\" + \"200\" as \"270\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0033881001'\r\n                        and racct <= '0033881001'\r\n                        or racct >= '0033881011'\r\n                        and racct <= '0033881011'\r\n                        or racct >= '0033111100'\r\n                        and racct <= '0033111100'\r\n                        or racct >= '0033111200'\r\n                        and racct <= '0033111200'\r\n                        or racct >= '0033112000'\r\n                        and racct <= '0033112000'\r\n                        or racct >= '0033113000'\r\n                        and racct <= '0033113000'\r\n                        or racct >= '0033114000'\r\n                        and racct <= '0033114000'\r\n                        or racct >= '0033115000'\r\n                        and racct <= '0033115000'\r\n                        or racct >= '0033116000'\r\n                        and racct <= '0033116000'\r\n                        or racct >= '0033116099'\r\n                        and racct <= '0033116099'\r\n                        or racct >= '0033119000'\r\n                        and racct <= '0033119000'\r\n                        or racct >= '0033119001'\r\n                        and racct <= '0033119001'\r\n                        or racct >= '0033119099'\r\n                        and racct <= '0033119099'\r\n                        or racct >= '0033191000'\r\n                        and racct <= '0033191000'\r\n                        or racct >= '0033116100'\r\n                        and racct <= '0033116100'\r\n                        or racct >= '0033112001'\r\n                        and racct <= '0033112001'\r\n                        or racct >= '0033116001'\r\n                        and racct <= '0033116001'\r\n                        or racct >= '0033116002'\r\n                        and racct <= '0033116002'\r\n                        or racct >= '0033116003'\r\n                        and racct <= '0033116003'\r\n                        or racct >= '0033116004'\r\n                        and racct <= '0033116004'\r\n                        or racct >= '0033116005'\r\n                        and racct <= '0033116005'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"311\",\r\n            sum(\r\n                case\r\n                    when racct >= '0013120000' and racct <= '0013129999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"312\",\r\n            sum(\r\n                case\r\n                    when racct >= '0033300000' and racct <= '0033399999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"313\",\r\n            sum(\r\n                case\r\n                    when racct >= '0033400000' and racct <= '0033499999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"314\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0033500000'\r\n                        and racct <= '0033599999'\r\n                        and racct <> '0033550004'\r\n                        and racct <> '0033560006'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"315\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0033600000'\r\n                        and racct <= '0033699999'\r\n                        and racct <> '0033611000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"316\",\r\n            sum(\r\n                case\r\n                    when racct >= '0031799999' and racct <= '0031799999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"317\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0033871000'\r\n                        and racct <= '0033871000'\r\n                        or racct >= '0033872000'\r\n                        and racct <= '0033872000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"318\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0033810000'\r\n                        and racct <= '0033869999'\r\n                        or racct >= '0033881002'\r\n                        and racct <= '0033889999'\r\n                        or racct >= '0034410000'\r\n                        and racct <= '0034419999'\r\n                        and racct <> '0033881011'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"319\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0034111100'\r\n                        and racct <= '0034111999'\r\n                        or racct >= '0034121000'\r\n                        and racct <= '0034121999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"320\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0035241000'\r\n                        and racct <= '0035241000'\r\n                        or racct >= '0035241100'\r\n                        and racct <= '0035241100'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"321\",\r\n            sum(\r\n                case\r\n                    when racct >= '0035300000' and racct <= '0035399999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"322\",\r\n            sum(\r\n                case\r\n                    when racct >= '0032399999' and racct <= '0032399999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"323\",\r\n            sum(\r\n                case\r\n                    when racct >= '0032499999' and racct <= '0032499999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"324\",\r\n            {# \"311\"\r\n            + \"312\"\r\n            + \"313\"\r\n            + \"314\"\r\n            + \"315\"\r\n            + \"316\"\r\n            + \"317\"\r\n            + \"318\"\r\n            + \"319\"\r\n            + \"320\"\r\n            + \"321\"\r\n            + \"322\"\r\n            + \"323\"\r\n            + \"324\" as \"310\", #}\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0033131000'\r\n                        and racct <= '0033131000'\r\n                        or racct >= '0033141000'\r\n                        and racct <= '0033141000'\r\n                        or racct >= '0033136000'\r\n                        and racct <= '0033136000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"331\",\r\n            sum(\r\n                case\r\n                    when racct >= '0033299999' and racct <= '0033299999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"332\",\r\n            sum(\r\n                case\r\n                    when racct >= '0033399999' and racct <= '0033399999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"333\",\r\n            sum(\r\n                case\r\n                    when racct >= '0033611000' and racct <= '0033611000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"334\",\r\n            sum(\r\n                case\r\n                    when racct >= '0033599999' and racct <= '0033599999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"335\",\r\n            sum(\r\n                case\r\n                    when racct >= '0033699999' and racct <= '0033699999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"336\",\r\n            sum(\r\n                case\r\n                    when racct >= '0034420000' and racct <= '0034429999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"337\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0034112000'\r\n                        and racct <= '0034112999'\r\n                        or racct >= '0034122000'\r\n                        and racct <= '0034122999'\r\n                        or racct >= '0034311000'\r\n                        and racct <= '0034319999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"338\",\r\n            sum(\r\n                case\r\n                    when racct >= '0033999999' and racct <= '0033999999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"339\",\r\n            sum(\r\n                case\r\n                    when racct >= '0034099999' and racct <= '0034099999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"340\",\r\n            sum(\r\n                case\r\n                    when racct >= '0034700000' and racct <= '0034799999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"341\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0033550004'\r\n                        and racct <= '0033550004'\r\n                        or racct >= '0035220000'\r\n                        and racct <= '0035220000'\r\n                        or racct >= '0035230000'\r\n                        and racct <= '0035230000'\r\n                        or racct >= '0035242100'\r\n                        and racct <= '0035242100'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"342\",\r\n            sum(\r\n                case\r\n                    when racct >= '0034399999' and racct <= '0034399999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"343\",\r\n            {# \"331\"\r\n            + \"332\"\r\n            + \"333\"\r\n            + \"334\"\r\n            + \"335\"\r\n            + \"336\"\r\n            + \"337\"\r\n            + \"338\"\r\n            + \"339\"\r\n            + \"340\"\r\n            + \"341\"\r\n            + \"342\"\r\n            + \"343\" as \"330\", #}\r\n\r\n            sum(\r\n                case\r\n                    when racct >= '0041111000' and racct <= '0041111000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"411a\",\r\n            sum(\r\n                case\r\n                    when racct >= '0041112000' and racct <= '0041112000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"411b\",\r\n            --\"411a\" + \"411b\" as \"411\",\r\n            sum(\r\n                case\r\n                    when racct >= '0041121000' and racct <= '0041121000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"412\",\r\n            sum(\r\n                case\r\n                    when racct >= '0041399999' and racct <= '0041399999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"413\",\r\n            sum(\r\n                case\r\n                    when racct >= '0041181000' and racct <= '0041181000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"414\",\r\n            sum(\r\n                case\r\n                    when racct >= '0041911000' and racct <= '0041911000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"415\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0041210000'\r\n                        and racct <= '0041210000'\r\n                        or racct >= '0041220000'\r\n                        and racct <= '0041220000'\r\n                        or racct >= '0041230000'\r\n                        and racct <= '0041230000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"416\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0041311000'\r\n                        and racct <= '0041311000'\r\n                        or racct >= '0041321000'\r\n                        and racct <= '0041321000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"417\",\r\n            sum(\r\n                case\r\n                    when racct >= '0041410000' and racct <= '0041410000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"418\",\r\n            sum(\r\n                case\r\n                    when racct >= '0041999999' and racct <= '0041999999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"419\",\r\n            sum(\r\n                case\r\n                    when racct >= '0041810000' and racct <= '0041810000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"420\",\r\n            sum(\r\n                case\r\n                    when racct >= '0042110000' and racct <= '0042110000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"421a\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0051100000'\r\n                        and racct <= '0051199999'\r\n                        or racct >= '0052100000'\r\n                        and racct <= '0052199999'\r\n                        or racct >= '0063200000'\r\n                        and racct <= '0063299999'\r\n                        or racct >= '0062100000'\r\n                        and racct <= '0062199999'\r\n                        or racct >= '0062200000'\r\n                        and racct <= '0062299999'\r\n                        or racct >= '0062700000'\r\n                        and racct <= '0062799999'\r\n                        or racct >= '0064100000'\r\n                        and racct <= '0064199999'\r\n                        or racct >= '0064200000'\r\n                        and racct <= '0064299999'\r\n                        or racct >= '0051500000'\r\n                        and racct <= '0051599999'\r\n                        or racct >= '0063500000'\r\n                        and racct <= '0063599999'\r\n                        or racct >= '0071100000'\r\n                        and racct <= '0071199999'\r\n                        or racct >= '0081100000'\r\n                        and racct <= '0081199999'\r\n                        or racct >= '0082110000'\r\n                        and racct <= '0082199999'\r\n                        or racct >= '0099000000'\r\n                        and racct <= '0099999999'\r\n                        or racct >= '0042120000'\r\n                        and racct <= '0042120000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"421b\",\r\n            --\"421a\" + \"421b\" as \"421\",\r\n            sum(\r\n                case\r\n                    when racct >= '0042299999' and racct <= '0042299999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"422\",\r\n            sum(\r\n                case\r\n                    when\r\n                        racct >= '0041921000'\r\n                        and racct <= '0041921000'\r\n                        or racct >= '0041922000'\r\n                        and racct <= '0041922000'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"429\",\r\n{# \r\n            \"411\"\r\n            + \"412\"\r\n            + \"413\"\r\n            + \"414\"\r\n            + \"415\"\r\n            + \"416\"\r\n            + \"417\"\r\n            + \"418\"\r\n            + \"419\"\r\n            + \"420\"\r\n            + \"421\"\r\n            + \"429\" as \"410\", #}\r\n            sum(\r\n                case\r\n                    when racct >= '0043199999' and racct <= '0043199999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"431\",\r\n            sum(\r\n                case\r\n                    when racct >= '0043299999' and racct <= '0043299999'\r\n                    then accumulated_balance\r\n                end\r\n            ) as \"432\"\r\n            {# \"431\" + \"432\" as \"430\",\r\n            \"310\" + \"330\" as \"300\",\r\n            \"410\" + \"430\" as \"400\",\r\n            \"300\" + \"400\" as \"440\" #}\r\n        from accumulated\r\n        group by period,\r\n        gl_account\r\n    -- racct\r\n    )\r\nselect *\r\nfrom final", "language": "sql", "refs": [{"name": "food_stg_sap_s4__fi_0fi_gl_12", "package": null, "version": null}, {"name": "consol_fiscal_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_stg_sap_s4__fi_0fi_gl_12", "model.sales_group.consol_fiscal_period"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.consol_fiscal_period": {"database": "food", "schema": "nghi_dev", "name": "consol_fiscal_period", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\core\\consol_fiscal_period.sql", "original_file_path": "models\\group\\intermediate\\core\\consol_fiscal_period.sql", "unique_id": "model.sales_group.consol_fiscal_period", "fqn": ["sales_group", "group", "intermediate", "core", "consol_fiscal_period"], "alias": "consol_fiscal_period", "checksum": {"name": "sha256", "checksum": "bd53481aa91f233729e6d561c703659c7a1bce7b4fc1b3e1e1f935021968ff1e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.198995, "relation_name": "\"food\".\"nghi_dev\".\"consol_fiscal_period\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect *\r\nfrom {{ ref(\"period_input\") }}\r\nwhere period >= '2022001'", "language": "sql", "refs": [{"name": "period_input", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.period_input"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.consol_mapping_account_pl_to_account_sap_union": {"database": "food", "schema": "nghi_dev", "name": "consol_mapping_account_pl_to_account_sap_union", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\core\\consol_mapping_account_pl_to_account_sap_union.sql", "original_file_path": "models\\group\\intermediate\\core\\consol_mapping_account_pl_to_account_sap_union.sql", "unique_id": "model.sales_group.consol_mapping_account_pl_to_account_sap_union", "fqn": ["sales_group", "group", "intermediate", "core", "consol_mapping_account_pl_to_account_sap_union"], "alias": "consol_mapping_account_pl_to_account_sap_union", "checksum": {"name": "sha256", "checksum": "e2fcc08a53150a2da52462a83f0bbaf5ce104ee2d5b07bc3d274b4ae8b642b71"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.2026515, "relation_name": "\"food\".\"nghi_dev\".\"consol_mapping_account_pl_to_account_sap_union\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect\r\n    company_code,\r\n    'donavet'::text as sub_type,\r\n    racct_donavet as racct_pl,\r\n    racct_sap\r\nfrom {{ ref('feed_stg_excel_donavet_tb_account_mapping') }}\r\n\r\nunion all\r\n\r\nselect\r\n    company_code,\r\n    'qdtek'::text as sub_type,\r\n    racct_qdtek as racct_pl,\r\n    racct_sap\r\nfrom {{ ref('tech_stg_excel_qdtek_tb_account_mapping') }}\r\n\r\nunion all\r\n\r\nselect\r\n    company_code,\r\n    'lbc'::text as sub_type,\r\n    racct_misa as racct_pl,\r\n    racct_sap\r\nfrom {{ ref('food_stg_excel_misa_lbc_tb_account_mapping') }}\r\n\r\nunion all\r\n\r\nselect\r\n    company_code,\r\n    'ntt'::text as sub_type,\r\n    racct_qdtek as racct_pl,\r\n    racct_sap\r\nfrom {{ ref('tech_stg_excel_qdtek_tb_account_mapping') }}", "language": "sql", "refs": [{"name": "feed_stg_excel_donavet_tb_account_mapping", "package": null, "version": null}, {"name": "tech_stg_excel_qdtek_tb_account_mapping", "package": null, "version": null}, {"name": "food_stg_excel_misa_lbc_tb_account_mapping", "package": null, "version": null}, {"name": "tech_stg_excel_qdtek_tb_account_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.feed_stg_excel_donavet_tb_account_mapping", "model.sales_group.tech_stg_excel_qdtek_tb_account_mapping", "model.sales_group.food_stg_excel_misa_lbc_tb_account_mapping", "model.sales_group.tech_stg_excel_qdtek_tb_account_mapping"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.consol_mapping_bs_gl_account": {"database": "food", "schema": "nghi_dev", "name": "consol_mapping_bs_gl_account", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\core\\consol_mapping_bs_gl_account.sql", "original_file_path": "models\\group\\intermediate\\core\\consol_mapping_bs_gl_account.sql", "unique_id": "model.sales_group.consol_mapping_bs_gl_account", "fqn": ["sales_group", "group", "intermediate", "core", "consol_mapping_bs_gl_account"], "alias": "consol_mapping_bs_gl_account", "checksum": {"name": "sha256", "checksum": "8dcf58e6f5d6b30f39a2d9c82c8cfb6e650a428c7de9714ead9a5c05388bb349"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.2057261, "relation_name": "\"food\".\"nghi_dev\".\"consol_mapping_bs_gl_account\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect\r\n    code,\r\n    '00' || gl_account_from as _gl_account_from,\r\n    '00' || gl_account_to as _gl_account_to,\r\n    excluded\r\nfrom {{ ref(\"mapping_bs_gl_account\") }}", "language": "sql", "refs": [{"name": "mapping_bs_gl_account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.mapping_bs_gl_account"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.consol_mapping_exchange_rate": {"database": "food", "schema": "nghi_dev", "name": "consol_mapping_exchange_rate", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\core\\consol_mapping_exchange_rate.sql", "original_file_path": "models\\group\\intermediate\\core\\consol_mapping_exchange_rate.sql", "unique_id": "model.sales_group.consol_mapping_exchange_rate", "fqn": ["sales_group", "group", "intermediate", "core", "consol_mapping_exchange_rate"], "alias": "consol_mapping_exchange_rate", "checksum": {"name": "sha256", "checksum": "08e15433cd762c402f2171f1fcb11fad0f206845de5ea1d5c48f85bc490f6749"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.2086527, "relation_name": "\"food\".\"nghi_dev\".\"consol_mapping_exchange_rate\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\nwith source as \r\n(\r\nselect\r\n    cc::text as company_code,\r\n    a::decimal(10,2) as \"gl_asset\", --tai san\r\n    b::decimal(10,2) as \"gl_giabilities\", --no phai tra,\r\n    c::decimal(10,2) as \"gl_equity\", --von\r\n    d::decimal(10,2) as \"gl_profit_ly\", --loi nhuan nam truoc\r\n    f::decimal(10,2) as \"gl_profit_cy\",--loi nhuan hien tai\r\n    trim(vnd) as \"currency\",\r\n    right(thang,4) || left(thang,3) as period\r\n\r\nfrom {{ source(\"group_excel_financial_statements\", \"md_rate\") }}\r\n),\r\n\r\n\r\ndeduped as (\r\n    {{\r\n        dbt_utils.deduplicate(\r\n            relation=\"source\",\r\n            partition_by=\"company_code, currency, period\",\r\n            order_by=\"company_code desc\",\r\n        )\r\n    }}\r\n)\r\n\r\nselect * from deduped", "language": "sql", "refs": [], "sources": [["group_excel_financial_statements", "md_rate"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.group_excel_financial_statements.md_rate"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.consol_mapping_legal_company_code_currency": {"database": "food", "schema": "nghi_dev", "name": "consol_mapping_legal_company_code_currency", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\core\\consol_mapping_legal_company_code_currency.sql", "original_file_path": "models\\group\\intermediate\\core\\consol_mapping_legal_company_code_currency.sql", "unique_id": "model.sales_group.consol_mapping_legal_company_code_currency", "fqn": ["sales_group", "group", "intermediate", "core", "consol_mapping_legal_company_code_currency"], "alias": "consol_mapping_legal_company_code_currency", "checksum": {"name": "sha256", "checksum": "c53084dde16d17b001b7c877ce6c27abaf082f9fdd6a8e972b5df0b038512a01"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186446.2157776, "relation_name": "\"food\".\"nghi_dev\".\"consol_mapping_legal_company_code_currency\"", "raw_code": "select legal, company_code, company_name, currency\r\nfrom {{ ref(\"mapping_legal_company_code_currency\") }}", "language": "sql", "refs": [{"name": "mapping_legal_company_code_currency", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.mapping_legal_company_code_currency"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.consol_mapping_p_and_l_gl_account": {"database": "food", "schema": "nghi_dev", "name": "consol_mapping_p_and_l_gl_account", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\core\\consol_mapping_p_and_l_gl_account.sql", "original_file_path": "models\\group\\intermediate\\core\\consol_mapping_p_and_l_gl_account.sql", "unique_id": "model.sales_group.consol_mapping_p_and_l_gl_account", "fqn": ["sales_group", "group", "intermediate", "core", "consol_mapping_p_and_l_gl_account"], "alias": "consol_mapping_p_and_l_gl_account", "checksum": {"name": "sha256", "checksum": "016caa805772c246ae89d22b91eedcc4f8322dc56ec8faa7fa4d1574548327d4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186446.2180057, "relation_name": "\"food\".\"nghi_dev\".\"consol_mapping_p_and_l_gl_account\"", "raw_code": "select\r\n    code,\r\n    gl_account_from as _gl_account_from,\r\n    gl_account_to as _gl_account_to,\r\n    excluded\r\nfrom  {{ ref(\"mapping_p_and_l_account\") }}", "language": "sql", "refs": [{"name": "mapping_p_and_l_account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.mapping_p_and_l_account"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_1000_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_1000_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_1000_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_1000_solomon.sql", "unique_id": "model.sales_group.farm_pl_1000_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_1000_solomon"], "alias": "farm_pl_1000_solomon", "checksum": {"name": "sha256", "checksum": "20fe8f4b924861dd473442c15df09c769469bde6222f4124915fb3c210e5fd44"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.2210052, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_1000_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        'solomon',ref(\"farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_2000_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_2000_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_2000_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_2000_solomon.sql", "unique_id": "model.sales_group.farm_pl_2000_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_2000_solomon"], "alias": "farm_pl_2000_solomon", "checksum": {"name": "sha256", "checksum": "b59efd40644e3ff8911e96e04ea7b3ecfb3c110adc3db547da763f9cd3ce0f0f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.231228, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_2000_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        'solomon',ref(\"farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_2000_solomon_dong_nam_bo": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_2000_solomon_dong_nam_bo", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_2000_solomon_dong_nam_bo.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_2000_solomon_dong_nam_bo.sql", "unique_id": "model.sales_group.farm_pl_2000_solomon_dong_nam_bo", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_2000_solomon_dong_nam_bo"], "alias": "farm_pl_2000_solomon_dong_nam_bo", "checksum": {"name": "sha256", "checksum": "5282599bc4070756b4845783dc1f9cdc7aeaab5f71a54073cc65bbb56482b53f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.2382114, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_2000_solomon_dong_nam_bo\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        'solomon', ref(\"farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_2100_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_2100_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_2100_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_2100_solomon.sql", "unique_id": "model.sales_group.farm_pl_2100_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_2100_solomon"], "alias": "farm_pl_2100_solomon", "checksum": {"name": "sha256", "checksum": "2562dcecf14a837f1a4f74cbb5777c9cd06665a1615f2a91dbd145aa5aaecc1f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.2451425, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_2100_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        'solomon',ref(\"farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_2200_1001_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_2200_1001_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_2200_1001_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_2200_1001_solomon.sql", "unique_id": "model.sales_group.farm_pl_2200_1001_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_2200_1001_solomon"], "alias": "farm_pl_2200_1001_solomon", "checksum": {"name": "sha256", "checksum": "2d444b711e87b38d56dd0a99650effdf70df35c6538079a92a538a03808fdb9f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.251212, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_2200_1001_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n       'solomon', ref(\"farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_2200_2001_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_2200_2001_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_2200_2001_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_2200_2001_solomon.sql", "unique_id": "model.sales_group.farm_pl_2200_2001_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_2200_2001_solomon"], "alias": "farm_pl_2200_2001_solomon", "checksum": {"name": "sha256", "checksum": "42c9935ef990ca53f35c26675106d5178c957e7a308763d7309fa974612cf135"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.2572885, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_2200_2001_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        'solomon',ref(\"farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_2200_2002_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_2200_2002_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_2200_2002_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_2200_2002_solomon.sql", "unique_id": "model.sales_group.farm_pl_2200_2002_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_2200_2002_solomon"], "alias": "farm_pl_2200_2002_solomon", "checksum": {"name": "sha256", "checksum": "511aabb432506004803ef8bbc025b49a0650a21b05e78f2b979ac01622a5df9a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.2644083, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_2200_2002_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        'solomon',ref(\"farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_2300_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_2300_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_2300_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_2300_solomon.sql", "unique_id": "model.sales_group.farm_pl_2300_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_2300_solomon"], "alias": "farm_pl_2300_solomon", "checksum": {"name": "sha256", "checksum": "8af7c9b35fd536a63757c0671ecfbd1a5a1dd33845a8554d1b8cedd161247a72"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.271515, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_2300_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        'solomon',ref(\"farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_2400_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_2400_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_2400_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_2400_solomon.sql", "unique_id": "model.sales_group.farm_pl_2400_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_2400_solomon"], "alias": "farm_pl_2400_solomon", "checksum": {"name": "sha256", "checksum": "887eb93ff921dfab6c9bb7004e9b677e3cd12881cf2bc4d421c158a0837f81bc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.277537, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_2400_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        'solomon',ref(\"farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_5000_cam_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_5000_cam_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_5000_cam_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_5000_cam_solomon.sql", "unique_id": "model.sales_group.farm_pl_5000_cam_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_5000_cam_solomon"], "alias": "farm_pl_5000_cam_solomon", "checksum": {"name": "sha256", "checksum": "e647fe6c6377daddc133de983bbda08fc7fa33f48db503dc089e6e1677136c08"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.283538, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_5000_cam_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        'solomon',ref(\"farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final\"), '99'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_5000_cbd1001_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_5000_cbd1001_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_5000_cbd1001_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_5000_cbd1001_solomon.sql", "unique_id": "model.sales_group.farm_pl_5000_cbd1001_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_5000_cbd1001_solomon"], "alias": "farm_pl_5000_cbd1001_solomon", "checksum": {"name": "sha256", "checksum": "8aa8e9db0db7a7e491d364e125c4ea1313cb6a5b82e9a1cb9662908d429ab58f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.2898095, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_5000_cbd1001_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        'solomon',ref(\"farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final\"), '99'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_5000_star_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_5000_star_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_5000_star_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_5000_star_solomon.sql", "unique_id": "model.sales_group.farm_pl_5000_star_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_5000_star_solomon"], "alias": "farm_pl_5000_star_solomon", "checksum": {"name": "sha256", "checksum": "55f999e7d3759ffc742a0a2dff7dda4bea89d3c51952b3bedff603f903f63e5a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.29581, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_5000_star_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n       'solomon', ref(\"farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final\"), '99'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_5100_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_5100_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_5100_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_5100_solomon.sql", "unique_id": "model.sales_group.farm_pl_5100_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_5100_solomon"], "alias": "farm_pl_5100_solomon", "checksum": {"name": "sha256", "checksum": "d43e9797a7f3c4dbfd07cf2ce06c9b498b89ebe2fc24155008510c4c49b72218"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.302914, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_5100_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        'solomon',ref(\"farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final\"), '99'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_pl_5200_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_pl_5200_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_p_l\\farm_pl_5200_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_p_l\\farm_pl_5200_solomon.sql", "unique_id": "model.sales_group.farm_pl_5200_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_p_l", "farm_pl_5200_solomon"], "alias": "farm_pl_5200_solomon", "checksum": {"name": "sha256", "checksum": "277f21aa6a0d1e55caaf56a203856d9b9ac503c499cd3bb7eb8bcdb893ea1fc7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.3090246, "relation_name": "\"food\".\"nghi_dev\".\"farm_pl_5200_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        'solomon',ref(\"farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final\"), '99'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_1000_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_1000_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_1000_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_1000_solomon.sql", "unique_id": "model.sales_group.farm_tb_1000_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_1000_solomon"], "alias": "farm_tb_1000_solomon", "checksum": {"name": "sha256", "checksum": "73603993fca6e2020df216254090e73d0b9678a21fbfb365ac56217c53c0e31a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.3151581, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_1000_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n-- depends_on: {{ ref('consol_mapping_bs_gl_account') }}\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        'solomon',ref(\"farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "consol_mapping_bs_gl_account", "package": null, "version": null}, {"name": "farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.consol_mapping_bs_gl_account", "model.sales_group.farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_2000_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_2000_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_2000_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_2000_solomon.sql", "unique_id": "model.sales_group.farm_tb_2000_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_2000_solomon"], "alias": "farm_tb_2000_solomon", "checksum": {"name": "sha256", "checksum": "9cc1b694e286f2c2b07bd4efc55dfca3eedec987240d5a2695bb2960733b6c60"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.3253329, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_2000_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        'solomon',ref(\"farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_2000_solomon_dong_nam_bo": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_2000_solomon_dong_nam_bo", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_2000_solomon_dong_nam_bo.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_2000_solomon_dong_nam_bo.sql", "unique_id": "model.sales_group.farm_tb_2000_solomon_dong_nam_bo", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_2000_solomon_dong_nam_bo"], "alias": "farm_tb_2000_solomon_dong_nam_bo", "checksum": {"name": "sha256", "checksum": "9a6fcc21aca4e127c8d126fb7a9d10c2583f8445ce94268d75435eb42f008a87"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.3313358, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_2000_solomon_dong_nam_bo\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        'solomon', ref(\"farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_2100_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_2100_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_2100_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_2100_solomon.sql", "unique_id": "model.sales_group.farm_tb_2100_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_2100_solomon"], "alias": "farm_tb_2100_solomon", "checksum": {"name": "sha256", "checksum": "d1a345f059c6fb24582a52a5d1a2b2dc6b2c94ae90cfe10285bc2892a39fe1db"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.3401544, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_2100_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        'solomon',ref(\"farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_2200_1001_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_2200_1001_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_2200_1001_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_2200_1001_solomon.sql", "unique_id": "model.sales_group.farm_tb_2200_1001_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_2200_1001_solomon"], "alias": "farm_tb_2200_1001_solomon", "checksum": {"name": "sha256", "checksum": "7ca657e83cde15c86eadf0800a1dbafe26f7e09282bbbce14376b55ba8aa824b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.3462238, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_2200_1001_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n       'solomon', ref(\"farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_2200_2001_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_2200_2001_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_2200_2001_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_2200_2001_solomon.sql", "unique_id": "model.sales_group.farm_tb_2200_2001_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_2200_2001_solomon"], "alias": "farm_tb_2200_2001_solomon", "checksum": {"name": "sha256", "checksum": "544e084894d4f0de6a1a360bf86cdcc3c0e3ed4cd533d277ea936a6b298cd8c1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.352778, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_2200_2001_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        'solomon',ref(\"farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_2200_2002_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_2200_2002_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_2200_2002_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_2200_2002_solomon.sql", "unique_id": "model.sales_group.farm_tb_2200_2002_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_2200_2002_solomon"], "alias": "farm_tb_2200_2002_solomon", "checksum": {"name": "sha256", "checksum": "fea41690571cfd3487e4609251c95721d215925145a5b277f533fb31c8940e29"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.35881, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_2200_2002_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        'solomon',ref(\"farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_2300_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_2300_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_2300_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_2300_solomon.sql", "unique_id": "model.sales_group.farm_tb_2300_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_2300_solomon"], "alias": "farm_tb_2300_solomon", "checksum": {"name": "sha256", "checksum": "ba285d181986dac98714744348ee7cec30e51cddf14189840a98571c4dbf5e21"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.3663259, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_2300_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        'solomon',ref(\"farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_2400_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_2400_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_2400_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_2400_solomon.sql", "unique_id": "model.sales_group.farm_tb_2400_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_2400_solomon"], "alias": "farm_tb_2400_solomon", "checksum": {"name": "sha256", "checksum": "54d70f2f2e61c74b135b15876f65a36fb48e62c7b98865f9620dfe99b7ded773"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.3726366, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_2400_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        'solomon',ref(\"farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_5000_cam_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_5000_cam_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_5000_cam_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_5000_cam_solomon.sql", "unique_id": "model.sales_group.farm_tb_5000_cam_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_5000_cam_solomon"], "alias": "farm_tb_5000_cam_solomon", "checksum": {"name": "sha256", "checksum": "8f0cff412cd56d392894d1ef235e0bc8446dfc8fb534378dc1d48c4548a728e8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.3786428, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_5000_cam_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        'solomon',ref(\"farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final\"), '99'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_5000_cbd1001_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_5000_cbd1001_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_5000_cbd1001_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_5000_cbd1001_solomon.sql", "unique_id": "model.sales_group.farm_tb_5000_cbd1001_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_5000_cbd1001_solomon"], "alias": "farm_tb_5000_cbd1001_solomon", "checksum": {"name": "sha256", "checksum": "75c5bd060959443e2e862afce2fb8d4627f51161f365aea3d0968f5ab2437923"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.3846357, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_5000_cbd1001_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        'solomon',ref(\"farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final\"), '99'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_5000_star_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_5000_star_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_5000_star_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_5000_star_solomon.sql", "unique_id": "model.sales_group.farm_tb_5000_star_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_5000_star_solomon"], "alias": "farm_tb_5000_star_solomon", "checksum": {"name": "sha256", "checksum": "ff75186b9a8f30ef3e97b0d31338a0d1c40a89062023af4bb21d12a3a6a91bb7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.3906364, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_5000_star_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n       'solomon', ref(\"farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final\"), '99'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_5100_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_5100_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_5100_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_5100_solomon.sql", "unique_id": "model.sales_group.farm_tb_5100_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_5100_solomon"], "alias": "farm_tb_5100_solomon", "checksum": {"name": "sha256", "checksum": "79d82888e46fb4c6ae07ce7effa509ec38dc563ce79e508e8a2083795be4db27"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.3981843, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_5100_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        'solomon',ref(\"farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final\"), '99'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.farm_tb_5200_solomon": {"database": "food", "schema": "nghi_dev", "name": "farm_tb_5200_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\farm\\farm_tb\\farm_tb_5200_solomon.sql", "original_file_path": "models\\group\\intermediate\\farm\\farm_tb\\farm_tb_5200_solomon.sql", "unique_id": "model.sales_group.farm_tb_5200_solomon", "fqn": ["sales_group", "group", "intermediate", "farm", "farm_tb", "farm_tb_5200_solomon"], "alias": "farm_tb_5200_solomon", "checksum": {"name": "sha256", "checksum": "c2a8911aab9a85f7dd32f4c4900c635c3242d14dfca1d6691f86553045a78123"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.4042552, "relation_name": "\"food\".\"nghi_dev\".\"farm_tb_5200_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        'solomon',ref(\"farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final\"), '99'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_pl_1000_dnb_solomon": {"database": "food", "schema": "nghi_dev", "name": "feed_pl_1000_dnb_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\feed\\feed_pl\\feed_pl_1000_dnb_solomon.sql", "original_file_path": "models\\group\\intermediate\\feed\\feed_pl\\feed_pl_1000_dnb_solomon.sql", "unique_id": "model.sales_group.feed_pl_1000_dnb_solomon", "fqn": ["sales_group", "group", "intermediate", "feed", "feed_pl", "feed_pl_1000_dnb_solomon"], "alias": "feed_pl_1000_dnb_solomon", "checksum": {"name": "sha256", "checksum": "41be2c4f97328878d2835daeeb6d6aa6bc5d0f157d0cc32d6287d2b469a6b08c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.4111853, "relation_name": "\"food\".\"nghi_dev\".\"feed_pl_1000_dnb_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        \"solomon\", ref(\"feed_stg_sol_gfdnbapp_cn_dnb_tb_1000\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "feed_stg_sol_gfdnbapp_cn_dnb_tb_1000", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.feed_stg_sol_gfdnbapp_cn_dnb_tb_1000"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_pl_1000_sap": {"database": "food", "schema": "nghi_dev", "name": "feed_pl_1000_sap", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\feed\\feed_pl\\feed_pl_1000_sap.sql", "original_file_path": "models\\group\\intermediate\\feed\\feed_pl\\feed_pl_1000_sap.sql", "unique_id": "model.sales_group.feed_pl_1000_sap", "fqn": ["sales_group", "group", "intermediate", "feed", "feed_pl", "feed_pl_1000_sap"], "alias": "feed_pl_1000_sap", "checksum": {"name": "sha256", "checksum": "5079aa94a21c81f6965f9fd71ab9c5c7b89fbf6c72f664bb0baa4a1349dc632b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.419244, "relation_name": "\"food\".\"nghi_dev\".\"feed_pl_1000_sap\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        'sap_ecc', ref(\"feed_stg_sap_ecc__fi_0fi_gl_12\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "feed_stg_sap_ecc__fi_0fi_gl_12", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.feed_stg_sap_ecc__fi_0fi_gl_12"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_pl_1100_donavet_excel": {"database": "food", "schema": "nghi_dev", "name": "feed_pl_1100_donavet_excel", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\feed\\feed_pl\\feed_pl_1100_donavet_excel.sql", "original_file_path": "models\\group\\intermediate\\feed\\feed_pl\\feed_pl_1100_donavet_excel.sql", "unique_id": "model.sales_group.feed_pl_1100_donavet_excel", "fqn": ["sales_group", "group", "intermediate", "feed", "feed_pl", "feed_pl_1100_donavet_excel"], "alias": "feed_pl_1100_donavet_excel", "checksum": {"name": "sha256", "checksum": "27a3d148deee853bedd6e017196158a178e3888d967f3d136c50491045021014"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.4272356, "relation_name": "\"food\".\"nghi_dev\".\"feed_pl_1100_donavet_excel\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        \"excel\", ref(\"feed_stg_excel_donavet_tb_donavet_1100\"), '10','donavet'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "feed_stg_excel_donavet_tb_donavet_1100", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.feed_stg_excel_donavet_tb_donavet_1100"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_tb_1000_dnb_solomon": {"database": "food", "schema": "nghi_dev", "name": "feed_tb_1000_dnb_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\feed\\feed_tb\\feed_tb_1000_dnb_solomon.sql", "original_file_path": "models\\group\\intermediate\\feed\\feed_tb\\feed_tb_1000_dnb_solomon.sql", "unique_id": "model.sales_group.feed_tb_1000_dnb_solomon", "fqn": ["sales_group", "group", "intermediate", "feed", "feed_tb", "feed_tb_1000_dnb_solomon"], "alias": "feed_tb_1000_dnb_solomon", "checksum": {"name": "sha256", "checksum": "47226cdf4d8c52125772429ca33bbaa9757aaf4823cc77ff04faf044728137d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.4351337, "relation_name": "\"food\".\"nghi_dev\".\"feed_tb_1000_dnb_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        \"solomon\", ref(\"feed_stg_sol_gfdnbapp_cn_dnb_tb_1000\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "feed_stg_sol_gfdnbapp_cn_dnb_tb_1000", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.feed_stg_sol_gfdnbapp_cn_dnb_tb_1000"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_tb_1000_sap": {"database": "food", "schema": "nghi_dev", "name": "feed_tb_1000_sap", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\feed\\feed_tb\\feed_tb_1000_sap.sql", "original_file_path": "models\\group\\intermediate\\feed\\feed_tb\\feed_tb_1000_sap.sql", "unique_id": "model.sales_group.feed_tb_1000_sap", "fqn": ["sales_group", "group", "intermediate", "feed", "feed_tb", "feed_tb_1000_sap"], "alias": "feed_tb_1000_sap", "checksum": {"name": "sha256", "checksum": "be102c288459d99a3a45d6b6b4dd51e007d530b800cb4ec670eafaf08862ed11"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.442126, "relation_name": "\"food\".\"nghi_dev\".\"feed_tb_1000_sap\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        'sap_ecc', ref(\"feed_stg_sap_ecc__fi_0fi_gl_12\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "feed_stg_sap_ecc__fi_0fi_gl_12", "package": null, "version": null}, {"name": "consol_fiscal_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.feed_stg_sap_ecc__fi_0fi_gl_12", "model.sales_group.consol_fiscal_period"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.feed_tb_1100_donavet_excel": {"database": "food", "schema": "nghi_dev", "name": "feed_tb_1100_donavet_excel", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\feed\\feed_tb\\feed_tb_1100_donavet_excel.sql", "original_file_path": "models\\group\\intermediate\\feed\\feed_tb\\feed_tb_1100_donavet_excel.sql", "unique_id": "model.sales_group.feed_tb_1100_donavet_excel", "fqn": ["sales_group", "group", "intermediate", "feed", "feed_tb", "feed_tb_1100_donavet_excel"], "alias": "feed_tb_1100_donavet_excel", "checksum": {"name": "sha256", "checksum": "c6a31341d9cd85a15d5c2becad0c1e621dc19dc25238a379403c17e5bfb5c8df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.4474912, "relation_name": "\"food\".\"nghi_dev\".\"feed_tb_1100_donavet_excel\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        \"excel\", ref(\"feed_stg_excel_donavet_tb_donavet_1100\"), '10','donavet'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "feed_stg_excel_donavet_tb_donavet_1100", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.feed_stg_excel_donavet_tb_donavet_1100"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_pl_3000_and_3100": {"database": "food", "schema": "nghi_dev", "name": "food_pl_3000_and_3100", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\food\\food_p_l\\food_pl_3000_and_3100.sql", "original_file_path": "models\\group\\intermediate\\food\\food_p_l\\food_pl_3000_and_3100.sql", "unique_id": "model.sales_group.food_pl_3000_and_3100", "fqn": ["sales_group", "group", "intermediate", "food", "food_p_l", "food_pl_3000_and_3100"], "alias": "food_pl_3000_and_3100", "checksum": {"name": "sha256", "checksum": "6167a9e81515b649b8093741e160dfb9864ca080e1762d2d05b77de32dff2946"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.4547524, "relation_name": "\"food\".\"nghi_dev\".\"food_pl_3000_and_3100\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        \"sap_s4\", ref(\"food_stg_sap_s4__fi_0fi_gl_12\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "food_stg_sap_s4__fi_0fi_gl_12", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.food_stg_sap_s4__fi_0fi_gl_12"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_pl_3200_lbc": {"database": "food", "schema": "nghi_dev", "name": "food_pl_3200_lbc", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\food\\food_p_l\\food_pl_3200_lbc.sql", "original_file_path": "models\\group\\intermediate\\food\\food_p_l\\food_pl_3200_lbc.sql", "unique_id": "model.sales_group.food_pl_3200_lbc", "fqn": ["sales_group", "group", "intermediate", "food", "food_p_l", "food_pl_3200_lbc"], "alias": "food_pl_3200_lbc", "checksum": {"name": "sha256", "checksum": "43355d08d50df50c6600cf02dcd5a9337b768fd689ef94e046b2076d46d329bd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.4615316, "relation_name": "\"food\".\"nghi_dev\".\"food_pl_3200_lbc\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        \"excel\", ref(\"food_stg_excel_misa_lbc_tp_lbc_3200_v2\"), '10','lbc'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "food_stg_excel_misa_lbc_tp_lbc_3200_v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.food_stg_excel_misa_lbc_tp_lbc_3200_v2"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_tb_3000_and_3100": {"database": "food", "schema": "nghi_dev", "name": "food_tb_3000_and_3100", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\food\\food_tb\\food_tb_3000_and_3100.sql", "original_file_path": "models\\group\\intermediate\\food\\food_tb\\food_tb_3000_and_3100.sql", "unique_id": "model.sales_group.food_tb_3000_and_3100", "fqn": ["sales_group", "group", "intermediate", "food", "food_tb", "food_tb_3000_and_3100"], "alias": "food_tb_3000_and_3100", "checksum": {"name": "sha256", "checksum": "569d9582af9ad3091cbe385c41056ba9e1fdb64cc477bd98bbd16c6023b897a8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.4684124, "relation_name": "\"food\".\"nghi_dev\".\"food_tb_3000_and_3100\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        \"sap_s4\", ref(\"food_stg_sap_s4__fi_0fi_gl_12\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "food_stg_sap_s4__fi_0fi_gl_12", "package": null, "version": null}, {"name": "consol_fiscal_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.food_stg_sap_s4__fi_0fi_gl_12", "model.sales_group.consol_fiscal_period"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_tb_3200_lbc": {"database": "food", "schema": "nghi_dev", "name": "food_tb_3200_lbc", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\food\\food_tb\\food_tb_3200_lbc.sql", "original_file_path": "models\\group\\intermediate\\food\\food_tb\\food_tb_3200_lbc.sql", "unique_id": "model.sales_group.food_tb_3200_lbc", "fqn": ["sales_group", "group", "intermediate", "food", "food_tb", "food_tb_3200_lbc"], "alias": "food_tb_3200_lbc", "checksum": {"name": "sha256", "checksum": "44d63cdce31e30cdcc31904a5d0f7b5c0739d682996e86a6c5ce7d09d9acf526"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.4744627, "relation_name": "\"food\".\"nghi_dev\".\"food_tb_3200_lbc\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        \"excel\", ref(\"food_stg_excel_misa_lbc_tp_lbc_3200_v2\"), '10','lbc'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "food_stg_excel_misa_lbc_tp_lbc_3200_v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.food_stg_excel_misa_lbc_tp_lbc_3200_v2"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.qdt_pl_4200_solomon": {"database": "food", "schema": "nghi_dev", "name": "qdt_pl_4200_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\qdt\\qdt_pl\\qdt_pl_4200_solomon.sql", "original_file_path": "models\\group\\intermediate\\qdt\\qdt_pl\\qdt_pl_4200_solomon.sql", "unique_id": "model.sales_group.qdt_pl_4200_solomon", "fqn": ["sales_group", "group", "intermediate", "qdt", "qdt_pl", "qdt_pl_4200_solomon"], "alias": "qdt_pl_4200_solomon", "checksum": {"name": "sha256", "checksum": "379e3e1abaa67685d04c28550e4285ae44c74e4ce7604a1c446129fdd9aabffd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.480512, "relation_name": "\"food\".\"nghi_dev\".\"qdt_pl_4200_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        \"solomon\", ref(\"qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.qdt_tb_4200_solomon": {"database": "food", "schema": "nghi_dev", "name": "qdt_tb_4200_solomon", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\qdt\\qdt_tb\\qdt_tb_4200_solomon.sql", "original_file_path": "models\\group\\intermediate\\qdt\\qdt_tb\\qdt_tb_4200_solomon.sql", "unique_id": "model.sales_group.qdt_tb_4200_solomon", "fqn": ["sales_group", "group", "intermediate", "qdt", "qdt_tb", "qdt_tb_4200_solomon"], "alias": "qdt_tb_4200_solomon", "checksum": {"name": "sha256", "checksum": "566479e09f50e1e698aba55723bec3d1675564948b631de6dd8d344a31398dd6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.48704, "relation_name": "\"food\".\"nghi_dev\".\"qdt_tb_4200_solomon\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        \"solomon\", ref(\"qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final\"), '10'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_pl_4000_qdtek": {"database": "food", "schema": "nghi_dev", "name": "tech_pl_4000_qdtek", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\tech\\tech_pl\\tech_pl_4000_qdtek.sql", "original_file_path": "models\\group\\intermediate\\tech\\tech_pl\\tech_pl_4000_qdtek.sql", "unique_id": "model.sales_group.tech_pl_4000_qdtek", "fqn": ["sales_group", "group", "intermediate", "tech", "tech_pl", "tech_pl_4000_qdtek"], "alias": "tech_pl_4000_qdtek", "checksum": {"name": "sha256", "checksum": "c99a995e3a29811d344cbb8f7dafe5ea06dc910468b75489396f4cf897e5ffa6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.4942515, "relation_name": "\"food\".\"nghi_dev\".\"tech_pl_4000_qdtek\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        \"excel\", ref(\"tech_stg_excel_qdtek_tb_south_north_4000\"), '10','qdtek'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "tech_stg_excel_qdtek_tb_south_north_4000", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.tech_stg_excel_qdtek_tb_south_north_4000"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_pl_4001_qdtek_north": {"database": "food", "schema": "nghi_dev", "name": "tech_pl_4001_qdtek_north", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\tech\\tech_pl\\tech_pl_4001_qdtek_north.sql", "original_file_path": "models\\group\\intermediate\\tech\\tech_pl\\tech_pl_4001_qdtek_north.sql", "unique_id": "model.sales_group.tech_pl_4001_qdtek_north", "fqn": ["sales_group", "group", "intermediate", "tech", "tech_pl", "tech_pl_4001_qdtek_north"], "alias": "tech_pl_4001_qdtek_north", "checksum": {"name": "sha256", "checksum": "30ebfebfb08a681ca126f1d38f1a28d5447be728c1ee9547089671dc0dc06ba7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.5006151, "relation_name": "\"food\".\"nghi_dev\".\"tech_pl_4001_qdtek_north\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        \"excel\", ref(\"tech_stg_excel_qdtek_tb_north_4001\"), '10','4001'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "tech_stg_excel_qdtek_tb_north_4001", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.tech_stg_excel_qdtek_tb_north_4001"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_pl_4002_qdtek_south": {"database": "food", "schema": "nghi_dev", "name": "tech_pl_4002_qdtek_south", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\tech\\tech_pl\\tech_pl_4002_qdtek_south.sql", "original_file_path": "models\\group\\intermediate\\tech\\tech_pl\\tech_pl_4002_qdtek_south.sql", "unique_id": "model.sales_group.tech_pl_4002_qdtek_south", "fqn": ["sales_group", "group", "intermediate", "tech", "tech_pl", "tech_pl_4002_qdtek_south"], "alias": "tech_pl_4002_qdtek_south", "checksum": {"name": "sha256", "checksum": "e5aefd96b367e51ea2026ee8405b4f422b557c1a504ea882dcc5ebd619af1f57"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.5086465, "relation_name": "\"food\".\"nghi_dev\".\"tech_pl_4002_qdtek_south\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        \"excel\", ref(\"tech_stg_excel_qdtek_tb_south_4002\"), '10','4002'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "tech_stg_excel_qdtek_tb_south_4002", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.tech_stg_excel_qdtek_tb_south_4002"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_pl_4300_ntt": {"database": "food", "schema": "nghi_dev", "name": "tech_pl_4300_ntt", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\tech\\tech_pl\\tech_pl_4300_ntt.sql", "original_file_path": "models\\group\\intermediate\\tech\\tech_pl\\tech_pl_4300_ntt.sql", "unique_id": "model.sales_group.tech_pl_4300_ntt", "fqn": ["sales_group", "group", "intermediate", "tech", "tech_pl", "tech_pl_4300_ntt"], "alias": "tech_pl_4300_ntt", "checksum": {"name": "sha256", "checksum": "657fabfff6b1dc1a00c934890204fe65dc44e3732fa17b1eeeee825e046b9c84"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.515648, "relation_name": "\"food\".\"nghi_dev\".\"tech_pl_4300_ntt\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_p_l(\r\n        \"excel\", ref(\"tech_stg_excel_ntt_tb_ntt_4300\"), '10','ntt'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "tech_stg_excel_ntt_tb_ntt_4300", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_p_l"], "nodes": ["model.sales_group.tech_stg_excel_ntt_tb_ntt_4300"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_tb_4000_qdtek": {"database": "food", "schema": "nghi_dev", "name": "tech_tb_4000_qdtek", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\tech\\tech_tb\\tech_tb_4000_qdtek.sql", "original_file_path": "models\\group\\intermediate\\tech\\tech_tb\\tech_tb_4000_qdtek.sql", "unique_id": "model.sales_group.tech_tb_4000_qdtek", "fqn": ["sales_group", "group", "intermediate", "tech", "tech_tb", "tech_tb_4000_qdtek"], "alias": "tech_tb_4000_qdtek", "checksum": {"name": "sha256", "checksum": "c59c106813d5a85247e16d41ca21a26a86c3da1cbea8540d47327386286b8e72"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.5229335, "relation_name": "\"food\".\"nghi_dev\".\"tech_tb_4000_qdtek\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        \"excel\", ref(\"tech_stg_excel_qdtek_tb_south_north_4000\"), '10','qdtek'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "tech_stg_excel_qdtek_tb_south_north_4000", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.tech_stg_excel_qdtek_tb_south_north_4000"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_tb_4300_ntt": {"database": "food", "schema": "nghi_dev", "name": "tech_tb_4300_ntt", "resource_type": "model", "package_name": "sales_group", "path": "group\\intermediate\\tech\\tech_tb\\tech_tb_4300_ntt.sql", "original_file_path": "models\\group\\intermediate\\tech\\tech_tb\\tech_tb_4300_ntt.sql", "unique_id": "model.sales_group.tech_tb_4300_ntt", "fqn": ["sales_group", "group", "intermediate", "tech", "tech_tb", "tech_tb_4300_ntt"], "alias": "tech_tb_4300_ntt", "checksum": {"name": "sha256", "checksum": "9768c69e5960bdf298e931724804d4a0eb421f5d721e9a373423feff43d39e9b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.561376, "relation_name": "\"food\".\"nghi_dev\".\"tech_tb_4300_ntt\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\n\r\n{{\r\n    apply_logic_process_data_consolidates(\r\n        \"excel\", ref(\"tech_stg_excel_ntt_tb_ntt_4300\"), '10','ntt'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "tech_stg_excel_ntt_tb_ntt_4300", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.apply_logic_process_data_consolidates"], "nodes": ["model.sales_group.tech_stg_excel_ntt_tb_ntt_4300"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.financial_profit_loss": {"database": "group", "schema": "nghi_dev", "name": "financial_profit_loss", "resource_type": "model", "package_name": "sales_group", "path": "group\\marts\\finance\\financial_profit_loss.sql", "original_file_path": "models\\group\\marts\\finance\\financial_profit_loss.sql", "unique_id": "model.sales_group.financial_profit_loss", "fqn": ["sales_group", "group", "marts", "finance", "financial_profit_loss"], "alias": "financial_profit_loss", "checksum": {"name": "sha256", "checksum": "b41333761af196a29322436ed0b139c144cfa70eae78b564bef30bb95936dbfd"}, "config": {"enabled": true, "alias": "financial_profit_loss", "schema": "marts_finance", "database": "group", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\group\\marts\\finance\\_group_finance__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "group", "bind": "{{ true if target.name == 'prod' else false }}", "schema": "marts_finance", "alias": "financial_profit_loss", "materialized": "table", "ra3_node": true}, "created_at": 1692186447.1010234, "relation_name": "\"group\".\"nghi_dev\".\"financial_profit_loss\"", "raw_code": "with\r\n\r\np_and_l as (\r\n        \r\n  {{ get_data_one_legal(ref(\"food_pl_3000_and_3100\")) }}\r\n\r\n    union all\r\n\r\n  {{ get_data_one_legal(ref(\"farm_pl_1000_solomon\")) }}\r\n\r\n    union all\r\n\r\n  {{ get_data_one_legal(ref(\"farm_pl_2000_solomon_dong_nam_bo\")) }}\r\n\r\n    union all\r\n\r\n  {{ get_data_one_legal(ref(\"farm_pl_2000_solomon\")) }}\r\n\r\n    union all\r\n\r\n  {{ get_data_one_legal(ref(\"farm_pl_2100_solomon\")) }}\r\n\r\n    union all\r\n  \r\n  {{ get_data_one_legal(ref(\"farm_pl_2200_1001_solomon\")) }}\r\n\r\n    union all\r\n\r\n  {{ get_data_one_legal(ref(\"farm_pl_2200_2001_solomon\")) }}\r\n\r\n    union all\r\n  \r\n  {{ get_data_one_legal(ref(\"farm_pl_2200_2002_solomon\")) }}\r\n\r\n    union all\r\n  \r\n  {{ get_data_one_legal(ref(\"farm_pl_2300_solomon\")) }}\r\n\r\n    union all\r\n  \r\n  {{ get_data_one_legal(ref(\"farm_pl_5000_cam_solomon\")) }}\r\n\r\n    union all\r\n\r\n  {{ get_data_one_legal(ref(\"farm_pl_5000_cbd1001_solomon\")) }}\r\n\r\n     union all\r\n  \r\n  {{ get_data_one_legal(ref(\"farm_pl_5000_star_solomon\")) }}\r\n\r\n    union all\r\n\r\n  {{ get_data_one_legal(ref(\"farm_pl_5100_solomon\")) }}\r\n\r\n    union all\r\n\r\n  {{ get_data_one_legal(ref(\"farm_pl_5200_solomon\")) }}\r\n\r\n    union all\r\n\r\n  {{ get_data_one_legal(ref(\"feed_pl_1000_dnb_solomon\")) }}\r\n\r\n    union all\r\n  \r\n  {{ get_data_one_legal(ref(\"feed_pl_1000_sap\")) }}\r\n\r\n    union all\r\n  \r\n  {{ get_data_one_legal(ref(\"feed_pl_1100_donavet_excel\")) }}\r\n\r\n    union all\r\n  \r\n  {{ get_data_one_legal(ref(\"food_pl_3200_lbc\")) }}\r\n\r\n    union all\r\n    \r\n  {{ get_data_one_legal(ref(\"qdt_pl_4200_solomon\")) }}\r\n\r\n    union all\r\n  \r\n  {{ get_data_one_legal(ref(\"tech_pl_4001_qdtek_north\")) }}\r\n\r\n    union all\r\n  \r\n  {{ get_data_one_legal(ref(\"tech_pl_4002_qdtek_south\")) }}\r\n\r\n    union all\r\n  \r\n  {{ get_data_one_legal(ref(\"tech_pl_4300_ntt\")) }}\r\n)\r\nselect\r\n    legal,\r\n    period,\r\n    {# code, #}\r\n    curtype,\r\n    racct as gl_account,\r\n    profit_center,\r\n    sum(balance) balance\r\nfrom p_and_l\r\ngroup by legal\r\n    , period\r\n    , curtype\r\n    , gl_account\r\n    , profit_center", "language": "sql", "refs": [{"name": "food_pl_3000_and_3100", "package": null, "version": null}, {"name": "farm_pl_1000_solomon", "package": null, "version": null}, {"name": "farm_pl_2000_solomon_dong_nam_bo", "package": null, "version": null}, {"name": "farm_pl_2000_solomon", "package": null, "version": null}, {"name": "farm_pl_2100_solomon", "package": null, "version": null}, {"name": "farm_pl_2200_1001_solomon", "package": null, "version": null}, {"name": "farm_pl_2200_2001_solomon", "package": null, "version": null}, {"name": "farm_pl_2200_2002_solomon", "package": null, "version": null}, {"name": "farm_pl_2300_solomon", "package": null, "version": null}, {"name": "farm_pl_5000_cam_solomon", "package": null, "version": null}, {"name": "farm_pl_5000_cbd1001_solomon", "package": null, "version": null}, {"name": "farm_pl_5000_star_solomon", "package": null, "version": null}, {"name": "farm_pl_5100_solomon", "package": null, "version": null}, {"name": "farm_pl_5200_solomon", "package": null, "version": null}, {"name": "feed_pl_1000_dnb_solomon", "package": null, "version": null}, {"name": "feed_pl_1000_sap", "package": null, "version": null}, {"name": "feed_pl_1100_donavet_excel", "package": null, "version": null}, {"name": "food_pl_3200_lbc", "package": null, "version": null}, {"name": "qdt_pl_4200_solomon", "package": null, "version": null}, {"name": "tech_pl_4001_qdtek_north", "package": null, "version": null}, {"name": "tech_pl_4002_qdtek_south", "package": null, "version": null}, {"name": "tech_pl_4300_ntt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.get_data_one_legal"], "nodes": ["model.sales_group.food_pl_3000_and_3100", "model.sales_group.farm_pl_1000_solomon", "model.sales_group.farm_pl_2000_solomon_dong_nam_bo", "model.sales_group.farm_pl_2000_solomon", "model.sales_group.farm_pl_2100_solomon", "model.sales_group.farm_pl_2200_1001_solomon", "model.sales_group.farm_pl_2200_2001_solomon", "model.sales_group.farm_pl_2200_2002_solomon", "model.sales_group.farm_pl_2300_solomon", "model.sales_group.farm_pl_5000_cam_solomon", "model.sales_group.farm_pl_5000_cbd1001_solomon", "model.sales_group.farm_pl_5000_star_solomon", "model.sales_group.farm_pl_5100_solomon", "model.sales_group.farm_pl_5200_solomon", "model.sales_group.feed_pl_1000_dnb_solomon", "model.sales_group.feed_pl_1000_sap", "model.sales_group.feed_pl_1100_donavet_excel", "model.sales_group.food_pl_3200_lbc", "model.sales_group.qdt_pl_4200_solomon", "model.sales_group.tech_pl_4001_qdtek_north", "model.sales_group.tech_pl_4002_qdtek_south", "model.sales_group.tech_pl_4300_ntt"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.financial_statements": {"database": "group", "schema": "nghi_dev", "name": "financial_statements", "resource_type": "model", "package_name": "sales_group", "path": "group\\marts\\finance\\financial_statements.sql", "original_file_path": "models\\group\\marts\\finance\\financial_statements.sql", "unique_id": "model.sales_group.financial_statements", "fqn": ["sales_group", "group", "marts", "finance", "financial_statements"], "alias": "financial_statements", "checksum": {"name": "sha256", "checksum": "34fe4327a06277adb3b1b3eda102a266e788c3853d4bc67985ffd32e0f8a4187"}, "config": {"enabled": true, "alias": "financial_statements", "schema": "marts_finance", "database": "group", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\group\\marts\\finance\\_group_finance__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "group", "bind": "{{ true if target.name == 'prod' else false }}", "schema": "marts_finance", "alias": "financial_statements", "materialized": "table", "ra3_node": true}, "created_at": 1692186447.097452, "relation_name": "\"group\".\"nghi_dev\".\"financial_statements\"", "raw_code": "with\r\n\r\ntb_combination as (\r\n        \r\n{{ get_data_entity(ref(\"farm_tb_1000_solomon\")) }}\r\n\r\n        union all\r\n\r\n{{ get_data_entity(ref(\"farm_tb_2000_solomon_dong_nam_bo\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"farm_tb_2000_solomon\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"farm_tb_2100_solomon\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"farm_tb_2200_1001_solomon\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"farm_tb_2200_2001_solomon\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"farm_tb_2200_2002_solomon\")) }}\r\n        \r\n        union all\r\n{{ get_data_entity(ref(\"farm_tb_2300_solomon\")) }}\r\n\r\n        union all\r\n\r\n{{ get_data_entity(ref(\"farm_tb_5000_cam_solomon\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"farm_tb_5000_star_solomon\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"farm_tb_5000_cbd1001_solomon\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"farm_tb_5100_solomon\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"farm_tb_5200_solomon\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"feed_tb_1000_dnb_solomon\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"feed_tb_1000_sap\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"feed_tb_1100_donavet_excel\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"food_tb_3200_lbc\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"food_tb_3000_and_3100\")) }}\r\n        union all\r\n{{ get_data_entity(ref(\"qdt_tb_4200_solomon\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"tech_tb_4000_qdtek\")) }}\r\n\r\n        union all\r\n{{ get_data_entity(ref(\"tech_tb_4300_ntt\")) }}\r\n\r\n    )\r\n\r\nselect\r\n    legal,\r\n    period,\r\n    {# code, #}\r\n    curtype,\r\n    racct as gl_account,\r\n    profit_center,\r\n    sum(balance) balance\r\nfrom tb_combination\r\ngroup by legal\r\n    , period\r\n    , curtype\r\n    , gl_account\r\n    , profit_center", "language": "sql", "refs": [{"name": "farm_tb_1000_solomon", "package": null, "version": null}, {"name": "farm_tb_2000_solomon_dong_nam_bo", "package": null, "version": null}, {"name": "farm_tb_2000_solomon", "package": null, "version": null}, {"name": "farm_tb_2100_solomon", "package": null, "version": null}, {"name": "farm_tb_2200_1001_solomon", "package": null, "version": null}, {"name": "farm_tb_2200_2001_solomon", "package": null, "version": null}, {"name": "farm_tb_2200_2002_solomon", "package": null, "version": null}, {"name": "farm_tb_2300_solomon", "package": null, "version": null}, {"name": "farm_tb_5000_cam_solomon", "package": null, "version": null}, {"name": "farm_tb_5000_star_solomon", "package": null, "version": null}, {"name": "farm_tb_5000_cbd1001_solomon", "package": null, "version": null}, {"name": "farm_tb_5100_solomon", "package": null, "version": null}, {"name": "farm_tb_5200_solomon", "package": null, "version": null}, {"name": "feed_tb_1000_dnb_solomon", "package": null, "version": null}, {"name": "feed_tb_1000_sap", "package": null, "version": null}, {"name": "feed_tb_1100_donavet_excel", "package": null, "version": null}, {"name": "food_tb_3200_lbc", "package": null, "version": null}, {"name": "food_tb_3000_and_3100", "package": null, "version": null}, {"name": "qdt_tb_4200_solomon", "package": null, "version": null}, {"name": "tech_tb_4000_qdtek", "package": null, "version": null}, {"name": "tech_tb_4300_ntt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sales_group.get_data_entity"], "nodes": ["model.sales_group.farm_tb_1000_solomon", "model.sales_group.farm_tb_2000_solomon_dong_nam_bo", "model.sales_group.farm_tb_2000_solomon", "model.sales_group.farm_tb_2100_solomon", "model.sales_group.farm_tb_2200_1001_solomon", "model.sales_group.farm_tb_2200_2001_solomon", "model.sales_group.farm_tb_2200_2002_solomon", "model.sales_group.farm_tb_2300_solomon", "model.sales_group.farm_tb_5000_cam_solomon", "model.sales_group.farm_tb_5000_star_solomon", "model.sales_group.farm_tb_5000_cbd1001_solomon", "model.sales_group.farm_tb_5100_solomon", "model.sales_group.farm_tb_5200_solomon", "model.sales_group.feed_tb_1000_dnb_solomon", "model.sales_group.feed_tb_1000_sap", "model.sales_group.feed_tb_1100_donavet_excel", "model.sales_group.food_tb_3200_lbc", "model.sales_group.food_tb_3000_and_3100", "model.sales_group.qdt_tb_4200_solomon", "model.sales_group.tech_tb_4000_qdtek", "model.sales_group.tech_tb_4300_ntt"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.financial_statements_backup": {"database": "food", "schema": "nghi_dev", "name": "financial_statements_backup", "resource_type": "model", "package_name": "sales_group", "path": "group\\marts\\finance\\financial_statements_backup.sql", "original_file_path": "models\\group\\marts\\finance\\financial_statements_backup.sql", "unique_id": "model.sales_group.financial_statements_backup", "fqn": ["sales_group", "group", "marts", "finance", "financial_statements_backup"], "alias": "financial_statements_backup", "checksum": {"name": "sha256", "checksum": "ebf2f28c3a637f40e843b6995ddb03b3b8bb84d2f63c49c14c19bfb8bf629640"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186446.5944078, "relation_name": "\"food\".\"nghi_dev\".\"financial_statements_backup\"", "raw_code": "select * from {{ ref(\"consol_balance_sheet_backup\") }}", "language": "sql", "refs": [{"name": "consol_balance_sheet_backup", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.consol_balance_sheet_backup"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.mapping_md_balance_sheet_code": {"database": "food", "schema": "nghi_dev", "name": "mapping_md_balance_sheet_code", "resource_type": "model", "package_name": "sales_group", "path": "group\\marts\\finance\\mapping_md_balance_sheet_code.sql", "original_file_path": "models\\group\\marts\\finance\\mapping_md_balance_sheet_code.sql", "unique_id": "model.sales_group.mapping_md_balance_sheet_code", "fqn": ["sales_group", "group", "marts", "finance", "mapping_md_balance_sheet_code"], "alias": "mapping_md_balance_sheet_code", "checksum": {"name": "sha256", "checksum": "9bcc81178e5d2ff904e9ec569415cc0b521d8f2c45a9d19eda86f4dee07b1184"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'group' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}"}, "created_at": 1692186446.5974076, "relation_name": "\"food\".\"nghi_dev\".\"mapping_md_balance_sheet_code\"", "raw_code": "select distinct caption, criterias, code from {{ ref(\"mapping_md_bs\") }}", "language": "sql", "refs": [{"name": "mapping_md_bs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.mapping_md_bs"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.mapping_md_p_l_account": {"database": "group", "schema": "nghi_dev", "name": "mapping_md_p_l_account", "resource_type": "model", "package_name": "sales_group", "path": "group\\marts\\finance\\mapping_md_p_l_account.sql", "original_file_path": "models\\group\\marts\\finance\\mapping_md_p_l_account.sql", "unique_id": "model.sales_group.mapping_md_p_l_account", "fqn": ["sales_group", "group", "marts", "finance", "mapping_md_p_l_account"], "alias": "mapping_md_p_l_account", "checksum": {"name": "sha256", "checksum": "122d7302457dc008c0dc00b464973e79c864b9a8e675ae2248fb5943b423e396"}, "config": {"enabled": true, "alias": "mapping_md_p_l_account", "schema": "marts_finance", "database": "group", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\group\\marts\\finance\\_group_finance__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "group", "bind": "{{ true if target.name == 'prod' else false }}", "schema": "marts_finance", "alias": "mapping_md_p_l_account", "materialized": "table", "ra3_node": true}, "created_at": 1692186447.104078, "relation_name": "\"group\".\"nghi_dev\".\"mapping_md_p_l_account\"", "raw_code": "select * from {{ ref('mapping_md_p_and_l_account') }}", "language": "sql", "refs": [{"name": "mapping_md_p_and_l_account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.mapping_md_p_and_l_account"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final": {"database": "food", "schema": "nghi_dev", "name": "qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final", "resource_type": "model", "package_name": "sales_group", "path": "qdt\\staging\\sol\\qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final.sql", "original_file_path": "models\\qdt\\staging\\sol\\qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final.sql", "unique_id": "model.sales_group.qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final", "fqn": ["sales_group", "qdt", "staging", "sol", "qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final"], "alias": "qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final", "checksum": {"name": "sha256", "checksum": "1cff5500678b987f8a38b7d236885839f2f3c756c0a5c3d544d2c63499a1a6bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1692186446.6036224, "relation_name": "\"food\".\"nghi_dev\".\"qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"qdt_sol_log5001app\", \"xp_01610ab_accthist_erp_final\") }}", "language": "sql", "refs": [], "sources": [["qdt_sol_log5001app", "xp_01610ab_accthist_erp_final"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.qdt_sol_log5001app.xp_01610ab_accthist_erp_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_int_sales__actual_sales__joined": {"database": "food", "schema": "nghi_dev", "name": "tech_qdtek_int_sales__actual_sales__joined", "resource_type": "model", "package_name": "sales_group", "path": "tech\\intermediate\\sales\\tech_qdtek_int_sales__actual_sales__joined.sql", "original_file_path": "models\\tech\\intermediate\\sales\\tech_qdtek_int_sales__actual_sales__joined.sql", "unique_id": "model.sales_group.tech_qdtek_int_sales__actual_sales__joined", "fqn": ["sales_group", "tech", "intermediate", "sales", "tech_qdtek_int_sales__actual_sales__joined"], "alias": "tech_qdtek_int_sales__actual_sales__joined", "checksum": {"name": "sha256", "checksum": "f4f71f26d53171df669c517aefbaf98a5dd44c2147295d90c08341a1e069790c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.6066315, "relation_name": "\"food\".\"nghi_dev\".\"tech_qdtek_int_sales__actual_sales__joined\"", "raw_code": "with\r\n    raw_data as (\r\n        select\r\n            dailysales.billing_number,\r\n            dailysales.billing_date,\r\n            dailysales.billing_type_name,\r\n\r\n            case\r\n                when\r\n                    dailysales.billing_type_name = 'Nh?p hang ban tr? l?i'\r\n                    or dailysales.billing_type_name is null\r\n                    -- TO-DO: What the fuck is this?? :D\r\n                    and 'Nh?p hang ban tr? l?i' is null\r\n                then 'ZRE'\r\n                when\r\n                    dailysales.billing_type_name = 'Ban hang'\r\n                    or dailysales.billing_type_name is null\r\n                    -- TO-DO: What the fuck is this?? :D\r\n                    and 'Ban hang' is null\r\n                then 'ZF2'\r\n                else null\r\n            end as billing_type_code,\r\n\r\n            case\r\n                when salesman.old_sales_code = salesman.new_sales_code\r\n                then salesman.old_sales_code\r\n                when salesman.old_sales_code is null\r\n                then salesman.new_sales_code\r\n                else salesman.old_sales_code\r\n            end as sales_code,\r\n\r\n            dailysales.customer_group_name,\r\n            dailysales.article_code,\r\n            '-' as article_name,\r\n            dailysales.article_group,\r\n            dailysales.article_group_name,\r\n            dailysales.article_group_code,\r\n            dailysales.debit,\r\n            dailysales.rebate,\r\n            dailysales.credit,\r\n            dailysales.discount,\r\n            dailysales.increase,\r\n            dailysales.cogs_debit,\r\n            dailysales.cogs_credit,\r\n            dailysales.customer_id,\r\n            dailysales.customer_name,\r\n            dailysales.salesman_id,\r\n            dailysales.salesman_name,\r\n\r\n            case\r\n                when salesman.old_sales_code = salesman.new_sales_code\r\n                then salesman.team_code\r\n                when salesman.old_sales_code is null\r\n                then salesman.team_code\r\n                else salesman.team_code\r\n            end as team_code,\r\n\r\n            case\r\n                when salesman.old_sales_code = salesman.new_sales_code\r\n                then\r\n                    case\r\n                        when right(salesman.team_code, 2) = 'MB'\r\n                        then 'NORTH'\r\n                        else 'SOUTH'\r\n                    end\r\n\r\n                when salesman.old_sales_code is null\r\n                then\r\n                    case\r\n                        when right(salesman.team_code, 2) = 'MB'\r\n                        then 'NORTH'\r\n                        else 'SOUTH'\r\n                    end\r\n                else\r\n                    case\r\n                        when right(salesman.team_code, 2) = 'MB'\r\n                        then 'NORTH'\r\n                        else 'SOUTH'\r\n                    end\r\n            end as region_code,\r\n\r\n            team.team as old_team_code,\r\n            team.region as old_region_code,\r\n            team.industry as old_industry_code\r\n\r\n        from {{ ref(\"tech_qdtek_stg_excel_sales__daily_sales\") }} dailysales\r\n        left join\r\n            {{ ref(\"tech_qdtek_stg_excel_sales__salesman\") }} salesman\r\n            on dailysales.salesman_id = salesman.old_sales_code\r\n            and dailysales.salesman_id = salesman.new_sales_code\r\n        left join {{ ref(\"team\") }} team on salesman.team_code = team.team\r\n    ),\r\n\r\n    ultimate as (\r\n        select\r\n            (debit - rebate - discount - credit + increase) as actual_amount,\r\n            case\r\n                when\r\n                    salesman_id = 'TEKN144'\r\n                    and split_part(billing_date, '-', 1) = '2023'\r\n                then '612870'\r\n                else salesman_id\r\n            end as change_amount,\r\n            article_group as product_code,\r\n            *\r\n        from raw_data\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_stg_excel_sales__daily_sales", "package": null, "version": null}, {"name": "tech_qdtek_stg_excel_sales__salesman", "package": null, "version": null}, {"name": "team", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_stg_excel_sales__daily_sales", "model.sales_group.tech_qdtek_stg_excel_sales__salesman", "seed.sales_group.team"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_int_sales__churn__grouped_by_customer": {"database": "food", "schema": "nghi_dev", "name": "tech_qdtek_int_sales__churn__grouped_by_customer", "resource_type": "model", "package_name": "sales_group", "path": "tech\\intermediate\\sales\\tech_qdtek_int_sales__churn__grouped_by_customer.sql", "original_file_path": "models\\tech\\intermediate\\sales\\tech_qdtek_int_sales__churn__grouped_by_customer.sql", "unique_id": "model.sales_group.tech_qdtek_int_sales__churn__grouped_by_customer", "fqn": ["sales_group", "tech", "intermediate", "sales", "tech_qdtek_int_sales__churn__grouped_by_customer"], "alias": "tech_qdtek_int_sales__churn__grouped_by_customer", "checksum": {"name": "sha256", "checksum": "406d1ebfe0ee71b81a445aea680fdc0c00036804ea16d1e54c8187a3b1ea884a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.6096206, "relation_name": "\"food\".\"nghi_dev\".\"tech_qdtek_int_sales__churn__grouped_by_customer\"", "raw_code": "with\r\n    raw_data as (\r\n        select customer_id, billing_date, actual_amount\r\n        from {{ ref(\"tech_qdtek_int_sales__actual_sales__joined\") }}\r\n    ),\r\n\r\n    ultimate as (\r\n        select\r\n            customer_id,\r\n            max(billing_date) as latest_order,\r\n            sum(actual_amount) as sum_amount\r\n        from raw_data\r\n        group by customer_id\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__actual_sales__joined", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__actual_sales__joined"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_int_sales__customer_classs__grouped_by_month": {"database": "food", "schema": "nghi_dev", "name": "tech_qdtek_int_sales__customer_classs__grouped_by_month", "resource_type": "model", "package_name": "sales_group", "path": "tech\\intermediate\\sales\\tech_qdtek_int_sales__customer_classs__grouped_by_month.sql", "original_file_path": "models\\tech\\intermediate\\sales\\tech_qdtek_int_sales__customer_classs__grouped_by_month.sql", "unique_id": "model.sales_group.tech_qdtek_int_sales__customer_classs__grouped_by_month", "fqn": ["sales_group", "tech", "intermediate", "sales", "tech_qdtek_int_sales__customer_classs__grouped_by_month"], "alias": "tech_qdtek_int_sales__customer_classs__grouped_by_month", "checksum": {"name": "sha256", "checksum": "71f20d7bd931baefa3f8276ec7496d53c8e7b56c6e66e15cd8e8bc9e77582f4d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.6126215, "relation_name": "\"food\".\"nghi_dev\".\"tech_qdtek_int_sales__customer_classs__grouped_by_month\"", "raw_code": "with\r\n    raw_data as (\r\n        select * from {{ ref(\"tech_qdtek_int_sales__actual_sales__joined\") }}\r\n    ),\r\n\r\n    ultimate as (\r\n        select\r\n            (left(billing_date, 4)::int) as year,\r\n            (substring(billing_date, 6, 2)::int) as month,\r\n\r\n            case\r\n                when substring(billing_date, 6, 2)::int > 12\r\n                then 0\r\n                else substring(billing_date, 6, 2)::int\r\n            end as new_month,\r\n\r\n            customer_id,\r\n            old_team_code,\r\n            old_region_code,\r\n            old_industry_code,\r\n            salesman_id,\r\n            sum(actual_amount) as net_amount,\r\n\r\n            case\r\n                when sum(actual_amount) >= 3000000000\r\n                then 1\r\n                when sum(actual_amount) >= 1000000000\r\n                then 2\r\n                when sum(actual_amount) >= 500000000\r\n                then 3\r\n                when sum(actual_amount) > 0\r\n                then 4\r\n                else 5\r\n            end as customer_class\r\n\r\n        from raw_data\r\n        group by\r\n            left(billing_date, 4),\r\n            substring(billing_date, 6, 2),\r\n            customer_id,\r\n            old_team_code,\r\n            old_region_code,\r\n            old_industry_code,\r\n            salesman_id\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__actual_sales__joined", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__actual_sales__joined"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_int_sales__material__distinct": {"database": "food", "schema": "nghi_dev", "name": "tech_qdtek_int_sales__material__distinct", "resource_type": "model", "package_name": "sales_group", "path": "tech\\intermediate\\sales\\tech_qdtek_int_sales__material__distinct.sql", "original_file_path": "models\\tech\\intermediate\\sales\\tech_qdtek_int_sales__material__distinct.sql", "unique_id": "model.sales_group.tech_qdtek_int_sales__material__distinct", "fqn": ["sales_group", "tech", "intermediate", "sales", "tech_qdtek_int_sales__material__distinct"], "alias": "tech_qdtek_int_sales__material__distinct", "checksum": {"name": "sha256", "checksum": "4d7e65afbc44ed2fbe1b0171a337d325971b386aec23fc77a3aeec06733d532c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.6156235, "relation_name": "\"food\".\"nghi_dev\".\"tech_qdtek_int_sales__material__distinct\"", "raw_code": "with\r\n    raw_data as (select * from {{ ref(\"tech_qdtek_stg_excel_sales__material\") }}),\r\n\r\n    ultimate as (\r\n        select distinct\r\n            system_product,\r\n            brand_name,\r\n            product_group_code,\r\n            case brand_code when 'KH\u00c1C' then 'OTHER' else brand_code end as brand_code,\r\n            upper(system_product) as product_code\r\n        from raw_data\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_stg_excel_sales__material", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_stg_excel_sales__material"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_int_sales__po_type__grouped_by_billing_number": {"database": "food", "schema": "nghi_dev", "name": "tech_qdtek_int_sales__po_type__grouped_by_billing_number", "resource_type": "model", "package_name": "sales_group", "path": "tech\\intermediate\\sales\\tech_qdtek_int_sales__po_type__grouped_by_billing_number.sql", "original_file_path": "models\\tech\\intermediate\\sales\\tech_qdtek_int_sales__po_type__grouped_by_billing_number.sql", "unique_id": "model.sales_group.tech_qdtek_int_sales__po_type__grouped_by_billing_number", "fqn": ["sales_group", "tech", "intermediate", "sales", "tech_qdtek_int_sales__po_type__grouped_by_billing_number"], "alias": "tech_qdtek_int_sales__po_type__grouped_by_billing_number", "checksum": {"name": "sha256", "checksum": "f0fef4420e14afdd9dffa481234802d5f21f3f8019761234f5fe270ee185bdf9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.6184635, "relation_name": "\"food\".\"nghi_dev\".\"tech_qdtek_int_sales__po_type__grouped_by_billing_number\"", "raw_code": "with\r\n    raw_data as (\r\n        select * from {{ ref(\"tech_qdtek_int_sales__actual_sales__joined\") }}\r\n    ),\r\n\r\n    ultimate as (\r\n        select\r\n            billing_number,\r\n            sum(actual_amount) as net_amount,\r\n            (\r\n                case\r\n                    when sum(actual_amount) >= 200000000\r\n                    then 'Type 1 (<= 200 Mil)'\r\n                    when sum(actual_amount) >= 100000000\r\n                    then 'Type 2 (>= 100 Mil)'\r\n                    when sum(actual_amount) >= 50000000\r\n                    then 'Type 3 (>= 50 Mil)'\r\n                    when sum(actual_amount) >= 10000000\r\n                    then 'Type 4 (>= 10 Mil)'\r\n                    else 'Type 5 (< 10 Mil)'\r\n                end\r\n            )::text as billing_type_name\r\n        from raw_data\r\n        group by billing_number\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__actual_sales__joined", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__actual_sales__joined"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_int_sales__salesman__distinct": {"database": "food", "schema": "nghi_dev", "name": "tech_qdtek_int_sales__salesman__distinct", "resource_type": "model", "package_name": "sales_group", "path": "tech\\intermediate\\sales\\tech_qdtek_int_sales__salesman__distinct.sql", "original_file_path": "models\\tech\\intermediate\\sales\\tech_qdtek_int_sales__salesman__distinct.sql", "unique_id": "model.sales_group.tech_qdtek_int_sales__salesman__distinct", "fqn": ["sales_group", "tech", "intermediate", "sales", "tech_qdtek_int_sales__salesman__distinct"], "alias": "tech_qdtek_int_sales__salesman__distinct", "checksum": {"name": "sha256", "checksum": "abeed3d5050c7180c081301e691b6c1180680bb1f80b27d76c2d6802d8914fd2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.621464, "relation_name": "\"food\".\"nghi_dev\".\"tech_qdtek_int_sales__salesman__distinct\"", "raw_code": "with\r\n    raw_data as (select * from {{ ref(\"tech_qdtek_stg_excel_sales__salesman\") }}),\r\n\r\n    ultimate as (\r\n        select distinct\r\n            team_code,\r\n            department_code,\r\n            branch_code,\r\n            sales_name,\r\n            case\r\n                upper(trim(new_sales_code))\r\n                when 'ADMIN'\r\n                then 'TEK305'\r\n                else upper(trim(new_sales_code))\r\n            end as new_sales_code,\r\n            case\r\n                upper(trim(old_sales_code))\r\n                when 'ADMIN'\r\n                then 'TEK305'\r\n                else upper(trim(old_sales_code))\r\n            end as old_sales_code\r\n        from raw_data\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_stg_excel_sales__salesman", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_stg_excel_sales__salesman"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__actual_sales": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__actual_sales", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__actual_sales.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__actual_sales.sql", "unique_id": "model.sales_group.tech_qdtek_sales__actual_sales", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__actual_sales"], "alias": "actual_sales", "checksum": {"name": "sha256", "checksum": "c77c693a69118d50b4237d37afec51b52c29c8a30dc2058043c3df8e68e7e4e3"}, "config": {"enabled": true, "alias": "actual_sales", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "actual_sales"}, "created_at": 1692186447.109113, "relation_name": "\"tech\".\"nghi_dev\".\"actual_sales\"", "raw_code": "with\r\n    ultimate as (select * from {{ ref(\"tech_qdtek_int_sales__actual_sales__joined\") }})\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__actual_sales__joined", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__actual_sales__joined"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__billings": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__billings", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__billings.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__billings.sql", "unique_id": "model.sales_group.tech_qdtek_sales__billings", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__billings"], "alias": "billings", "checksum": {"name": "sha256", "checksum": "41b26dfca3e5b182983820b2e2fcef5648e83c57041e22a88c3a8873dc637fe6"}, "config": {"enabled": true, "alias": "billings", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "billings"}, "created_at": 1692186447.119282, "relation_name": "\"tech\".\"nghi_dev\".\"billings\"", "raw_code": "with\r\n    ultimate as (\r\n        select *\r\n        from {{ ref(\"tech_qdtek_int_sales__po_type__grouped_by_billing_number\") }}\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__po_type__grouped_by_billing_number", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__po_type__grouped_by_billing_number"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__branches": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__branches", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__branches.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__branches.sql", "unique_id": "model.sales_group.tech_qdtek_sales__branches", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__branches"], "alias": "branches", "checksum": {"name": "sha256", "checksum": "1aea59c205d9e3e81ce80474ea55f12f0780c84fe939fe9559e6ec173238bf69"}, "config": {"enabled": true, "alias": "branches", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "branches"}, "created_at": 1692186447.1377695, "relation_name": "\"tech\".\"nghi_dev\".\"branches\"", "raw_code": "with\r\n    ultimate as (\r\n        select distinct branch_code\r\n        from {{ ref(\"tech_qdtek_int_sales__salesman__distinct\") }}\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__salesman__distinct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__salesman__distinct"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__brands": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__brands", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__brands.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__brands.sql", "unique_id": "model.sales_group.tech_qdtek_sales__brands", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__brands"], "alias": "brands", "checksum": {"name": "sha256", "checksum": "a802853563a8cce055b65fa026078a092b7423e03a0d8fbdf6373d2912acaecf"}, "config": {"enabled": true, "alias": "brands", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "brands"}, "created_at": 1692186447.1476254, "relation_name": "\"tech\".\"nghi_dev\".\"brands\"", "raw_code": "with\r\n    ultimate as (\r\n        select distinct brand_code\r\n        from {{ ref(\"tech_qdtek_int_sales__material__distinct\") }}\r\n        where brand_code is not null\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__material__distinct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__material__distinct"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__budgets": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__budgets", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__budgets.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__budgets.sql", "unique_id": "model.sales_group.tech_qdtek_sales__budgets", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__budgets"], "alias": "budgets", "checksum": {"name": "sha256", "checksum": "462ee31c88088954cce62658568f552db5009ed457f06994172637a1a9965e9c"}, "config": {"enabled": true, "alias": "budgets", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "budgets"}, "created_at": 1692186447.1272814, "relation_name": "\"tech\".\"nghi_dev\".\"budgets\"", "raw_code": "with\r\n    ultimate as (\r\n        select\r\n            year,\r\n            month,\r\n            team_code,\r\n            department_code,\r\n            branch_code,\r\n            region_code,\r\n            sales_name,\r\n            new_sales_code,\r\n            old_sales_code,\r\n            product_brand_name,\r\n\r\n            case\r\n                when upper(trim(product_brand_name)) = 'Kh\u00e1c'\r\n                then 'OTHER'\r\n                else upper(trim(product_brand_name))\r\n            end as product_brand_code,\r\n\r\n            product_group_name,\r\n            upper(trim(product_group_name)) as product_group_code,\r\n            \"brand / product\",\r\n\r\n            case\r\n                when \"target amt\u00a0m1/vnd\" is null then 0 else \"target amt\u00a0m1/vnd\"\r\n            end as \"target_amt_m1\",\r\n\r\n            case\r\n                when \"target amt\u00a0m3/vnd\" is null then 0 else \"target amt\u00a0m3/vnd\"\r\n            end as \"target_amt_m3\",\r\n\r\n            case\r\n                when \"net amt\u00a0/vnd\" is null then 0 else \"net amt\u00a0/vnd\"\r\n            end as \"net_amt\",\r\n\r\n            case when forecast is null then 0 else forecast end as forecast\r\n\r\n        from {{ ref(\"tech_qdtek_stg_excel_sales__budget\") }}\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_stg_excel_sales__budget", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_stg_excel_sales__budget"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__churns": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__churns", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__churns.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__churns.sql", "unique_id": "model.sales_group.tech_qdtek_sales__churns", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__churns"], "alias": "churns", "checksum": {"name": "sha256", "checksum": "86437af919eafc900045fec98a04a62f1a264b543d1939a48da6f451b62f8c17"}, "config": {"enabled": true, "alias": "churns", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "churns"}, "created_at": 1692186447.1133611, "relation_name": "\"tech\".\"nghi_dev\".\"churns\"", "raw_code": "with\r\n    ultimate as (\r\n        select * from {{ ref(\"tech_qdtek_int_sales__churn__grouped_by_customer\") }}\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__churn__grouped_by_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__churn__grouped_by_customer"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__customers": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__customers", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__customers.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__customers.sql", "unique_id": "model.sales_group.tech_qdtek_sales__customers", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__customers"], "alias": "customers", "checksum": {"name": "sha256", "checksum": "614ac2cd76df0a5af7a51368a9cf5effddfe208d128e6cbdf8179fb786859a0b"}, "config": {"enabled": true, "alias": "customers", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "customers"}, "created_at": 1692186447.1111126, "relation_name": "\"tech\".\"nghi_dev\".\"customers\"", "raw_code": "with\r\n    raw_data as (\r\n        select distinct customer_id, customer_name, customer_group_name\r\n        from {{ ref(\"tech_qdtek_int_sales__actual_sales__joined\") }}\r\n    ),\r\n\r\n    ultimate as (\r\n        select\r\n            customer_id,\r\n            split_part(\r\n                substring(replace(customer_group_name, '    ', '_'), 6), '_', 1\r\n            ) as customer_group_id,\r\n            split_part(\r\n                substring(replace(customer_group_name, '    ', '_'), 6), '_', 2\r\n            ) as old_customer_group_name,\r\n            replace(\r\n                customer_name,\r\n                'V\u1ed1n kinh doanh \u1edf c\u00e1c \u0111\u01a1n v\u1ecb tr\u1ef1c thu\u1ed9c',\r\n                'INTERAL_N\u1ed9i b\u1ed9'\r\n            ) as customer_name,\r\n            case\r\n                when\r\n                    split_part(\r\n                        substring(replace(customer_group_name, '    ', '_'), 6), '_', 2\r\n                    )\r\n                    = 'End-user'\r\n                then 'Key Account'\r\n                else\r\n                    split_part(\r\n                        substring(replace(customer_group_name, '    ', '_'), 6), '_', 2\r\n                    )\r\n            end as new_customer_group_name\r\n        from raw_data\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__actual_sales__joined", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__actual_sales__joined"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__customer_classes": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__customer_classes", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__customer_classes.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__customer_classes.sql", "unique_id": "model.sales_group.tech_qdtek_sales__customer_classes", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__customer_classes"], "alias": "customer_classes", "checksum": {"name": "sha256", "checksum": "7f544fb43c5762dc9376c9c31a005ac928d98147b0a70594d6bac0ac72e70016"}, "config": {"enabled": true, "alias": "customer_classes", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "customer_classes"}, "created_at": 1692186447.1172566, "relation_name": "\"tech\".\"nghi_dev\".\"customer_classes\"", "raw_code": "with\r\n    ultimate as (\r\n        select *\r\n        from {{ ref(\"tech_qdtek_int_sales__customer_classs__grouped_by_month\") }}\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__customer_classs__grouped_by_month", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__customer_classs__grouped_by_month"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__departments": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__departments", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__departments.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__departments.sql", "unique_id": "model.sales_group.tech_qdtek_sales__departments", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__departments"], "alias": "departments", "checksum": {"name": "sha256", "checksum": "2671b3a55b5da59ad39740fae3482027cc003ab652e8bdf694524e670f8e317f"}, "config": {"enabled": true, "alias": "departments", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "departments"}, "created_at": 1692186447.139766, "relation_name": "\"tech\".\"nghi_dev\".\"departments\"", "raw_code": "with\r\n    ultimate as (\r\n        select distinct department_code\r\n        from {{ ref(\"tech_qdtek_int_sales__salesman__distinct\") }}\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__salesman__distinct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__salesman__distinct"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__materials": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__materials", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__materials.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__materials.sql", "unique_id": "model.sales_group.tech_qdtek_sales__materials", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__materials"], "alias": "materials", "checksum": {"name": "sha256", "checksum": "6a279e8156df747318a87b5f317a4905cf4093cbf6f194e0d69354216c003b0d"}, "config": {"enabled": true, "alias": "materials", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "materials"}, "created_at": 1692186447.1456246, "relation_name": "\"tech\".\"nghi_dev\".\"materials\"", "raw_code": "with ultimate as (select * from {{ ref(\"tech_qdtek_int_sales__material__distinct\") }})\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__material__distinct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__material__distinct"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__md_customers": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__md_customers", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__md_customers.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__md_customers.sql", "unique_id": "model.sales_group.tech_qdtek_sales__md_customers", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__md_customers"], "alias": "md_customers", "checksum": {"name": "sha256", "checksum": "e14a2e52e6aabc72f0ef8b7eeef9f0ff4821fcc0c697ea158d8480aa3bc2b9d0"}, "config": {"enabled": true, "alias": "md_customers", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "md_customers"}, "created_at": 1692186447.130367, "relation_name": "\"tech\".\"nghi_dev\".\"md_customers\"", "raw_code": "with\r\n    ultimate as (\r\n        select\r\n            branch as branch_code,\r\n            \"salse ph\u1ee5 tr\u00e1ch\" as pic_sales_name,\r\n            \"m\u00e3 s\u1ed1 thu\u1ebf\" as tax_code,\r\n            \"t\u00ean \u0111\u1ea7y \u0111\u1ee7\" as company_name,\r\n            \"khu v\u1ef1c\" as business_aspects_name,\r\n            \"m\u1ee9c \u0111\u1ed9 \u0111\u00e1nh gi\u00e1 kh\u00e1ch h\u00e0ng\" as province_name,\r\n            \"lo\u1ea1i kh\u00e1ch h\u00e0ng\" as customer_type_name,\r\n            \"m\u00e3\" as code,\r\n            dept as department_code,\r\n            team as team_code,\r\n            \"\u0111\u1ecba ch\u1ec9\" as address_name,\r\n            \"th\u01b0\u01a1ng hi\u1ec7u\" as brand_name\r\n        from {{ source(\"qdtek_excel_sales\", \"customer\") }}\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [], "sources": [["qdtek_excel_sales", "customer"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.qdtek_excel_sales.customer"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__md_pipeline_crms": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__md_pipeline_crms", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__md_pipeline_crms.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__md_pipeline_crms.sql", "unique_id": "model.sales_group.tech_qdtek_sales__md_pipeline_crms", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__md_pipeline_crms"], "alias": "md_pipeline_crms", "checksum": {"name": "sha256", "checksum": "6615a668b6e43a8c93fe6ee41776f88582122692e7330aa9fb8aae58454d01b3"}, "config": {"enabled": true, "alias": "md_pipeline_crms", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "md_pipeline_crms"}, "created_at": 1692186447.1323671, "relation_name": "\"tech\".\"nghi_dev\".\"md_pipeline_crms\"", "raw_code": "with\r\n    ultimate as (\r\n        select\r\n            id as id,\r\n            pipeline as pipeline_name,\r\n            \"Repeat deal\" as repeat_deal_status,\r\n            \"Repeat inquiry\" as repeat_inquiry_status,\r\n            stage as stage_name,\r\n            responsible as responsible_name,\r\n            \"Deal Name\" as deal_name,\r\n            type as type_name,\r\n            Income,\r\n            Currency as currency_code,\r\n            Company as company_name,\r\n            Contact as contact_name,\r\n            Created as created_timestamp,\r\n            \"Created by\" as created_by_name,\r\n            Modified as modified_timestamp,\r\n            \"Modified by\" as modified_by_name,\r\n            \"Start date\" as start_date,\r\n            \"Assumed close date\" as assumed_closed_date,\r\n            Product as product_code,\r\n            Price,\r\n            Probability as percent_probability,\r\n            Invoiced as invoiced_status,\r\n            Industry as industry_name,\r\n            TEAM as team_code,\r\n            DEPT as department_code,\r\n            BRANCH as branch_code\r\n        from {{ source(\"qdtek_excel_sales\", \"pipeline_crm\") }}\r\n    )\r\n\r\nselect * \r\nfrom ultimate", "language": "sql", "refs": [], "sources": [["qdtek_excel_sales", "pipeline_crm"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.qdtek_excel_sales.pipeline_crm"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__pbi_user_permissions": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__pbi_user_permissions", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__pbi_user_permissions.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__pbi_user_permissions.sql", "unique_id": "model.sales_group.tech_qdtek_sales__pbi_user_permissions", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__pbi_user_permissions"], "alias": "pbi_user_permissions", "checksum": {"name": "sha256", "checksum": "fa95f724277ec8ea65ff475f78e551575d386c6fbdbd69c2ba1ca819f6aa8d8b"}, "config": {"enabled": true, "alias": "pbi_user_permissions", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "pbi_user_permissions"}, "created_at": 1692186447.1222813, "relation_name": "\"tech\".\"nghi_dev\".\"pbi_user_permissions\"", "raw_code": "with\r\n    transform as (\r\n        select\r\n            stt,\r\n            region as region_name,\r\n            industry as industry_code,\r\n            dept as department_code,\r\n            team as team_code,\r\n            salescode as sales_code,\r\n            staff as staff_name,\r\n            title as title_name,\r\n            trim(email) as email,\r\n            report as accessing_report\r\n        from {{ ref(\"pbi_user_permission\") }}\r\n    )\r\n\r\nselect *\r\nfrom transform", "language": "sql", "refs": [{"name": "pbi_user_permission", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.pbi_user_permission"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__periods": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__periods", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__periods.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__periods.sql", "unique_id": "model.sales_group.tech_qdtek_sales__periods", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__periods"], "alias": "periods", "checksum": {"name": "sha256", "checksum": "0bec8459d344d5c4db764be240e2f90725e8caba9f8372bad602539c6ea3c5f2"}, "config": {"enabled": true, "alias": "periods", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "periods"}, "created_at": 1692186447.1526272, "relation_name": "\"tech\".\"nghi_dev\".\"periods\"", "raw_code": "with ultimate as (select * from {{ ref(\"period\") }})\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.period"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__product_groups": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__product_groups", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__product_groups.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__product_groups.sql", "unique_id": "model.sales_group.tech_qdtek_sales__product_groups", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__product_groups"], "alias": "product_groups", "checksum": {"name": "sha256", "checksum": "f911cab919e89ed2baf0420eb303d3dee9b6994b6f69a4ce86b43159b163c098"}, "config": {"enabled": true, "alias": "product_groups", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "product_groups"}, "created_at": 1692186447.1506166, "relation_name": "\"tech\".\"nghi_dev\".\"product_groups\"", "raw_code": "with\r\n    ultimate as (\r\n        select distinct product_group_code\r\n        from {{ ref(\"tech_qdtek_int_sales__material__distinct\") }}\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__material__distinct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__material__distinct"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__regions": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__regions", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__regions.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__regions.sql", "unique_id": "model.sales_group.tech_qdtek_sales__regions", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__regions"], "alias": "tech_qdtek_sales__regions", "checksum": {"name": "sha256", "checksum": "952354adf571301dc26e38f7fd569d0d1d81724dd590f46154df72f6d690cfdf"}, "config": {"enabled": true, "alias": "tech_qdtek_sales__regions", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "tech_qdtek_sales__regions"}, "created_at": 1692186447.1252813, "relation_name": "\"tech\".\"nghi_dev\".\"tech_qdtek_sales__regions\"", "raw_code": "with ultimate as (select region as region_code, region_name from {{ ref(\"region\") }})\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "region", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.region"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__salesmans": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__salesmans", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__salesmans.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__salesmans.sql", "unique_id": "model.sales_group.tech_qdtek_sales__salesmans", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__salesmans"], "alias": "salesmans", "checksum": {"name": "sha256", "checksum": "924b6b7afae14933da322435cae2b2c658f00e0d0a8915eb48072640b0e7b596"}, "config": {"enabled": true, "alias": "salesmans", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "salesmans"}, "created_at": 1692186447.1357746, "relation_name": "\"tech\".\"nghi_dev\".\"salesmans\"", "raw_code": "with ultimate as (select * from {{ ref(\"tech_qdtek_int_sales__salesman__distinct\") }})\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__salesman__distinct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__salesman__distinct"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__teams": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__teams", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__teams.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__teams.sql", "unique_id": "model.sales_group.tech_qdtek_sales__teams", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__teams"], "alias": "teams", "checksum": {"name": "sha256", "checksum": "bbbffe3cf88050f82b9e00db52d93b9f7a8f27bd5fd0866bc03d66bf3d8a4e78"}, "config": {"enabled": true, "alias": "teams", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "teams"}, "created_at": 1692186447.1427653, "relation_name": "\"tech\".\"nghi_dev\".\"teams\"", "raw_code": "with\r\n    ultimate as (\r\n        select distinct team_code\r\n        from {{ ref(\"tech_qdtek_int_sales__salesman__distinct\") }}\r\n    )\r\n\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "tech_qdtek_int_sales__salesman__distinct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.tech_qdtek_int_sales__salesman__distinct"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_sales__top_customers": {"database": "tech", "schema": "nghi_dev", "name": "tech_qdtek_sales__top_customers", "resource_type": "model", "package_name": "sales_group", "path": "tech\\marts\\sales\\tech_qdtek_sales__top_customers.sql", "original_file_path": "models\\tech\\marts\\sales\\tech_qdtek_sales__top_customers.sql", "unique_id": "model.sales_group.tech_qdtek_sales__top_customers", "fqn": ["sales_group", "tech", "marts", "sales", "tech_qdtek_sales__top_customers"], "alias": "top_customers", "checksum": {"name": "sha256", "checksum": "2ed4878e0fbad426736c4f5a14f3741133d20947d93d1a695b4ab4bc350925bc"}, "config": {"enabled": true, "alias": "top_customers", "schema": "marts_sales", "database": "tech", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\tech\\marts\\sales\\_tech_qdtek_sales__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "tech", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_sales", "alias": "top_customers"}, "created_at": 1692186447.1546154, "relation_name": "\"tech\".\"nghi_dev\".\"top_customers\"", "raw_code": "with ultimate as (select * from {{ ref(\"top_customer\") }})\r\nselect *\r\nfrom ultimate", "language": "sql", "refs": [{"name": "top_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.sales_group.top_customer"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_stg_excel_sales__budget": {"database": "food", "schema": "nghi_dev", "name": "tech_qdtek_stg_excel_sales__budget", "resource_type": "model", "package_name": "sales_group", "path": "tech\\staging\\excel\\tech_qdtek_stg_excel_sales__budget.sql", "original_file_path": "models\\tech\\staging\\excel\\tech_qdtek_stg_excel_sales__budget.sql", "unique_id": "model.sales_group.tech_qdtek_stg_excel_sales__budget", "fqn": ["sales_group", "tech", "staging", "excel", "tech_qdtek_stg_excel_sales__budget"], "alias": "tech_qdtek_stg_excel_sales__budget", "checksum": {"name": "sha256", "checksum": "5f1d9b65aa49839013bf49120466c3240426692293b57bf5f6d74c7fff4ffa76"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.6786387, "relation_name": "\"food\".\"nghi_dev\".\"tech_qdtek_stg_excel_sales__budget\"", "raw_code": "select\r\n    branch as branch_code,\r\n    \"b/p\" as \"brand / product\",\r\n    \"net amt\u00a0/vnd\",\r\n    \"product group\" as product_group_name,\r\n    region as region_code,\r\n    month,\r\n    year,\r\n    \"target amt\u00a0m1/vnd\",\r\n    \"target amt\u00a0m3/vnd\",\r\n    \"product brand\" as product_brand_name,\r\n    \"new sales code\" as new_sales_code,\r\n    \"sales code\" as old_sales_code,\r\n    forecast,\r\n    team as team_code,\r\n    dept as department_code,\r\n    sales as sales_name\r\nfrom {{ source(\"qdtek_excel_sales\", \"forecast_budget\") }}", "language": "sql", "refs": [], "sources": [["qdtek_excel_sales", "forecast_budget"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.qdtek_excel_sales.forecast_budget"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_stg_excel_sales__daily_sales": {"database": "food", "schema": "nghi_dev", "name": "tech_qdtek_stg_excel_sales__daily_sales", "resource_type": "model", "package_name": "sales_group", "path": "tech\\staging\\excel\\tech_qdtek_stg_excel_sales__daily_sales.sql", "original_file_path": "models\\tech\\staging\\excel\\tech_qdtek_stg_excel_sales__daily_sales.sql", "unique_id": "model.sales_group.tech_qdtek_stg_excel_sales__daily_sales", "fqn": ["sales_group", "tech", "staging", "excel", "tech_qdtek_stg_excel_sales__daily_sales"], "alias": "tech_qdtek_stg_excel_sales__daily_sales", "checksum": {"name": "sha256", "checksum": "3f4e7b72474f9d682715115505e2eb8b6cf557b6dfe5ddd7e6691c48df2746a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.6816444, "relation_name": "\"food\".\"nghi_dev\".\"tech_qdtek_stg_excel_sales__daily_sales\"", "raw_code": "select\r\n    \"S\u1ed1 ch\u1ee9ng t\u1eeb\"::text as billing_number,\r\n    to_date(\"Ng\u00e0y\", 'DD-MM-YYYY') as billing_date,\r\n    \"Nghi\u1ec7p v\u1ee5\"::text as billing_type_name,\r\n    \"Nh\u00f3m kh\u00e1ch h\u00e0ng\"::text as customer_group_name,\r\n    \"M\u00e3 h\u00e0ng h\u00f3a\"::text as article_code,\r\n    upper(trim(\"Nh\u00f3m h\u00e0ng h\u00f3a\")) as article_group,\r\n    \"T\u00ean nh\u00f3m h\u00e0ng h\u00f3a\"::text as article_group_name,\r\n    \"M\u00e3 nh\u00f3m h\u00e0ng h\u00f3a\"::text as article_group_code,\r\n    (case when \"Th\u00e0nh ti\u1ec1n TC\" is null then 0 else \"Th\u00e0nh ti\u1ec1n TC\" end)::float as debit,\r\n    (case when \"Ti\u1ec1n C/K(VND)\" is null then 0 else \"Ti\u1ec1n C/K(VND)\" end)::float\r\n    as rebate,\r\n    (\r\n        case when \"Th\u00e0nh ti\u1ec1n (tr\u1ea3) TC\" is null then 0 else \"Th\u00e0nh ti\u1ec1n (tr\u1ea3) TC\" end\r\n    )::float as credit,\r\n    (\r\n        case\r\n            when \"Gi\u1ea3m gi\u00e1 / chi\u1ebfc kh\u1ea5u TC\" is null\r\n            then 0\r\n            else \"Gi\u1ea3m gi\u00e1 / chi\u1ebfc kh\u1ea5u TC\"\r\n        end\r\n    )::float as discount,\r\n    (case when \"T\u0103ng gi\u00e1 TC\" is null then 0 else \"T\u0103ng gi\u00e1 TC\" end)::float as increase,\r\n    \"TT gi\u00e1 v\u1ed1n (xu\u1ea5t) TC\"::float as cogs_debit,\r\n    \"TT gi\u00e1 v\u1ed1n (tr\u1ea3) TC\"::float as cogs_credit,\r\n    \"M\u00e3 kh\u00e1ch h\u00e0ng\"::text as customer_id,\r\n    \"T\u00ean kh\u00e1ch h\u00e0ng\"::text as customer_name,\r\n    upper(trim(\"M\u00e3 nh\u00e2n vi\u00ean\")) as salesman_id,\r\n    \"T\u00ean nh\u00e2n vi\u00ean\"::text as salesman_name\r\nfrom {{ source(\"qdtek_excel_sales\", \"daily_sales\") }}", "language": "sql", "refs": [], "sources": [["qdtek_excel_sales", "daily_sales"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.qdtek_excel_sales.daily_sales"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_stg_excel_sales__material": {"database": "food", "schema": "nghi_dev", "name": "tech_qdtek_stg_excel_sales__material", "resource_type": "model", "package_name": "sales_group", "path": "tech\\staging\\excel\\tech_qdtek_stg_excel_sales__material.sql", "original_file_path": "models\\tech\\staging\\excel\\tech_qdtek_stg_excel_sales__material.sql", "unique_id": "model.sales_group.tech_qdtek_stg_excel_sales__material", "fqn": ["sales_group", "tech", "staging", "excel", "tech_qdtek_stg_excel_sales__material"], "alias": "tech_qdtek_stg_excel_sales__material", "checksum": {"name": "sha256", "checksum": "5ebfc6208d84f892b4abe39b54d1f8361c3dfbc7b58fd50bce2af75dc8f4ae3b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.6849494, "relation_name": "\"food\".\"nghi_dev\".\"tech_qdtek_stg_excel_sales__material\"", "raw_code": "select\r\n    trim(\"SYSTEM\") as system_product,\r\n    \"NHAN HANG\" as brand_name,\r\n    upper(trim(\"NHAN HANG\")) as brand_code,\r\n    \"PRODUCT GROUP\" as product_group_code\r\nfrom {{ source(\"qdtek_excel_sales\", \"material\") }}", "language": "sql", "refs": [], "sources": [["qdtek_excel_sales", "material"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.qdtek_excel_sales.material"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_qdtek_stg_excel_sales__salesman": {"database": "food", "schema": "nghi_dev", "name": "tech_qdtek_stg_excel_sales__salesman", "resource_type": "model", "package_name": "sales_group", "path": "tech\\staging\\excel\\tech_qdtek_stg_excel_sales__salesman.sql", "original_file_path": "models\\tech\\staging\\excel\\tech_qdtek_stg_excel_sales__salesman.sql", "unique_id": "model.sales_group.tech_qdtek_stg_excel_sales__salesman", "fqn": ["sales_group", "tech", "staging", "excel", "tech_qdtek_stg_excel_sales__salesman"], "alias": "tech_qdtek_stg_excel_sales__salesman", "checksum": {"name": "sha256", "checksum": "6e1531e772c8e56a04f54ceb4b43f421e68321c7ff5e860098ff0e3397ed7de0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692186446.6879487, "relation_name": "\"food\".\"nghi_dev\".\"tech_qdtek_stg_excel_sales__salesman\"", "raw_code": "select \r\n    \"m\u00e3 nv _t\u00ean nv\"::text,\r\n    \"h\u1ecd v\u00e0 t\u00ean\"::text as sales_name,\r\n    team::text as team_code,\r\n    \"ph\u00f2ng\"::text as department_code,\r\n    \"m\u00e3 nv c\u0169 \"::text as old_sales_code,\r\n    mnv::text as new_sales_code,\r\n    \"ng\u00e0nh\"::text as branch_code,\r\n    \"remark 2023\"::text\r\nfrom {{ source(\"qdtek_excel_sales\", \"salesman\") }}", "language": "sql", "refs": [], "sources": [["qdtek_excel_sales", "salesman"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.qdtek_excel_sales.salesman"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_stg_excel_ntt_tb_ntt_4300": {"database": "food", "schema": "nghi_dev", "name": "tech_stg_excel_ntt_tb_ntt_4300", "resource_type": "model", "package_name": "sales_group", "path": "tech\\staging\\excel\\tech_stg_excel_ntt_tb_ntt_4300.sql", "original_file_path": "models\\tech\\staging\\excel\\tech_stg_excel_ntt_tb_ntt_4300.sql", "unique_id": "model.sales_group.tech_stg_excel_ntt_tb_ntt_4300", "fqn": ["sales_group", "tech", "staging", "excel", "tech_stg_excel_ntt_tb_ntt_4300"], "alias": "tech_stg_excel_ntt_tb_ntt_4300", "checksum": {"name": "sha256", "checksum": "61392606496735aa14d286b898e85c588836e2bb2b55d0461db5c05f8dd133a6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.6899486, "relation_name": "\"food\".\"nghi_dev\".\"tech_stg_excel_ntt_tb_ntt_4300\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"tech_excel_ntt\", \"tb_ntt_4300\") }}", "language": "sql", "refs": [], "sources": [["tech_excel_ntt", "tb_ntt_4300"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.tech_excel_ntt.tb_ntt_4300"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_stg_excel_qdtek_tb_account_mapping": {"database": "food", "schema": "nghi_dev", "name": "tech_stg_excel_qdtek_tb_account_mapping", "resource_type": "model", "package_name": "sales_group", "path": "tech\\staging\\excel\\tech_stg_excel_qdtek_tb_account_mapping.sql", "original_file_path": "models\\tech\\staging\\excel\\tech_stg_excel_qdtek_tb_account_mapping.sql", "unique_id": "model.sales_group.tech_stg_excel_qdtek_tb_account_mapping", "fqn": ["sales_group", "tech", "staging", "excel", "tech_stg_excel_qdtek_tb_account_mapping"], "alias": "tech_stg_excel_qdtek_tb_account_mapping", "checksum": {"name": "sha256", "checksum": "1e1d90d1b92ab7aac52bc9fdfceface549fefa6bac45fb53bcdbd4d1e3d4c9f2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.6935, "relation_name": "\"food\".\"nghi_dev\".\"tech_stg_excel_qdtek_tb_account_mapping\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect\r\n    \"chi nh\u00e1nh\"::text as company_code,\r\n    \"account qdtek\"::text as racct_qdtek,\r\n    \"account sap\"::text as racct_sap\r\nfrom {{ source(\"tech_excel_qdtek\", \"tb_account_mapping\") }}", "language": "sql", "refs": [], "sources": [["tech_excel_qdtek", "tb_account_mapping"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.tech_excel_qdtek.tb_account_mapping"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_stg_excel_qdtek_tb_north_4001": {"database": "food", "schema": "nghi_dev", "name": "tech_stg_excel_qdtek_tb_north_4001", "resource_type": "model", "package_name": "sales_group", "path": "tech\\staging\\excel\\tech_stg_excel_qdtek_tb_north_4001.sql", "original_file_path": "models\\tech\\staging\\excel\\tech_stg_excel_qdtek_tb_north_4001.sql", "unique_id": "model.sales_group.tech_stg_excel_qdtek_tb_north_4001", "fqn": ["sales_group", "tech", "staging", "excel", "tech_stg_excel_qdtek_tb_north_4001"], "alias": "tech_stg_excel_qdtek_tb_north_4001", "checksum": {"name": "sha256", "checksum": "74dac62e7b1ca4428f29b6f357970c027a458a89e6ea6d3b7f49d0cbda90e9e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.6964247, "relation_name": "\"food\".\"nghi_dev\".\"tech_stg_excel_qdtek_tb_north_4001\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"tech_excel_qdtek\", \"tb_qdtek_north\") }}", "language": "sql", "refs": [], "sources": [["tech_excel_qdtek", "tb_qdtek_north"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.tech_excel_qdtek.tb_qdtek_north"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_stg_excel_qdtek_tb_south_4002": {"database": "food", "schema": "nghi_dev", "name": "tech_stg_excel_qdtek_tb_south_4002", "resource_type": "model", "package_name": "sales_group", "path": "tech\\staging\\excel\\tech_stg_excel_qdtek_tb_south_4002.sql", "original_file_path": "models\\tech\\staging\\excel\\tech_stg_excel_qdtek_tb_south_4002.sql", "unique_id": "model.sales_group.tech_stg_excel_qdtek_tb_south_4002", "fqn": ["sales_group", "tech", "staging", "excel", "tech_stg_excel_qdtek_tb_south_4002"], "alias": "tech_stg_excel_qdtek_tb_south_4002", "checksum": {"name": "sha256", "checksum": "0ba82b2b3468fc9e2e1826a6e7028232d51d575c1de98b3e917afc743e82dff9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.7004728, "relation_name": "\"food\".\"nghi_dev\".\"tech_stg_excel_qdtek_tb_south_4002\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"tech_excel_qdtek\", \"tb_qdtek_south\") }}", "language": "sql", "refs": [], "sources": [["tech_excel_qdtek", "tb_qdtek_south"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.tech_excel_qdtek.tb_qdtek_south"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.tech_stg_excel_qdtek_tb_south_north_4000": {"database": "food", "schema": "nghi_dev", "name": "tech_stg_excel_qdtek_tb_south_north_4000", "resource_type": "model", "package_name": "sales_group", "path": "tech\\staging\\excel\\tech_stg_excel_qdtek_tb_south_north_4000.sql", "original_file_path": "models\\tech\\staging\\excel\\tech_stg_excel_qdtek_tb_south_north_4000.sql", "unique_id": "model.sales_group.tech_stg_excel_qdtek_tb_south_north_4000", "fqn": ["sales_group", "tech", "staging", "excel", "tech_stg_excel_qdtek_tb_south_north_4000"], "alias": "tech_stg_excel_qdtek_tb_south_north_4000", "checksum": {"name": "sha256", "checksum": "5c05b1b1c7fb010913d58d2b6e5c791361382e684e50d1b34b33c1b2f9ae68f1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{ 'tech' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table"}, "created_at": 1692186446.7038794, "relation_name": "\"food\".\"nghi_dev\".\"tech_stg_excel_qdtek_tb_south_north_4000\"", "raw_code": "{{\r\n    config(\r\n        materialized=\"table\",\r\n    )\r\n}}\r\n\r\nselect * from {{ source(\"tech_excel_qdtek\", \"tb_south_north_4000\") }}", "language": "sql", "refs": [], "sources": [["tech_excel_qdtek", "tb_south_north_4000"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sales_group.tech_excel_qdtek.tb_south_north_4000"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.sales_group.assert_cms_billing_sales_audit": {"database": "food", "schema": "nghi_dev", "name": "assert_cms_billing_sales_audit", "resource_type": "test", "package_name": "sales_group", "path": "assert_cms_billing_sales_audit.sql", "original_file_path": "models/food/tests\\assert_cms_billing_sales_audit.sql", "unique_id": "test.sales_group.assert_cms_billing_sales_audit", "fqn": ["sales_group", "assert_cms_billing_sales_audit"], "alias": "assert_cms_billing_sales_audit", "checksum": {"name": "sha256", "checksum": "baa5a0ef6aa6a88dd01590c7215912f6e876bc49c624cc330a4064862d6ff545"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1692186446.7212946, "relation_name": null, "raw_code": "select * from {{ ref(\"food_audit_sales_cms\") }} where percent_of_total < 100", "language": "sql", "refs": [{"name": "food_audit_sales_cms", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_audit_sales_cms"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "test.sales_group.assert_gkitchen_sales_audit": {"database": "food", "schema": "nghi_dev", "name": "assert_gkitchen_sales_audit", "resource_type": "test", "package_name": "sales_group", "path": "assert_gkitchen_sales_audit.sql", "original_file_path": "models/food/tests\\assert_gkitchen_sales_audit.sql", "unique_id": "test.sales_group.assert_gkitchen_sales_audit", "fqn": ["sales_group", "assert_gkitchen_sales_audit"], "alias": "assert_gkitchen_sales_audit", "checksum": {"name": "sha256", "checksum": "61b415974bf67fc4a9d4f563ee9f0d4557325f2f1844b9e5713a579a5ef11bfc"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1692186446.7254982, "relation_name": null, "raw_code": "select * from {{ ref(\"food_audit_sales_gkitchen\") }} where percent_of_total < 100", "language": "sql", "refs": [{"name": "food_audit_sales_gkitchen", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_audit_sales_gkitchen"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "test.sales_group.assert_leboucher_ref_no_is_not_null": {"database": "food", "schema": "nghi_dev", "name": "assert_leboucher_ref_no_is_not_null", "resource_type": "test", "package_name": "sales_group", "path": "assert_leboucher_ref_no_is_not_null.sql", "original_file_path": "models/food/tests\\assert_leboucher_ref_no_is_not_null.sql", "unique_id": "test.sales_group.assert_leboucher_ref_no_is_not_null", "fqn": ["sales_group", "assert_leboucher_ref_no_is_not_null"], "alias": "assert_leboucher_ref_no_is_not_null", "checksum": {"name": "sha256", "checksum": "30989f295cc23a023b999a5448dfed17364336fc70229344fab105a8c5e5ad27"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1692186446.7294989, "relation_name": null, "raw_code": "select * from {{ ref(\"food_leboucher_sales\") }} where ref_no is null limit 1", "language": "sql", "refs": [{"name": "food_leboucher_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_leboucher_sales"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "test.sales_group.assert_leboucher_sales_audit": {"database": "food", "schema": "nghi_dev", "name": "assert_leboucher_sales_audit", "resource_type": "test", "package_name": "sales_group", "path": "assert_leboucher_sales_audit.sql", "original_file_path": "models/food/tests\\assert_leboucher_sales_audit.sql", "unique_id": "test.sales_group.assert_leboucher_sales_audit", "fqn": ["sales_group", "assert_leboucher_sales_audit"], "alias": "assert_leboucher_sales_audit", "checksum": {"name": "sha256", "checksum": "227370ac2cd5ed9829d8bdfbfffed340315e358f84c2cd3a81fe5dfc670579aa"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1692186446.7339911, "relation_name": null, "raw_code": "select * from {{ ref(\"food_audit_sales_leboucher\") }} where percent_of_total < 100", "language": "sql", "refs": [{"name": "food_audit_sales_leboucher", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_audit_sales_leboucher"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "seed.sales_group.farm_seed_sales_manual_farms": {"database": "food", "schema": "nghi_dev", "name": "farm_seed_sales_manual_farms", "resource_type": "seed", "package_name": "sales_group", "path": "farm\\sales\\farm_seed_sales_manual_farms.csv", "original_file_path": "seeds\\farm\\sales\\farm_seed_sales_manual_farms.csv", "unique_id": "seed.sales_group.farm_seed_sales_manual_farms", "fqn": ["sales_group", "farm", "sales", "farm_seed_sales_manual_farms"], "alias": "farm_seed_sales_manual_farms", "checksum": {"name": "sha256", "checksum": "d696e0b1470bb17edb183b5c2505026c6f9287c7e0b5bddf70cc7dd0370eb7b4"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'farm' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.75362, "relation_name": "\"food\".\"nghi_dev\".\"farm_seed_sales_manual_farms\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.industries": {"database": "food", "schema": "nghi_dev", "name": "industries", "resource_type": "seed", "package_name": "sales_group", "path": "farm\\sales\\industries.csv", "original_file_path": "seeds\\farm\\sales\\industries.csv", "unique_id": "seed.sales_group.industries", "fqn": ["sales_group", "farm", "sales", "industries"], "alias": "industries", "checksum": {"name": "sha256", "checksum": "88fe6a3e817550e94c923508290599b52e03d561c82dcf4859671380655a58cf"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'farm' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.7556784, "relation_name": "\"food\".\"nghi_dev\".\"industries\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.regions": {"database": "food", "schema": "nghi_dev", "name": "regions", "resource_type": "seed", "package_name": "sales_group", "path": "farm\\sales\\regions.csv", "original_file_path": "seeds\\farm\\sales\\regions.csv", "unique_id": "seed.sales_group.regions", "fqn": ["sales_group", "farm", "sales", "regions"], "alias": "regions", "checksum": {"name": "sha256", "checksum": "31f936fc4107d07e09278ecfcee35d4140a1ec8b7ff0f2c35fb527416b5ecb87"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'farm' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.7588239, "relation_name": "\"food\".\"nghi_dev\".\"regions\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.mabaobi_doichieu_fileload": {"database": "food", "schema": "nghi_dev", "name": "mabaobi_doichieu_fileload", "resource_type": "seed", "package_name": "sales_group", "path": "feed\\bcqt\\mabaobi_doichieu_fileload.csv", "original_file_path": "seeds\\feed\\bcqt\\mabaobi_doichieu_fileload.csv", "unique_id": "seed.sales_group.mabaobi_doichieu_fileload", "fqn": ["sales_group", "feed", "bcqt", "mabaobi_doichieu_fileload"], "alias": "mabaobi_doichieu_fileload", "checksum": {"name": "sha256", "checksum": "c88066ff921a580b0be735e454c72f839c71d868fb25db291d6c063a22c675cb"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings"}, "created_at": 1692186446.760824, "relation_name": "\"food\".\"nghi_dev\".\"mabaobi_doichieu_fileload\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.material_P_tuSX_fileload": {"database": "food", "schema": "nghi_dev", "name": "material_P_tuSX_fileload", "resource_type": "seed", "package_name": "sales_group", "path": "feed\\bcqt\\material_P_tuSX_fileload.csv", "original_file_path": "seeds\\feed\\bcqt\\material_P_tuSX_fileload.csv", "unique_id": "seed.sales_group.material_P_tuSX_fileload", "fqn": ["sales_group", "feed", "bcqt", "material_P_tuSX_fileload"], "alias": "material_P_tuSX_fileload", "checksum": {"name": "sha256", "checksum": "540b4c7c8a5cebb21095b97de9b1197902b5841805b24d377dc6648ea2d97294"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings"}, "created_at": 1692186446.7628243, "relation_name": "\"food\".\"nghi_dev\".\"material_P_tuSX_fileload\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.feed_seed_sales_budget_2023": {"database": "food", "schema": "nghi_dev", "name": "feed_seed_sales_budget_2023", "resource_type": "seed", "package_name": "sales_group", "path": "feed\\sales\\feed_seed_sales_budget_2023.csv", "original_file_path": "seeds\\feed\\sales\\feed_seed_sales_budget_2023.csv", "unique_id": "seed.sales_group.feed_seed_sales_budget_2023", "fqn": ["sales_group", "feed", "sales", "feed_seed_sales_budget_2023"], "alias": "feed_seed_sales_budget_2023", "checksum": {"name": "sha256", "checksum": "09b83c5bf0facceccc774fa12df7c2e29c4c7109b3214aeec5ef8cc9232b9ff1"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings"}, "created_at": 1692186446.7648244, "relation_name": "\"food\".\"nghi_dev\".\"feed_seed_sales_budget_2023\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.sales_groups": {"database": "food", "schema": "nghi_dev", "name": "sales_groups", "resource_type": "seed", "package_name": "sales_group", "path": "food\\sales_groups.csv", "original_file_path": "seeds\\food\\sales_groups.csv", "unique_id": "seed.sales_group.sales_groups", "fqn": ["sales_group", "food", "sales_groups"], "alias": "sales_groups", "checksum": {"name": "sha256", "checksum": "e087679e7ea5b9b8806bff2d952c7f09680d53ab22240e91be1e05aaff0a159b"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'food' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.7677646, "relation_name": "\"food\".\"nghi_dev\".\"sales_groups\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.food_seed_sales_mapping_channels": {"database": "food", "schema": "nghi_dev", "name": "food_seed_sales_mapping_channels", "resource_type": "seed", "package_name": "sales_group", "path": "food\\sales\\food_seed_sales_mapping_channels.csv", "original_file_path": "seeds\\food\\sales\\food_seed_sales_mapping_channels.csv", "unique_id": "seed.sales_group.food_seed_sales_mapping_channels", "fqn": ["sales_group", "food", "sales", "food_seed_sales_mapping_channels"], "alias": "food_seed_sales_mapping_channels", "checksum": {"name": "sha256", "checksum": "b12b14b489daf2ae59382efe6a5253e290c0d60a74afea210eac412d139ae07a"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'food' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.7698228, "relation_name": "\"food\".\"nghi_dev\".\"food_seed_sales_mapping_channels\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.food_seed_sales_mapping_customer_groups": {"database": "food", "schema": "nghi_dev", "name": "food_seed_sales_mapping_customer_groups", "resource_type": "seed", "package_name": "sales_group", "path": "food\\sales\\food_seed_sales_mapping_customer_groups.csv", "original_file_path": "seeds\\food\\sales\\food_seed_sales_mapping_customer_groups.csv", "unique_id": "seed.sales_group.food_seed_sales_mapping_customer_groups", "fqn": ["sales_group", "food", "sales", "food_seed_sales_mapping_customer_groups"], "alias": "food_seed_sales_mapping_customer_groups", "checksum": {"name": "sha256", "checksum": "c041b9647bd404dc3d11bd0d43edb179b768a208c8c8b555597c9b2f4f9701bf"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'food' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.7732718, "relation_name": "\"food\".\"nghi_dev\".\"food_seed_sales_mapping_customer_groups\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.food_seed_sales_mapping_lbc_customers_2023_03_27": {"database": "food", "schema": "nghi_dev", "name": "food_seed_sales_mapping_lbc_customers_2023_03_27", "resource_type": "seed", "package_name": "sales_group", "path": "food\\sales\\food_seed_sales_mapping_lbc_customers_2023_03_27.csv", "original_file_path": "seeds\\food\\sales\\food_seed_sales_mapping_lbc_customers_2023_03_27.csv", "unique_id": "seed.sales_group.food_seed_sales_mapping_lbc_customers_2023_03_27", "fqn": ["sales_group", "food", "sales", "food_seed_sales_mapping_lbc_customers_2023_03_27"], "alias": "food_seed_sales_mapping_lbc_customers_2023_03_27", "checksum": {"name": "sha256", "checksum": "6e6e561d3c9839ff41349120655a04ff1788d704d92387371f795de052febd20"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'food' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.7750905, "relation_name": "\"food\".\"nghi_dev\".\"food_seed_sales_mapping_lbc_customers_2023_03_27\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.food_seed_sales_mapping_lbc_sales_groups": {"database": "food", "schema": "nghi_dev", "name": "food_seed_sales_mapping_lbc_sales_groups", "resource_type": "seed", "package_name": "sales_group", "path": "food\\sales\\food_seed_sales_mapping_lbc_sales_groups.csv", "original_file_path": "seeds\\food\\sales\\food_seed_sales_mapping_lbc_sales_groups.csv", "unique_id": "seed.sales_group.food_seed_sales_mapping_lbc_sales_groups", "fqn": ["sales_group", "food", "sales", "food_seed_sales_mapping_lbc_sales_groups"], "alias": "food_seed_sales_mapping_lbc_sales_groups", "checksum": {"name": "sha256", "checksum": "22652b94d517eef4e452c59febfb4655e4f458901c8c359cbfdf645cfa85f887"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'food' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.77809, "relation_name": "\"food\".\"nghi_dev\".\"food_seed_sales_mapping_lbc_sales_groups\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.food_seed_sales_mapping_materials": {"database": "food", "schema": "nghi_dev", "name": "food_seed_sales_mapping_materials", "resource_type": "seed", "package_name": "sales_group", "path": "food\\sales\\food_seed_sales_mapping_materials.csv", "original_file_path": "seeds\\food\\sales\\food_seed_sales_mapping_materials.csv", "unique_id": "seed.sales_group.food_seed_sales_mapping_materials", "fqn": ["sales_group", "food", "sales", "food_seed_sales_mapping_materials"], "alias": "food_seed_sales_mapping_materials", "checksum": {"name": "path", "checksum": "seeds\\food\\sales\\food_seed_sales_mapping_materials.csv"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'food' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.78009, "relation_name": "\"food\".\"nghi_dev\".\"food_seed_sales_mapping_materials\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.food_seed_scorecard_budget_2023": {"database": "food", "schema": "nghi_dev", "name": "food_seed_scorecard_budget_2023", "resource_type": "seed", "package_name": "sales_group", "path": "food\\scorecard\\food_seed_scorecard_budget_2023.csv", "original_file_path": "seeds\\food\\scorecard\\food_seed_scorecard_budget_2023.csv", "unique_id": "seed.sales_group.food_seed_scorecard_budget_2023", "fqn": ["sales_group", "food", "scorecard", "food_seed_scorecard_budget_2023"], "alias": "food_seed_scorecard_budget_2023", "checksum": {"name": "sha256", "checksum": "aef27723c45d1648397113d008c8e7f77036fcc590144cccf9ce1115259d9977"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"value_type": "varchar(2)", "kpi_code": "varchar(3)", "subcat1_code": "varchar(2)", "cat_code": "varchar(2)", "month": "varchar(7)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'food' if target.name == 'prod' else target.database }}", "column_types": {"value_type": "varchar(2)", "kpi_code": "varchar(3)", "subcat1_code": "varchar(2)", "cat_code": "varchar(2)", "month": "varchar(7)"}}, "created_at": 1692186446.78209, "relation_name": "\"food\".\"nghi_dev\".\"food_seed_scorecard_budget_2023\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.food_seed_scorecard_hierarchies_costelement": {"database": "food", "schema": "nghi_dev", "name": "food_seed_scorecard_hierarchies_costelement", "resource_type": "seed", "package_name": "sales_group", "path": "food\\scorecard\\food_seed_scorecard_hierarchies_costelement.csv", "original_file_path": "seeds\\food\\scorecard\\food_seed_scorecard_hierarchies_costelement.csv", "unique_id": "seed.sales_group.food_seed_scorecard_hierarchies_costelement", "fqn": ["sales_group", "food", "scorecard", "food_seed_scorecard_hierarchies_costelement"], "alias": "food_seed_scorecard_hierarchies_costelement", "checksum": {"name": "sha256", "checksum": "2b06a38b81f8c99d77b2fef84db056cb83d9e16bb69ecd54c2e83c913d145782"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"hier_cost_element_code": "varchar(10)", "hier_cost_element_name": "varchar(100)", "cost_element": "varchar(20)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'food' if target.name == 'prod' else target.database }}", "column_types": {"hier_cost_element_code": "varchar(10)", "hier_cost_element_name": "varchar(100)", "cost_element": "varchar(20)"}}, "created_at": 1692186446.7850943, "relation_name": "\"food\".\"nghi_dev\".\"food_seed_scorecard_hierarchies_costelement\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.food_seed_scorecard_mapping_categories": {"database": "food", "schema": "nghi_dev", "name": "food_seed_scorecard_mapping_categories", "resource_type": "seed", "package_name": "sales_group", "path": "food\\scorecard\\food_seed_scorecard_mapping_categories.csv", "original_file_path": "seeds\\food\\scorecard\\food_seed_scorecard_mapping_categories.csv", "unique_id": "seed.sales_group.food_seed_scorecard_mapping_categories", "fqn": ["sales_group", "food", "scorecard", "food_seed_scorecard_mapping_categories"], "alias": "food_seed_scorecard_mapping_categories", "checksum": {"name": "sha256", "checksum": "8ca090b2bb00f65178d58dc0cc7390b5004280bfddb30df99fe19996945a923f"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"cat_code": "varchar(2)", "ph4_code": "varchar(2)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'food' if target.name == 'prod' else target.database }}", "column_types": {"cat_code": "varchar(2)", "ph4_code": "varchar(2)"}}, "created_at": 1692186446.7871637, "relation_name": "\"food\".\"nghi_dev\".\"food_seed_scorecard_mapping_categories\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.food_seed_scorecard_mapping_cost_center_ccgroup": {"database": "food", "schema": "nghi_dev", "name": "food_seed_scorecard_mapping_cost_center_ccgroup", "resource_type": "seed", "package_name": "sales_group", "path": "food\\scorecard\\food_seed_scorecard_mapping_cost_center_ccgroup.csv", "original_file_path": "seeds\\food\\scorecard\\food_seed_scorecard_mapping_cost_center_ccgroup.csv", "unique_id": "seed.sales_group.food_seed_scorecard_mapping_cost_center_ccgroup", "fqn": ["sales_group", "food", "scorecard", "food_seed_scorecard_mapping_cost_center_ccgroup"], "alias": "food_seed_scorecard_mapping_cost_center_ccgroup", "checksum": {"name": "sha256", "checksum": "f62ad8edca88c7eb8a5637a09102454b6c22e02fe65f5be9a802b7930c26b8d2"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"cost_center": "varchar(20)", "cc_group": "varchar(10)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'food' if target.name == 'prod' else target.database }}", "column_types": {"cost_center": "varchar(20)", "cc_group": "varchar(10)"}}, "created_at": 1692186446.7901638, "relation_name": "\"food\".\"nghi_dev\".\"food_seed_scorecard_mapping_cost_center_ccgroup\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.food_seed_scorecard_mapping_pl_and_plgroup": {"database": "food", "schema": "nghi_dev", "name": "food_seed_scorecard_mapping_pl_and_plgroup", "resource_type": "seed", "package_name": "sales_group", "path": "food\\scorecard\\food_seed_scorecard_mapping_pl_and_plgroup.csv", "original_file_path": "seeds\\food\\scorecard\\food_seed_scorecard_mapping_pl_and_plgroup.csv", "unique_id": "seed.sales_group.food_seed_scorecard_mapping_pl_and_plgroup", "fqn": ["sales_group", "food", "scorecard", "food_seed_scorecard_mapping_pl_and_plgroup"], "alias": "food_seed_scorecard_mapping_pl_and_plgroup", "checksum": {"name": "sha256", "checksum": "6b0daaf3b2154d4ef613d219fcd601a2a207c9a53415e7f157cc928b55c7898f"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"pl_code": "varchar(10)", "pl_group_code": "varchar(10)", "gl_account": "varchar(10)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'food' if target.name == 'prod' else target.database }}", "column_types": {"pl_code": "varchar(10)", "pl_group_code": "varchar(10)", "gl_account": "varchar(10)"}}, "created_at": 1692186446.7921638, "relation_name": "\"food\".\"nghi_dev\".\"food_seed_scorecard_mapping_pl_and_plgroup\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.food_seed_scorecard_mapping_sales_groups": {"database": "food", "schema": "nghi_dev", "name": "food_seed_scorecard_mapping_sales_groups", "resource_type": "seed", "package_name": "sales_group", "path": "food\\scorecard\\food_seed_scorecard_mapping_sales_groups.csv", "original_file_path": "seeds\\food\\scorecard\\food_seed_scorecard_mapping_sales_groups.csv", "unique_id": "seed.sales_group.food_seed_scorecard_mapping_sales_groups", "fqn": ["sales_group", "food", "scorecard", "food_seed_scorecard_mapping_sales_groups"], "alias": "food_seed_scorecard_mapping_sales_groups", "checksum": {"name": "sha256", "checksum": "e087679e7ea5b9b8806bff2d952c7f09680d53ab22240e91be1e05aaff0a159b"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'food' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.794164, "relation_name": "\"food\".\"nghi_dev\".\"food_seed_scorecard_mapping_sales_groups\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.food_seed_scorecard_mapping_subcategories": {"database": "food", "schema": "nghi_dev", "name": "food_seed_scorecard_mapping_subcategories", "resource_type": "seed", "package_name": "sales_group", "path": "food\\scorecard\\food_seed_scorecard_mapping_subcategories.csv", "original_file_path": "seeds\\food\\scorecard\\food_seed_scorecard_mapping_subcategories.csv", "unique_id": "seed.sales_group.food_seed_scorecard_mapping_subcategories", "fqn": ["sales_group", "food", "scorecard", "food_seed_scorecard_mapping_subcategories"], "alias": "food_seed_scorecard_mapping_subcategories", "checksum": {"name": "sha256", "checksum": "12ae21f6970259fc7b56ab5a18604b292eada30c9d1023f974a39ec7d57959c3"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"subcat1_code": "varchar(2)", "subcat2_code": "varchar(2)", "ph5_code": "varchar(3)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'food' if target.name == 'prod' else target.database }}", "column_types": {"subcat1_code": "varchar(2)", "subcat2_code": "varchar(2)", "ph5_code": "varchar(3)"}}, "created_at": 1692186446.7971635, "relation_name": "\"food\".\"nghi_dev\".\"food_seed_scorecard_mapping_subcategories\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.mapping_bs_gl_account": {"database": "food", "schema": "nghi_dev", "name": "mapping_bs_gl_account", "resource_type": "seed", "package_name": "sales_group", "path": "group\\mapping_bs_gl_account.csv", "original_file_path": "seeds\\group\\mapping_bs_gl_account.csv", "unique_id": "seed.sales_group.mapping_bs_gl_account", "fqn": ["sales_group", "group", "mapping_bs_gl_account"], "alias": "mapping_bs_gl_account", "checksum": {"name": "sha256", "checksum": "2c4b4051f1b73d24fb637e96fdda112ea9d1d87567a9a343c49db418fb1c4642"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'group' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.7991638, "relation_name": "\"food\".\"nghi_dev\".\"mapping_bs_gl_account\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.mapping_legal_company_code_currency": {"database": "food", "schema": "nghi_dev", "name": "mapping_legal_company_code_currency", "resource_type": "seed", "package_name": "sales_group", "path": "group\\mapping_legal_company_code_currency.csv", "original_file_path": "seeds\\group\\mapping_legal_company_code_currency.csv", "unique_id": "seed.sales_group.mapping_legal_company_code_currency", "fqn": ["sales_group", "group", "mapping_legal_company_code_currency"], "alias": "mapping_legal_company_code_currency", "checksum": {"name": "sha256", "checksum": "937a658d64c8e0185eb4d809be530450eb4d4f68611f6f963bf89a0fe3ec01bf"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'group' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.8021016, "relation_name": "\"food\".\"nghi_dev\".\"mapping_legal_company_code_currency\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.mapping_md_bs": {"database": "food", "schema": "nghi_dev", "name": "mapping_md_bs", "resource_type": "seed", "package_name": "sales_group", "path": "group\\mapping_md_bs.csv", "original_file_path": "seeds\\group\\mapping_md_bs.csv", "unique_id": "seed.sales_group.mapping_md_bs", "fqn": ["sales_group", "group", "mapping_md_bs"], "alias": "mapping_md_bs", "checksum": {"name": "sha256", "checksum": "03de457ff4f9a83748f55c65ef5c0e2bf4c60f1e1babf70ff7a42c2d69059ad3"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'group' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.8042228, "relation_name": "\"food\".\"nghi_dev\".\"mapping_md_bs\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.mapping_md_p_and_l_account": {"database": "food", "schema": "nghi_dev", "name": "mapping_md_p_and_l_account", "resource_type": "seed", "package_name": "sales_group", "path": "group\\mapping_md_p_and_l_account.csv", "original_file_path": "seeds\\group\\mapping_md_p_and_l_account.csv", "unique_id": "seed.sales_group.mapping_md_p_and_l_account", "fqn": ["sales_group", "group", "mapping_md_p_and_l_account"], "alias": "mapping_md_p_and_l_account", "checksum": {"name": "sha256", "checksum": "9adddf9042979462ab966aa2eaca2224a9b00f60875056e9203ad40c80a84fd4"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'group' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.8062196, "relation_name": "\"food\".\"nghi_dev\".\"mapping_md_p_and_l_account\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.mapping_p_and_l_account": {"database": "food", "schema": "nghi_dev", "name": "mapping_p_and_l_account", "resource_type": "seed", "package_name": "sales_group", "path": "group\\mapping_p_and_l_account.csv", "original_file_path": "seeds\\group\\mapping_p_and_l_account.csv", "unique_id": "seed.sales_group.mapping_p_and_l_account", "fqn": ["sales_group", "group", "mapping_p_and_l_account"], "alias": "mapping_p_and_l_account", "checksum": {"name": "sha256", "checksum": "8d0e239b48a0f4cc6481455da62e6e89389e55c08d3d70e3ec61931c19721f3a"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'group' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.8082204, "relation_name": "\"food\".\"nghi_dev\".\"mapping_p_and_l_account\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.period_input": {"database": "food", "schema": "nghi_dev", "name": "period_input", "resource_type": "seed", "package_name": "sales_group", "path": "group\\period_input.csv", "original_file_path": "seeds\\group\\period_input.csv", "unique_id": "seed.sales_group.period_input", "fqn": ["sales_group", "group", "period_input"], "alias": "period_input", "checksum": {"name": "sha256", "checksum": "599a7cf619b8c032d2679bdc0d5b438ca909a76df04b6ab8a32b54626cf4a990"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'group' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.8112214, "relation_name": "\"food\".\"nghi_dev\".\"period_input\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.pbi_user_permission": {"database": "food", "schema": "nghi_dev", "name": "pbi_user_permission", "resource_type": "seed", "package_name": "sales_group", "path": "tech\\sales\\pbi_user_permission.csv", "original_file_path": "seeds\\tech\\sales\\pbi_user_permission.csv", "unique_id": "seed.sales_group.pbi_user_permission", "fqn": ["sales_group", "tech", "sales", "pbi_user_permission"], "alias": "pbi_user_permission", "checksum": {"name": "sha256", "checksum": "c278b903b7997b1c45c918961e56a1c346605799ba2c7de9b85a670ec35d1efb"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'tech' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.8132226, "relation_name": "\"food\".\"nghi_dev\".\"pbi_user_permission\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.period": {"database": "food", "schema": "nghi_dev", "name": "period", "resource_type": "seed", "package_name": "sales_group", "path": "tech\\sales\\period.csv", "original_file_path": "seeds\\tech\\sales\\period.csv", "unique_id": "seed.sales_group.period", "fqn": ["sales_group", "tech", "sales", "period"], "alias": "period", "checksum": {"name": "sha256", "checksum": "51a4bf6e7799f1e6e439320853eaca834c1e29e6a7097b861bcffb4acc03951e"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'tech' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.8152423, "relation_name": "\"food\".\"nghi_dev\".\"period\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.region": {"database": "food", "schema": "nghi_dev", "name": "region", "resource_type": "seed", "package_name": "sales_group", "path": "tech\\sales\\region.csv", "original_file_path": "seeds\\tech\\sales\\region.csv", "unique_id": "seed.sales_group.region", "fqn": ["sales_group", "tech", "sales", "region"], "alias": "region", "checksum": {"name": "sha256", "checksum": "46a64ba9f1462fb51124954d048fbf9f2508b5980052ca8f08b5a2e229477c0c"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'tech' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.8175693, "relation_name": "\"food\".\"nghi_dev\".\"region\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.team": {"database": "food", "schema": "nghi_dev", "name": "team", "resource_type": "seed", "package_name": "sales_group", "path": "tech\\sales\\team.csv", "original_file_path": "seeds\\tech\\sales\\team.csv", "unique_id": "seed.sales_group.team", "fqn": ["sales_group", "tech", "sales", "team"], "alias": "team", "checksum": {"name": "sha256", "checksum": "c733d9533ad00b821bbedb1f91da70df5b7bc8a1e76e82958a6a82af653590e3"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'tech' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.8206575, "relation_name": "\"food\".\"nghi_dev\".\"team\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "seed.sales_group.top_customer": {"database": "food", "schema": "nghi_dev", "name": "top_customer", "resource_type": "seed", "package_name": "sales_group", "path": "tech\\sales\\top_customer.csv", "original_file_path": "seeds\\tech\\sales\\top_customer.csv", "unique_id": "seed.sales_group.top_customer", "fqn": ["sales_group", "tech", "sales", "top_customer"], "alias": "top_customer", "checksum": {"name": "sha256", "checksum": "c401f34df62405a86cec94b6c4a8184cda18dd3806c09a01d7ac771a11e1b6c1"}, "config": {"enabled": true, "alias": null, "schema": "mappings", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "mappings", "database": "{{ 'tech' if target.name == 'prod' else target.database }}"}, "created_at": 1692186446.8226485, "relation_name": "\"food\".\"nghi_dev\".\"top_customer\"", "raw_code": "", "root_path": "D:\\DWHTEAM\\sales-group", "depends_on": {"macros": []}}, "test.sales_group.dbt_expectations_expect_column_values_to_be_unique_food_gkitchen_sales_posting_date.f265ddc94c": {"test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"column_name": "posting_date", "model": "{{ get_where_subquery(ref('food_gkitchen_sales')) }}"}, "namespace": "dbt_expectations"}, "database": "food", "schema": "nghi_dev", "name": "dbt_expectations_expect_column_values_to_be_unique_food_gkitchen_sales_posting_date", "resource_type": "test", "package_name": "sales_group", "path": "dbt_expectations_expect_column_09ff98a08d78eef8b3b68e4a66efe778.sql", "original_file_path": "models\\food\\marts\\sales\\_food_sales__models.yml", "unique_id": "test.sales_group.dbt_expectations_expect_column_values_to_be_unique_food_gkitchen_sales_posting_date.f265ddc94c", "fqn": ["sales_group", "food", "marts", "sales", "dbt_expectations_expect_column_values_to_be_unique_food_gkitchen_sales_posting_date"], "alias": "dbt_expectations_expect_column_09ff98a08d78eef8b3b68e4a66efe778", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_09ff98a08d78eef8b3b68e4a66efe778", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_09ff98a08d78eef8b3b68e4a66efe778"}, "created_at": 1692186446.9487712, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_09ff98a08d78eef8b3b68e4a66efe778\") }}", "language": "sql", "refs": [{"name": "food_gkitchen_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sales_group.food_gkitchen_sales"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "posting_date", "file_key_name": "models.food_gkitchen_sales", "attached_node": "model.sales_group.food_gkitchen_sales"}, "test.sales_group.dbt_expectations_expect_column_values_to_not_be_null_food_leboucher_sales_posting_date.32cf50cc7e": {"test_metadata": {"name": "expect_column_values_to_not_be_null", "kwargs": {"column_name": "posting_date", "model": "{{ get_where_subquery(ref('food_leboucher_sales')) }}"}, "namespace": "dbt_expectations"}, "database": "food", "schema": "nghi_dev", "name": "dbt_expectations_expect_column_values_to_not_be_null_food_leboucher_sales_posting_date", "resource_type": "test", "package_name": "sales_group", "path": "dbt_expectations_expect_column_8aa2c40ee09f29575a58e19768eb16bf.sql", "original_file_path": "models\\food\\marts\\sales\\_food_sales__models.yml", "unique_id": "test.sales_group.dbt_expectations_expect_column_values_to_not_be_null_food_leboucher_sales_posting_date.32cf50cc7e", "fqn": ["sales_group", "food", "marts", "sales", "dbt_expectations_expect_column_values_to_not_be_null_food_leboucher_sales_posting_date"], "alias": "dbt_expectations_expect_column_8aa2c40ee09f29575a58e19768eb16bf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8aa2c40ee09f29575a58e19768eb16bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8aa2c40ee09f29575a58e19768eb16bf"}, "created_at": 1692186447.004547, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_not_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8aa2c40ee09f29575a58e19768eb16bf\") }}", "language": "sql", "refs": [{"name": "food_leboucher_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sales_group.food_leboucher_sales"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "posting_date", "file_key_name": "models.food_leboucher_sales", "attached_node": "model.sales_group.food_leboucher_sales"}, "test.sales_group.dbt_expectations_expect_column_values_to_be_unique_food_leboucher_sales_posting_date.336f582803": {"test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"column_name": "posting_date", "model": "{{ get_where_subquery(ref('food_leboucher_sales')) }}"}, "namespace": "dbt_expectations"}, "database": "food", "schema": "nghi_dev", "name": "dbt_expectations_expect_column_values_to_be_unique_food_leboucher_sales_posting_date", "resource_type": "test", "package_name": "sales_group", "path": "dbt_expectations_expect_column_efd4fced2767fcf92371e3e4e8500ea5.sql", "original_file_path": "models\\food\\marts\\sales\\_food_sales__models.yml", "unique_id": "test.sales_group.dbt_expectations_expect_column_values_to_be_unique_food_leboucher_sales_posting_date.336f582803", "fqn": ["sales_group", "food", "marts", "sales", "dbt_expectations_expect_column_values_to_be_unique_food_leboucher_sales_posting_date"], "alias": "dbt_expectations_expect_column_efd4fced2767fcf92371e3e4e8500ea5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_efd4fced2767fcf92371e3e4e8500ea5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_efd4fced2767fcf92371e3e4e8500ea5"}, "created_at": 1692186447.0163276, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_efd4fced2767fcf92371e3e4e8500ea5\") }}", "language": "sql", "refs": [{"name": "food_leboucher_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sales_group.food_leboucher_sales"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "posting_date", "file_key_name": "models.food_leboucher_sales", "attached_node": "model.sales_group.food_leboucher_sales"}, "test.sales_group.dbt_utils_recency_food_cms_billing_sales_day__posting_date__0.52e3fc6071": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "posting_date", "interval": 0, "model": "{{ get_where_subquery(ref('food_cms_billing_sales')) }}"}, "namespace": "dbt_utils"}, "database": "food", "schema": "nghi_dev", "name": "dbt_utils_recency_food_cms_billing_sales_day__posting_date__0", "resource_type": "test", "package_name": "sales_group", "path": "dbt_utils_recency_food_cms_billing_sales_day__posting_date__0.sql", "original_file_path": "models\\food\\marts\\sales\\_food_sales__models.yml", "unique_id": "test.sales_group.dbt_utils_recency_food_cms_billing_sales_day__posting_date__0.52e3fc6071", "fqn": ["sales_group", "food", "marts", "sales", "dbt_utils_recency_food_cms_billing_sales_day__posting_date__0"], "alias": "food_cms_billing_sales__posting_date__has_today_data", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "food_cms_billing_sales__posting_date__has_today_data", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "food_cms_billing_sales__posting_date__has_today_data"}, "created_at": 1692186447.0214586, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"food_cms_billing_sales__posting_date__has_today_data\") }}", "language": "sql", "refs": [{"name": "food_cms_billing_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sales_group.food_cms_billing_sales"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.food_cms_billing_sales", "attached_node": "model.sales_group.food_cms_billing_sales"}, "model.sales_group.food_fi_scorecard": {"database": "food", "schema": "nghi_dev", "name": "food_fi_scorecard", "resource_type": "model", "package_name": "sales_group", "path": "food\\marts\\score_card\\food_fi_scorecard.sql", "original_file_path": "models\\food\\marts\\score_card\\food_fi_scorecard.sql", "unique_id": "model.sales_group.food_fi_scorecard", "fqn": ["sales_group", "food", "marts", "score_card", "food_fi_scorecard"], "alias": "fi_scorecard", "checksum": {"name": "sha256", "checksum": "82adcdbe2edd8f5e9ec8a4eddbf4e366da30048d38aab2fa9142353fac1f85f8"}, "config": {"enabled": true, "alias": "fi_scorecard", "schema": "marts_score_card", "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "ra3_node": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sales_group://models\\food\\marts\\score_card\\_food_score_card__models.yml", "build_path": "target\\run\\sales_group\\models\\food\\marts\\score_card\\food_fi_scorecard.sql", "deferred": false, "unrendered_config": {"database": "food", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "table", "schema": "marts_score_card", "alias": "fi_scorecard", "ra3_node": true}, "created_at": 1692238880.1884935, "relation_name": "\"food\".\"nghi_dev\".\"fi_scorecard\"", "raw_code": "select\r\n    fi.cat_code,\r\n    fi.cat_name,\r\n    fi.subcat_1_code,\r\n    fi.subcat_1_name,\r\n    fi.subcat_2_code,\r\n    fi.subcat_2_name,\r\n    fi.\"G/L Account\",\r\n    case\r\n        when fi.\"G/L Account\" >= '0064100000' and fi.\"G/L Account\" <= '0064199999' \r\n        then '01'\r\n        when fi.\"G/L Account\" >= '0064200000' and fi.\"G/L Account\" <= '0064299999' \r\n        then '02'\r\n        when (fi.\"G/L Account\" >= '0062200000' and fi.\"G/L Account\" <= '0062299999')\r\n        or  (fi.\"G/L Account\" >= '0062700000' and fi.\"G/L Account\" <= '0062799999')\r\n        then '03'\r\n    end as expense_group_code,\r\n\r\n    case when expense_group_code = '01'\r\n        then 'CP b\u00e1n h\u00e0ng'\r\n        when  expense_group_code = '02'\r\n        then 'CP qu\u1ea3n l\u00fd'\r\n        when  expense_group_code = '03'\r\n        then 'CP s\u1ea3n xu\u1ea5t'\r\n    end as expense_group_name,\r\n    fi.company_code,\r\n    fi.posting_date,\r\n    fi.channel_code,\r\n    case when fi.channel_code = '98'\r\n    then 'Kh\u00e1c'\r\n    else cn.name end as channel_name,\r\n    fi.matnr,\r\n    '10' as value_type, \r\n    fi.fiscyearper,\r\n    '' as kpi_code,\r\n    '' as kpi_name,\r\n    pl.pl_code, \r\n    pl.pl_name, \r\n    pl.pl_group_code, \r\n    pl.pl_group_name,\r\n    fi.costcenter_code,\r\n    ctxt.short_name as costcenter_name,\r\n    ctxt.medium_name as costcenter_full_name,\r\n    cc.costcenter_group_code,\r\n    cc.costcenter_group_name,\r\n    clh.hier_cost_element_name,\r\n    clh.cost_element_code,\r\n    fi.customer_code,\r\n    fi.plant,\r\n    fi.revenue,\r\n    fi.quantity,\r\n    fi.\"revenue(D/KG)\",\r\n    fi.cogs,\r\n    fi.\"cogs(+)\",\r\n    fi.\"gross Contribution (3) =  (1) - (+)\",\r\n    fi.\"manufacturing cost (4)\",\r\n    fi.\"gross margin (5) = (3) - (4)\",\r\n    fi.\"mkt & Commercial Costs (6)\",\r\n    fi.\"administrative costs (7)\",\r\n    fi.\"chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\r\n    fi.\"thu nh\u1eadp t\u00e0i ch\u00ednh(9)\",\r\n    fi.\"10-raw material\",\r\n    fi.\"20-packaging\",\r\n    fi.\"30-subcontract\",\r\n    fi.\"40-delivery cost sto\",\r\n    fi.\"51-emp.outsourcing\",\r\n    fi.\"52-consum&supplies\",\r\n    fi.\"53-energy& utilities\",\r\n    fi.\"59-other expenses\",\r\n    fi.\"61-wages\",\r\n    fi.\"62-other wages\",\r\n    fi.\"63-depreciation exp\",\r\n    fi.\"69-other expenses\",\r\n    fi.\"80-merchendise\",\r\n    fi.\"90-inter.profit\"\r\n\r\nfrom {{ ref(\"food_int_fi_0fi_acdoca_10__filtered_to_revenue\") }} fi\r\nleft join {{ ref('food_stg_sap_s4__md_0distr_chan_text') }} cn \r\non fi.channel_code = cn.code\r\n\r\nleft join {{ ref('food_mapping_pl_plgroup') }} pl\r\non fi.\"G/L Account\" = pl.\"G/L Account\"\r\n\r\nleft join {{ ref('food_mapping_costcenter_costcentergroup') }} cc\r\non fi.costcenter_code = cc.costcenter_code\r\n\r\nleft join {{ ref('food_stg_sap_s4__md_0costcenter_text') }} ctxt\r\non fi.costcenter_code = ctxt.code\r\n\r\nleft join {{ ref('food_mapping_hierarchies_costelement') }} clh\r\non fi.\"G/L Account\" = clh.cost_element_code\r\n\r\nunion all\r\n\r\nselect\r\n    cat_code,\r\n    cat_name,\r\n    subcat_1_code,\r\n    subcat_1_name,\r\n    subcat_2_code,\r\n    subcat_2_name,\r\n    \"G/L Account\",\r\n    expense_group_code,\r\n    expense_group_name,\r\n    company_code,\r\n    posting_date,\r\n    channel_code,\r\n    channel_name,\r\n    matnr,\r\n    value_type, \r\n    fiscyearper,\r\n    kpi_code,\r\n    kpi_name,\r\n    pl_code, \r\n    pl_name, \r\n    pl_group_code, \r\n    pl_group_name,\r\n    costcenter_code,\r\n    costcenter_name,\r\n    costcenter_full_name,\r\n    costcenter_group_code,\r\n    costcenter_group_name,\r\n    '' as hier_cost_element_name,\r\n    '' as cost_element_code,\r\n    '' as customer_code,\r\n    '' as plant,\r\n    budget * 1000 as revenue, \r\n    quantity,\r\n    \"revenue(D/KG)\",\r\n    cogs,\r\n    \"cogs(+)\",\r\n    \"gross Contribution (3) =  (1) - (+)\",\r\n    \"manufacturing cost (4)\",\r\n    \"gross margin (5) = (3) - (4)\",\r\n    \"mkt & Commercial Costs (6)\",\r\n    \"administrative costs (7)\",\r\n    \"chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\r\n    \"thu nh\u1eadp t\u00e0i ch\u00ednh(9)\",\r\n    0 as \"10-raw material\",\r\n    0 as \"20-packaging\",\r\n    0 as \"30-subcontract\",\r\n    0 as \"40-delivery cost sto\",\r\n    0 as \"51-emp.outsourcing\",\r\n    0 as \"52-consum&supplies\",\r\n    0 as \"53-energy& utilities\",\r\n    0 as \"59-other expenses\",\r\n    0 as \"61-wages\",\r\n    0 as \"62-other wages\",\r\n    0 as \"63-depreciation exp\",\r\n    0 as \"69-other expenses\",\r\n    0 as \"80-merchendise\",\r\n    0 as \"90-inter.profit\"\r\n\r\nfrom {{ ref('food_scorecard_kpi_budget') }}", "language": "sql", "refs": [{"name": "food_int_fi_0fi_acdoca_10__filtered_to_revenue", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0distr_chan_text", "package": null, "version": null}, {"name": "food_mapping_pl_plgroup", "package": null, "version": null}, {"name": "food_mapping_costcenter_costcentergroup", "package": null, "version": null}, {"name": "food_stg_sap_s4__md_0costcenter_text", "package": null, "version": null}, {"name": "food_mapping_hierarchies_costelement", "package": null, "version": null}, {"name": "food_scorecard_kpi_budget", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_revenue", "model.sales_group.food_stg_sap_s4__md_0distr_chan_text", "model.sales_group.food_mapping_pl_plgroup", "model.sales_group.food_mapping_costcenter_costcentergroup", "model.sales_group.food_stg_sap_s4__md_0costcenter_text", "model.sales_group.food_mapping_hierarchies_costelement", "model.sales_group.food_scorecard_kpi_budget"]}, "compiled_path": "target\\compiled\\sales_group\\models\\food\\marts\\score_card\\food_fi_scorecard.sql", "compiled": true, "compiled_code": "select\n    fi.cat_code,\n    fi.cat_name,\n    fi.subcat_1_code,\n    fi.subcat_1_name,\n    fi.subcat_2_code,\n    fi.subcat_2_name,\n    fi.\"G/L Account\",\n    case\n        when fi.\"G/L Account\" >= '0064100000' and fi.\"G/L Account\" <= '0064199999' \n        then '01'\n        when fi.\"G/L Account\" >= '0064200000' and fi.\"G/L Account\" <= '0064299999' \n        then '02'\n        when (fi.\"G/L Account\" >= '0062200000' and fi.\"G/L Account\" <= '0062299999')\n        or  (fi.\"G/L Account\" >= '0062700000' and fi.\"G/L Account\" <= '0062799999')\n        then '03'\n    end as expense_group_code,\n\n    case when expense_group_code = '01'\n        then 'CP b\u00e1n h\u00e0ng'\n        when  expense_group_code = '02'\n        then 'CP qu\u1ea3n l\u00fd'\n        when  expense_group_code = '03'\n        then 'CP s\u1ea3n xu\u1ea5t'\n    end as expense_group_name,\n    fi.company_code,\n    fi.posting_date,\n    fi.channel_code,\n    case when fi.channel_code = '98'\n    then 'Kh\u00e1c'\n    else cn.name end as channel_name,\n    fi.matnr,\n    '10' as value_type, \n    fi.fiscyearper,\n    '' as kpi_code,\n    '' as kpi_name,\n    pl.pl_code, \n    pl.pl_name, \n    pl.pl_group_code, \n    pl.pl_group_name,\n    fi.costcenter_code,\n    ctxt.short_name as costcenter_name,\n    ctxt.medium_name as costcenter_full_name,\n    cc.costcenter_group_code,\n    cc.costcenter_group_name,\n    clh.hier_cost_element_name,\n    clh.cost_element_code,\n    fi.customer_code,\n    fi.plant,\n    fi.revenue,\n    fi.quantity,\n    fi.\"revenue(D/KG)\",\n    fi.cogs,\n    fi.\"cogs(+)\",\n    fi.\"gross Contribution (3) =  (1) - (+)\",\n    fi.\"manufacturing cost (4)\",\n    fi.\"gross margin (5) = (3) - (4)\",\n    fi.\"mkt & Commercial Costs (6)\",\n    fi.\"administrative costs (7)\",\n    fi.\"chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\n    fi.\"thu nh\u1eadp t\u00e0i ch\u00ednh(9)\",\n    fi.\"10-raw material\",\n    fi.\"20-packaging\",\n    fi.\"30-subcontract\",\n    fi.\"40-delivery cost sto\",\n    fi.\"51-emp.outsourcing\",\n    fi.\"52-consum&supplies\",\n    fi.\"53-energy& utilities\",\n    fi.\"59-other expenses\",\n    fi.\"61-wages\",\n    fi.\"62-other wages\",\n    fi.\"63-depreciation exp\",\n    fi.\"69-other expenses\",\n    fi.\"80-merchendise\",\n    fi.\"90-inter.profit\"\n\nfrom \"food\".\"nghi_dev\".\"food_int_fi_0fi_acdoca_10__filtered_to_revenue\" fi\nleft join \"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0distr_chan_text\" cn \non fi.channel_code = cn.code\n\nleft join \"food\".\"nghi_dev\".\"food_mapping_pl_plgroup\" pl\non fi.\"G/L Account\" = pl.\"G/L Account\"\n\nleft join \"food\".\"nghi_dev\".\"food_mapping_costcenter_costcentergroup\" cc\non fi.costcenter_code = cc.costcenter_code\n\nleft join \"food\".\"nghi_dev\".\"food_stg_sap_s4__md_0costcenter_text\" ctxt\non fi.costcenter_code = ctxt.code\n\nleft join \"food\".\"nghi_dev\".\"food_mapping_hierarchies_costelement\" clh\non fi.\"G/L Account\" = clh.cost_element_code\n\nunion all\n\nselect\n    cat_code,\n    cat_name,\n    subcat_1_code,\n    subcat_1_name,\n    subcat_2_code,\n    subcat_2_name,\n    \"G/L Account\",\n    expense_group_code,\n    expense_group_name,\n    company_code,\n    posting_date,\n    channel_code,\n    channel_name,\n    matnr,\n    value_type, \n    fiscyearper,\n    kpi_code,\n    kpi_name,\n    pl_code, \n    pl_name, \n    pl_group_code, \n    pl_group_name,\n    costcenter_code,\n    costcenter_name,\n    costcenter_full_name,\n    costcenter_group_code,\n    costcenter_group_name,\n    '' as hier_cost_element_name,\n    '' as cost_element_code,\n    '' as customer_code,\n    '' as plant,\n    budget * 1000 as revenue, \n    quantity,\n    \"revenue(D/KG)\",\n    cogs,\n    \"cogs(+)\",\n    \"gross Contribution (3) =  (1) - (+)\",\n    \"manufacturing cost (4)\",\n    \"gross margin (5) = (3) - (4)\",\n    \"mkt & Commercial Costs (6)\",\n    \"administrative costs (7)\",\n    \"chi ph\u00ed t\u00e0i ch\u00ednh(8)\",\n    \"thu nh\u1eadp t\u00e0i ch\u00ednh(9)\",\n    0 as \"10-raw material\",\n    0 as \"20-packaging\",\n    0 as \"30-subcontract\",\n    0 as \"40-delivery cost sto\",\n    0 as \"51-emp.outsourcing\",\n    0 as \"52-consum&supplies\",\n    0 as \"53-energy& utilities\",\n    0 as \"59-other expenses\",\n    0 as \"61-wages\",\n    0 as \"62-other wages\",\n    0 as \"63-depreciation exp\",\n    0 as \"69-other expenses\",\n    0 as \"80-merchendise\",\n    0 as \"90-inter.profit\"\n\nfrom \"food\".\"nghi_dev\".\"kpi_budget\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sales_group.food_stg_sap_s4__fi_0fi_acdoca_10": {"database": "food", "schema": "nghi_dev", "name": "food_stg_sap_s4__fi_0fi_acdoca_10", "resource_type": "model", "package_name": "sales_group", "path": "food\\staging\\sap_s4\\food_stg_sap_s4__fi_0fi_acdoca_10.sql", "original_file_path": "models\\food\\staging\\sap_s4\\food_stg_sap_s4__fi_0fi_acdoca_10.sql", "unique_id": "model.sales_group.food_stg_sap_s4__fi_0fi_acdoca_10", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_stg_sap_s4__fi_0fi_acdoca_10"], "alias": "food_stg_sap_s4__fi_0fi_acdoca_10", "checksum": {"name": "sha256", "checksum": "a46247e8e9ace12c012384e775c7417cd0c5915040ba0930cd2afb4277d54e20"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "food", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\sales_group\\models\\food\\staging\\sap_s4\\food_stg_sap_s4__fi_0fi_acdoca_10.sql", "deferred": false, "unrendered_config": {"database": "{{ 'food' if target.name == 'prod' else target.database }}", "bind": "{{ true if target.name == 'prod' else false }}", "materialized": "view"}, "created_at": 1692244719.2935045, "relation_name": "\"food\".\"nghi_dev\".\"food_stg_sap_s4__fi_0fi_acdoca_10\"", "raw_code": "{% if target.name == 'prod' %}\r\n{{\r\n    config(\r\n        pre_hook=\"update {{ source('food_sap_s4', 'fi_0fi_acdoca_10') }} set _created_at = sysdate where _created_at is null\",\r\n        materialized=\"incremental\",\r\n        unique_key=[\"rclnt\", \"rldnr\", \"rbukrs\", \"gjahr\", \"belnr\", \"docln\"],\r\n        incremental_strategy=\"delete+insert\",\r\n    )\r\n}}\r\n{% endif %}\r\n\r\nwith source as (\r\n\r\n    {% if is_incremental() %}\r\n        with last_run as (select max(_created_at) as max_created_at from {{ this }})\r\n    {% endif %}\r\n\r\n    select *\r\n    from {{ source(\"food_sap_s4\", \"fi_0fi_acdoca_10\") }}\r\n    where\r\n        {% if target.name == 'prod' %}\r\n            budat >= '20220101'\r\n        {% else %}\r\n            budat >= to_char(current_date - interval '1 day', 'YYYYMMDD')\r\n        {% endif %}\r\n        {% if is_incremental() %}\r\n            and _created_at > (select max_created_at from last_run)\r\n        {% endif %}\r\n        \r\n),\r\n\r\ndeduped as (\r\n    {{\r\n        dbt_utils.deduplicate(\r\n            relation=\"source\",\r\n            partition_by=\"rclnt, rldnr, rbukrs, gjahr, belnr, docln\",\r\n            order_by=\"_created_at desc\",\r\n        )\r\n    }}\r\n)\r\n\r\nselect * from deduped", "language": "sql", "refs": [], "sources": [["food_sap_s4", "fi_0fi_acdoca_10"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.deduplicate"], "nodes": ["source.sales_group.food_sap_s4.fi_0fi_acdoca_10"]}, "compiled_path": "target\\compiled\\sales_group\\models\\food\\staging\\sap_s4\\food_stg_sap_s4__fi_0fi_acdoca_10.sql", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    \n\n    select *\n    from \"food\".\"stg_sap_s4\".\"fi_0fi_acdoca_10\"\n    where\n        \n            budat >= to_char(current_date - interval '1 day', 'YYYYMMDD')\n        \n        \n        \n),\n\ndeduped as (\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by rclnt, rldnr, rbukrs, gjahr, belnr, docln\n                order by _created_at desc\n            ) as rn\n        from source as _inner\n    )\n\n    select\n        distinct data.*\n    from source as data\n    \n    natural join row_numbered\n    where row_numbered.rn = 1\n)\n\nselect * from deduped", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}}, "sources": {"source.sales_group.farm_excel_sales.master_data_farm_info": {"database": "farm", "schema": "stg_excel_sales", "name": "master_data_farm_info", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\excel\\sales\\_farm_excel_sales__sources.yml", "original_file_path": "models\\farm\\staging\\excel\\sales\\_farm_excel_sales__sources.yml", "unique_id": "source.sales_group.farm_excel_sales.master_data_farm_info", "fqn": ["sales_group", "farm", "staging", "excel", "sales", "farm_excel_sales", "master_data_farm_info"], "source_name": "farm_excel_sales", "source_description": "", "loader": "", "identifier": "master_data_farm_info", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_excel_sales\".\"master_data_farm_info\"", "created_at": 1692186447.163714}, "source.sales_group.farm_excel_sales.master_data_adj": {"database": "farm", "schema": "stg_excel_sales", "name": "master_data_adj", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\excel\\sales\\_farm_excel_sales__sources.yml", "original_file_path": "models\\farm\\staging\\excel\\sales\\_farm_excel_sales__sources.yml", "unique_id": "source.sales_group.farm_excel_sales.master_data_adj", "fqn": ["sales_group", "farm", "staging", "excel", "sales", "farm_excel_sales", "master_data_adj"], "source_name": "farm_excel_sales", "source_description": "", "loader": "", "identifier": "master_data_adj", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_excel_sales\".\"master_data_adj\"", "created_at": 1692186447.163714}, "source.sales_group.farm_excel_sales.master_data_rev": {"database": "farm", "schema": "stg_excel_sales", "name": "master_data_rev", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\excel\\sales\\_farm_excel_sales__sources.yml", "original_file_path": "models\\farm\\staging\\excel\\sales\\_farm_excel_sales__sources.yml", "unique_id": "source.sales_group.farm_excel_sales.master_data_rev", "fqn": ["sales_group", "farm", "staging", "excel", "sales", "farm_excel_sales", "master_data_rev"], "source_name": "farm_excel_sales", "source_description": "", "loader": "", "identifier": "master_data_rev", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_excel_sales\".\"master_data_rev\"", "created_at": 1692186447.163714}, "source.sales_group.farm_redshift__prd__dwh.f_actualsales": {"database": "prd", "schema": "dwh", "name": "f_actualsales", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\redshift\\_farm_redshift__sources.yml", "original_file_path": "models\\farm\\staging\\redshift\\_farm_redshift__sources.yml", "unique_id": "source.sales_group.farm_redshift__prd__dwh.f_actualsales", "fqn": ["sales_group", "farm", "staging", "redshift", "farm_redshift__prd__dwh", "f_actualsales"], "source_name": "farm_redshift__prd__dwh", "source_description": "", "loader": "", "identifier": "f_actualsales", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"prd\".\"dwh\".\"f_actualsales\"", "created_at": 1692186447.163714}, "source.sales_group.farm_redshift__prd__dwh.d_material": {"database": "prd", "schema": "dwh", "name": "d_material", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\redshift\\_farm_redshift__sources.yml", "original_file_path": "models\\farm\\staging\\redshift\\_farm_redshift__sources.yml", "unique_id": "source.sales_group.farm_redshift__prd__dwh.d_material", "fqn": ["sales_group", "farm", "staging", "redshift", "farm_redshift__prd__dwh", "d_material"], "source_name": "farm_redshift__prd__dwh", "source_description": "", "loader": "", "identifier": "d_material", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"prd\".\"dwh\".\"d_material\"", "created_at": 1692186447.163714}, "source.sales_group.farm_redshift__prd__dwh.d_distributionchannel": {"database": "prd", "schema": "dwh", "name": "d_distributionchannel", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\redshift\\_farm_redshift__sources.yml", "original_file_path": "models\\farm\\staging\\redshift\\_farm_redshift__sources.yml", "unique_id": "source.sales_group.farm_redshift__prd__dwh.d_distributionchannel", "fqn": ["sales_group", "farm", "staging", "redshift", "farm_redshift__prd__dwh", "d_distributionchannel"], "source_name": "farm_redshift__prd__dwh", "source_description": "", "loader": "", "identifier": "d_distributionchannel", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"prd\".\"dwh\".\"d_distributionchannel\"", "created_at": 1692186447.163714}, "source.sales_group.farm_redshift__prd__dwh.d_salesmanager": {"database": "prd", "schema": "dwh", "name": "d_salesmanager", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\redshift\\_farm_redshift__sources.yml", "original_file_path": "models\\farm\\staging\\redshift\\_farm_redshift__sources.yml", "unique_id": "source.sales_group.farm_redshift__prd__dwh.d_salesmanager", "fqn": ["sales_group", "farm", "staging", "redshift", "farm_redshift__prd__dwh", "d_salesmanager"], "source_name": "farm_redshift__prd__dwh", "source_description": "", "loader": "", "identifier": "d_salesmanager", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"prd\".\"dwh\".\"d_salesmanager\"", "created_at": 1692186447.163714}, "source.sales_group.farm_sol_dnb2001app.vsdwh_salesvolumed": {"database": "farm", "schema": "stg_sol_dnb2001app", "name": "vsdwh_salesvolumed", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_dnb2001app.vsdwh_salesvolumed", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_dnb2001app", "vsdwh_salesvolumed"], "source_name": "farm_sol_dnb2001app", "source_description": "", "loader": "", "identifier": "vsdwh_salesvolumed", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_dnb2001app\".\"vsdwh_salesvolumed\"", "created_at": 1692186447.164714}, "source.sales_group.farm_sol_dnb2001app.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_dnb2001app", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_dnb2001app.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_dnb2001app", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_dnb2001app", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_dnb2001app\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.164714}, "source.sales_group.farm_sol_fasiaapp.vsdwh_salesvolumed": {"database": "farm", "schema": "stg_sol_fasiaapp", "name": "vsdwh_salesvolumed", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_fasiaapp.vsdwh_salesvolumed", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_fasiaapp", "vsdwh_salesvolumed"], "source_name": "farm_sol_fasiaapp", "source_description": "", "loader": "", "identifier": "vsdwh_salesvolumed", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_fasiaapp\".\"vsdwh_salesvolumed\"", "created_at": 1692186447.164714}, "source.sales_group.farm_sol_fasiaapp.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_fasiaapp", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_fasiaapp.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_fasiaapp", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_fasiaapp", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_fasiaapp\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.164714}, "source.sales_group.farm_sol_arwhyapp.vsdwh_salesvolumed": {"database": "farm", "schema": "stg_sol_arwhyapp", "name": "vsdwh_salesvolumed", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_arwhyapp.vsdwh_salesvolumed", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_arwhyapp", "vsdwh_salesvolumed"], "source_name": "farm_sol_arwhyapp", "source_description": "", "loader": "", "identifier": "vsdwh_salesvolumed", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_arwhyapp\".\"vsdwh_salesvolumed\"", "created_at": 1692186447.164714}, "source.sales_group.farm_sol_arwhyapp.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_arwhyapp", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_arwhyapp.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_arwhyapp", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_arwhyapp", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_arwhyapp\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.164714}, "source.sales_group.farm_sol_mtr2001app.vsdwh_salesvolumed": {"database": "farm", "schema": "stg_sol_mtr2001app", "name": "vsdwh_salesvolumed", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_mtr2001app.vsdwh_salesvolumed", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_mtr2001app", "vsdwh_salesvolumed"], "source_name": "farm_sol_mtr2001app", "source_description": "", "loader": "", "identifier": "vsdwh_salesvolumed", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_mtr2001app\".\"vsdwh_salesvolumed\"", "created_at": 1692186447.164714}, "source.sales_group.farm_sol_mtr2001app.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_mtr2001app", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_mtr2001app.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_mtr2001app", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_mtr2001app", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_mtr2001app\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.164714}, "source.sales_group.farm_sol_mtr1001app.vsdwh_salesvolumed": {"database": "farm", "schema": "stg_sol_mtr1001app", "name": "vsdwh_salesvolumed", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_mtr1001app.vsdwh_salesvolumed", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_mtr1001app", "vsdwh_salesvolumed"], "source_name": "farm_sol_mtr1001app", "source_description": "", "loader": "", "identifier": "vsdwh_salesvolumed", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_mtr1001app\".\"vsdwh_salesvolumed\"", "created_at": 1692186447.165714}, "source.sales_group.farm_sol_mtr1001app.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_mtr1001app", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_mtr1001app.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_mtr1001app", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_mtr1001app", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_mtr1001app\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.165714}, "source.sales_group.farm_sol_mtr2002app.vsdwh_salesvolumed": {"database": "farm", "schema": "stg_sol_mtr2002app", "name": "vsdwh_salesvolumed", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_mtr2002app.vsdwh_salesvolumed", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_mtr2002app", "vsdwh_salesvolumed"], "source_name": "farm_sol_mtr2002app", "source_description": "", "loader": "", "identifier": "vsdwh_salesvolumed", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_mtr2002app\".\"vsdwh_salesvolumed\"", "created_at": 1692186447.165714}, "source.sales_group.farm_sol_mtr2002app.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_mtr2002app", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_mtr2002app.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_mtr2002app", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_mtr2002app", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_mtr2002app\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.165714}, "source.sales_group.farm_sol_cbd1001app.vsdwh_salesvolumed": {"database": "farm", "schema": "stg_sol_cbd1001app", "name": "vsdwh_salesvolumed", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_cbd1001app.vsdwh_salesvolumed", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_cbd1001app", "vsdwh_salesvolumed"], "source_name": "farm_sol_cbd1001app", "source_description": "", "loader": "", "identifier": "vsdwh_salesvolumed", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_cbd1001app\".\"vsdwh_salesvolumed\"", "created_at": 1692186447.165714}, "source.sales_group.farm_sol_cbd1001app.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_cbd1001app", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_cbd1001app.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_cbd1001app", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_cbd1001app", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_cbd1001app\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.165714}, "source.sales_group.farm_sol_arwblapp.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_arwblapp", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_arwblapp.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_arwblapp", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_arwblapp", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_arwblapp\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.165714}, "source.sales_group.farm_sol_bsh1001app.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_bsh1001app", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_bsh1001app.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_bsh1001app", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_bsh1001app", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_bsh1001app\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.1666882}, "source.sales_group.farm_sol_starnapp.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_starnapp", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_starnapp.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_starnapp", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_starnapp", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_starnapp\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.1666882}, "source.sales_group.farm_sol_gfcamapp1.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_gfcamapp1", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_gfcamapp1.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_gfcamapp1", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_gfcamapp1", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_gfcamapp1\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.1666882}, "source.sales_group.farm_sol_mym1001app.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_mym1001app", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_mym1001app.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_mym1001app", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_mym1001app", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_mym1001app\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.1666882}, "source.sales_group.farm_sol_laoapp.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_laoapp", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_laoapp.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_laoapp", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_laoapp", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_laoapp\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.1666882}, "source.sales_group.farm_sol_gfvmmapp.xp_01610ab_accthist_erp_final": {"database": "farm", "schema": "stg_sol_gfvmmapp", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "original_file_path": "models\\farm\\staging\\sol\\_farm_sol__sources.yml", "unique_id": "source.sales_group.farm_sol_gfvmmapp.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "farm", "staging", "sol", "farm_sol_gfvmmapp", "xp_01610ab_accthist_erp_final"], "source_name": "farm_sol_gfvmmapp", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"farm\".\"stg_sol_gfvmmapp\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.1666882}, "source.sales_group.feed_excel_donavet.tb_donavet_1100": {"database": "feed", "schema": "stg_excel_donavet", "name": "tb_donavet_1100", "resource_type": "source", "package_name": "sales_group", "path": "models\\feed\\staging\\excel\\_feed_excel__sources.yml", "original_file_path": "models\\feed\\staging\\excel\\_feed_excel__sources.yml", "unique_id": "source.sales_group.feed_excel_donavet.tb_donavet_1100", "fqn": ["sales_group", "feed", "staging", "excel", "feed_excel_donavet", "tb_donavet_1100"], "source_name": "feed_excel_donavet", "source_description": "", "loader": "", "identifier": "tb_donavet_1100", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"feed\".\"stg_excel_donavet\".\"tb_donavet_1100\"", "created_at": 1692186447.1666882}, "source.sales_group.feed_excel_donavet.tb_account_mapping": {"database": "feed", "schema": "stg_excel_donavet", "name": "tb_account_mapping", "resource_type": "source", "package_name": "sales_group", "path": "models\\feed\\staging\\excel\\_feed_excel__sources.yml", "original_file_path": "models\\feed\\staging\\excel\\_feed_excel__sources.yml", "unique_id": "source.sales_group.feed_excel_donavet.tb_account_mapping", "fqn": ["sales_group", "feed", "staging", "excel", "feed_excel_donavet", "tb_account_mapping"], "source_name": "feed_excel_donavet", "source_description": "", "loader": "", "identifier": "tb_account_mapping", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"feed\".\"stg_excel_donavet\".\"tb_account_mapping\"", "created_at": 1692186447.1677003}, "source.sales_group.feed_sap_ecc.fi_0fi_gl_12": {"database": "feed", "schema": "stg_sap_ecc", "name": "fi_0fi_gl_12", "resource_type": "source", "package_name": "sales_group", "path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "original_file_path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "unique_id": "source.sales_group.feed_sap_ecc.fi_0fi_gl_12", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_sap_ecc", "fi_0fi_gl_12"], "source_name": "feed_sap_ecc", "source_description": "", "loader": "", "identifier": "fi_0fi_gl_12", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"feed\".\"stg_sap_ecc\".\"fi_0fi_gl_12\"", "created_at": 1692186447.1677003}, "source.sales_group.feed_sap_ecc.draft_mb51_006": {"database": "feed", "schema": "stg_sap_ecc", "name": "draft_mb51_006", "resource_type": "source", "package_name": "sales_group", "path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "original_file_path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "unique_id": "source.sales_group.feed_sap_ecc.draft_mb51_006", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_sap_ecc", "draft_mb51_006"], "source_name": "feed_sap_ecc", "source_description": "", "loader": "", "identifier": "draft_mb51_006", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"feed\".\"stg_sap_ecc\".\"draft_mb51_006\"", "created_at": 1692186447.1677003}, "source.sales_group.feed_sap_ecc.draft_mm60_006": {"database": "feed", "schema": "stg_sap_ecc", "name": "draft_mm60_006", "resource_type": "source", "package_name": "sales_group", "path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "original_file_path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "unique_id": "source.sales_group.feed_sap_ecc.draft_mm60_006", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_sap_ecc", "draft_mm60_006"], "source_name": "feed_sap_ecc", "source_description": "", "loader": "", "identifier": "draft_mm60_006", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"feed\".\"stg_sap_ecc\".\"draft_mm60_006\"", "created_at": 1692186447.1677003}, "source.sales_group.feed_sap_ecc.draft_zmllistn_005": {"database": "feed", "schema": "stg_sap_ecc", "name": "draft_zmllistn_005", "resource_type": "source", "package_name": "sales_group", "path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "original_file_path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "unique_id": "source.sales_group.feed_sap_ecc.draft_zmllistn_005", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_sap_ecc", "draft_zmllistn_005"], "source_name": "feed_sap_ecc", "source_description": "", "loader": "", "identifier": "draft_zmllistn_005", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"feed\".\"stg_sap_ecc\".\"draft_zmllistn_005\"", "created_at": 1692186447.1677003}, "source.sales_group.feed_sap_ecc.draft_zppr0019_006": {"database": "feed", "schema": "stg_sap_ecc", "name": "draft_zppr0019_006", "resource_type": "source", "package_name": "sales_group", "path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "original_file_path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "unique_id": "source.sales_group.feed_sap_ecc.draft_zppr0019_006", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_sap_ecc", "draft_zppr0019_006"], "source_name": "feed_sap_ecc", "source_description": "", "loader": "", "identifier": "draft_zppr0019_006", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"feed\".\"stg_sap_ecc\".\"draft_zppr0019_006\"", "created_at": 1692186447.1677003}, "source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_ke24_006": {"database": "feed", "schema": "draft_dev", "name": "feed_seed_margin_draft_ke24_006", "resource_type": "source", "package_name": "sales_group", "path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "original_file_path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "unique_id": "source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_ke24_006", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_sap_ecc_draft", "feed_seed_margin_draft_ke24_006"], "source_name": "feed_sap_ecc_draft", "source_description": "", "loader": "", "identifier": "feed_seed_margin_draft_ke24_006", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"feed\".\"draft_dev\".\"feed_seed_margin_draft_ke24_006\"", "created_at": 1692186447.1677003}, "source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_ke25_006": {"database": "feed", "schema": "draft_dev", "name": "feed_seed_margin_draft_ke25_006", "resource_type": "source", "package_name": "sales_group", "path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "original_file_path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "unique_id": "source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_ke25_006", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_sap_ecc_draft", "feed_seed_margin_draft_ke25_006"], "source_name": "feed_sap_ecc_draft", "source_description": "", "loader": "", "identifier": "feed_seed_margin_draft_ke25_006", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"feed\".\"draft_dev\".\"feed_seed_margin_draft_ke25_006\"", "created_at": 1692186447.1677003}, "source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_mb5b_005": {"database": "feed", "schema": "draft_dev", "name": "feed_seed_margin_draft_mb5b_005", "resource_type": "source", "package_name": "sales_group", "path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "original_file_path": "models\\feed\\staging\\sap_ecc\\_feed_sap_ecc__sources.yml", "unique_id": "source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_mb5b_005", "fqn": ["sales_group", "feed", "staging", "sap_ecc", "feed_sap_ecc_draft", "feed_seed_margin_draft_mb5b_005"], "source_name": "feed_sap_ecc_draft", "source_description": "", "loader": "", "identifier": "feed_seed_margin_draft_mb5b_005", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"feed\".\"draft_dev\".\"feed_seed_margin_draft_mb5b_005\"", "created_at": 1692186447.1686997}, "source.sales_group.feed_excel_gfdnbapp.cn_dnb_tb_1000": {"database": "feed", "schema": "stg_excel_gfdnbapp", "name": "cn_dnb_tb_1000", "resource_type": "source", "package_name": "sales_group", "path": "models\\feed\\staging\\sol\\_feed_solomon__sources.yml", "original_file_path": "models\\feed\\staging\\sol\\_feed_solomon__sources.yml", "unique_id": "source.sales_group.feed_excel_gfdnbapp.cn_dnb_tb_1000", "fqn": ["sales_group", "feed", "staging", "sol", "feed_excel_gfdnbapp", "cn_dnb_tb_1000"], "source_name": "feed_excel_gfdnbapp", "source_description": "", "loader": "", "identifier": "cn_dnb_tb_1000", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"feed\".\"stg_excel_gfdnbapp\".\"cn_dnb_tb_1000\"", "created_at": 1692186447.1686997}, "source.sales_group.food_excel_sales.master_data_customer_lbc": {"database": "food", "schema": "stg_excel_sales", "name": "master_data_customer_lbc", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "original_file_path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "unique_id": "source.sales_group.food_excel_sales.master_data_customer_lbc", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_excel_sales", "master_data_customer_lbc"], "source_name": "food_excel_sales", "source_description": "", "loader": "", "identifier": "master_data_customer_lbc", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_excel_sales\".\"master_data_customer_lbc\"", "created_at": 1692186447.1686997}, "source.sales_group.food_excel_sales.md_channels": {"database": "food", "schema": "stg_excel_sales", "name": "md_channels", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "original_file_path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "unique_id": "source.sales_group.food_excel_sales.md_channels", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_excel_sales", "md_channels"], "source_name": "food_excel_sales", "source_description": "", "loader": "", "identifier": "md_channels", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_excel_sales\".\"md_channels\"", "created_at": 1692186447.1686997}, "source.sales_group.food_excel_sales.md_sales_groups": {"database": "food", "schema": "stg_excel_sales", "name": "md_sales_groups", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "original_file_path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "unique_id": "source.sales_group.food_excel_sales.md_sales_groups", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_excel_sales", "md_sales_groups"], "source_name": "food_excel_sales", "source_description": "", "loader": "", "identifier": "md_sales_groups", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_excel_sales\".\"md_sales_groups\"", "created_at": 1692186447.1686997}, "source.sales_group.food_excel_sales.md_customer_groups": {"database": "food", "schema": "stg_excel_sales", "name": "md_customer_groups", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "original_file_path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "unique_id": "source.sales_group.food_excel_sales.md_customer_groups", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_excel_sales", "md_customer_groups"], "source_name": "food_excel_sales", "source_description": "", "loader": "", "identifier": "md_customer_groups", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_excel_sales\".\"md_customer_groups\"", "created_at": 1692186447.1686997}, "source.sales_group.food_excel_sales.sales_target_by_channels": {"database": "food", "schema": "stg_excel_sales", "name": "sales_target_by_channels", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "original_file_path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "unique_id": "source.sales_group.food_excel_sales.sales_target_by_channels", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_excel_sales", "sales_target_by_channels"], "source_name": "food_excel_sales", "source_description": "", "loader": "", "identifier": "sales_target_by_channels", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_excel_sales\".\"sales_target_by_channels\"", "created_at": 1692186447.1686997}, "source.sales_group.food_excel_sales.sales_target_by_channels_products": {"database": "food", "schema": "stg_excel_sales", "name": "sales_target_by_channels_products", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "original_file_path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "unique_id": "source.sales_group.food_excel_sales.sales_target_by_channels_products", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_excel_sales", "sales_target_by_channels_products"], "source_name": "food_excel_sales", "source_description": "", "loader": "", "identifier": "sales_target_by_channels_products", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_excel_sales\".\"sales_target_by_channels_products\"", "created_at": 1692186447.1686997}, "source.sales_group.food_excel_sales.md_budget_bpkt": {"database": "food", "schema": "stg_excel_sales", "name": "md_budget_bpkt", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "original_file_path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "unique_id": "source.sales_group.food_excel_sales.md_budget_bpkt", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_excel_sales", "md_budget_bpkt"], "source_name": "food_excel_sales", "source_description": "", "loader": "", "identifier": "md_budget_bpkt", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_excel_sales\".\"md_budget_bpkt\"", "created_at": 1692186447.1686997}, "source.sales_group.food_excel_sales.md_products": {"database": "food", "schema": "stg_excel_sales", "name": "md_products", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "original_file_path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "unique_id": "source.sales_group.food_excel_sales.md_products", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_excel_sales", "md_products"], "source_name": "food_excel_sales", "source_description": "", "loader": "", "identifier": "md_products", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_excel_sales\".\"md_products\"", "created_at": 1692186447.1696997}, "source.sales_group.food_excel_sales.md_products_conversion_rate_lbc": {"database": "food", "schema": "stg_excel_sales", "name": "md_products_conversion_rate_lbc", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "original_file_path": "models\\food\\staging\\excel\\sales\\_food_excel_sales__sources.yml", "unique_id": "source.sales_group.food_excel_sales.md_products_conversion_rate_lbc", "fqn": ["sales_group", "food", "staging", "excel", "sales", "food_excel_sales", "md_products_conversion_rate_lbc"], "source_name": "food_excel_sales", "source_description": "", "loader": "", "identifier": "md_products_conversion_rate_lbc", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_excel_sales\".\"md_products_conversion_rate_lbc\"", "created_at": 1692186447.1696997}, "source.sales_group.food_misa_22.generalledger": {"database": "food", "schema": "stg_misa_lbc2022", "name": "generalledger", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "original_file_path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "unique_id": "source.sales_group.food_misa_22.generalledger", "fqn": ["sales_group", "food", "staging", "misa", "food_misa_22", "generalledger"], "source_name": "food_misa_22", "source_description": "", "loader": "", "identifier": "generalledger", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_misa_lbc2022\".\"generalledger\"", "created_at": 1692186447.1696997}, "source.sales_group.food_misa_22.unit": {"database": "food", "schema": "stg_misa_lbc2022", "name": "unit", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "original_file_path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "unique_id": "source.sales_group.food_misa_22.unit", "fqn": ["sales_group", "food", "staging", "misa", "food_misa_22", "unit"], "source_name": "food_misa_22", "source_description": "", "loader": "", "identifier": "unit", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_misa_lbc2022\".\"unit\"", "created_at": 1692186447.1696997}, "source.sales_group.food_misa_22.saorder": {"database": "food", "schema": "stg_misa_lbc2022", "name": "saorder", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "original_file_path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "unique_id": "source.sales_group.food_misa_22.saorder", "fqn": ["sales_group", "food", "staging", "misa", "food_misa_22", "saorder"], "source_name": "food_misa_22", "source_description": "", "loader": "", "identifier": "saorder", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_misa_lbc2022\".\"saorder\"", "created_at": 1692186447.1696997}, "source.sales_group.food_misa.generalledger": {"database": "food", "schema": "stg_misa_lbc2023", "name": "generalledger", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "original_file_path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "unique_id": "source.sales_group.food_misa.generalledger", "fqn": ["sales_group", "food", "staging", "misa", "food_misa", "generalledger"], "source_name": "food_misa", "source_description": "", "loader": "", "identifier": "generalledger", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_misa_lbc2023\".\"generalledger\"", "created_at": 1692186447.1696997}, "source.sales_group.food_misa.unit": {"database": "food", "schema": "stg_misa_lbc2023", "name": "unit", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "original_file_path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "unique_id": "source.sales_group.food_misa.unit", "fqn": ["sales_group", "food", "staging", "misa", "food_misa", "unit"], "source_name": "food_misa", "source_description": "", "loader": "", "identifier": "unit", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_misa_lbc2023\".\"unit\"", "created_at": 1692186447.1696997}, "source.sales_group.food_misa.saorder": {"database": "food", "schema": "stg_misa_lbc2023", "name": "saorder", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "original_file_path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "unique_id": "source.sales_group.food_misa.saorder", "fqn": ["sales_group", "food", "staging", "misa", "food_misa", "saorder"], "source_name": "food_misa", "source_description": "", "loader": "", "identifier": "saorder", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_misa_lbc2023\".\"saorder\"", "created_at": 1692186447.1706998}, "source.sales_group.food_excel_misa_lbc.tp_lbc_3200_v2": {"database": "food", "schema": "stg_excel_misa_lbc", "name": "tp_lbc_3200_v2", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "original_file_path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "unique_id": "source.sales_group.food_excel_misa_lbc.tp_lbc_3200_v2", "fqn": ["sales_group", "food", "staging", "misa", "food_excel_misa_lbc", "tp_lbc_3200_v2"], "source_name": "food_excel_misa_lbc", "source_description": "", "loader": "", "identifier": "tp_lbc_3200_v2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_excel_misa_lbc\".\"tp_lbc_3200_v2\"", "created_at": 1692186447.1706998}, "source.sales_group.food_excel_misa_lbc.tb_account_mapping": {"database": "food", "schema": "stg_excel_misa_lbc", "name": "tb_account_mapping", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "original_file_path": "models\\food\\staging\\misa\\_food_misa__sources.yml", "unique_id": "source.sales_group.food_excel_misa_lbc.tb_account_mapping", "fqn": ["sales_group", "food", "staging", "misa", "food_excel_misa_lbc", "tb_account_mapping"], "source_name": "food_excel_misa_lbc", "source_description": "", "loader": "", "identifier": "tb_account_mapping", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_excel_misa_lbc\".\"tb_account_mapping\"", "created_at": 1692186447.1706998}, "source.sales_group.food_sap_s4.md_0accnt_grp_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0accnt_grp_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0accnt_grp_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0accnt_grp_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0accnt_grp_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0accnt_grp_text\"", "created_at": 1692186447.1706998}, "source.sales_group.food_sap_s4.md_0comp_code_attr": {"database": "food", "schema": "stg_sap_s4", "name": "md_0comp_code_attr", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0comp_code_attr", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0comp_code_attr"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0comp_code_attr", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0comp_code_attr\"", "created_at": 1692186447.1706998}, "source.sales_group.food_sap_s4.md_0cust_group_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0cust_group_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0cust_group_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0cust_group_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0cust_group_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0cust_group_text\"", "created_at": 1692186447.1706998}, "source.sales_group.food_sap_s4.fi_0fi_acdoca_10": {"database": "food", "schema": "stg_sap_s4", "name": "fi_0fi_acdoca_10", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.fi_0fi_acdoca_10", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "fi_0fi_acdoca_10"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "fi_0fi_acdoca_10", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"fi_0fi_acdoca_10\"", "created_at": 1692186447.1706998}, "source.sales_group.food_sap_s4.md_0sales_grp_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0sales_grp_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0sales_grp_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0sales_grp_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0sales_grp_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0sales_grp_text\"", "created_at": 1692186447.1706998}, "source.sales_group.food_sap_s4.md_0customer_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0customer_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0customer_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0customer_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0customer_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0customer_text\"", "created_at": 1692186447.1716998}, "source.sales_group.food_sap_s4.md_0cust_grp1_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0cust_grp1_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0cust_grp1_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0cust_grp1_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0cust_grp1_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0cust_grp1_text\"", "created_at": 1692186447.1716998}, "source.sales_group.food_sap_s4.md_0cust_grp2_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0cust_grp2_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0cust_grp2_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0cust_grp2_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0cust_grp2_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0cust_grp2_text\"", "created_at": 1692186447.1716998}, "source.sales_group.food_sap_s4.md_0distr_chan_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0distr_chan_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0distr_chan_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0distr_chan_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0distr_chan_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0distr_chan_text\"", "created_at": 1692186447.1716998}, "source.sales_group.food_sap_s4.md_0material_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0material_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0material_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0material_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0material_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0material_text\"", "created_at": 1692186447.1716998}, "source.sales_group.food_sap_s4.md_0sales_off_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0sales_off_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0sales_off_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0sales_off_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0sales_off_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0sales_off_text\"", "created_at": 1692186447.1716998}, "source.sales_group.food_sap_s4.md_0plant_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0plant_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0plant_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0plant_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0plant_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0plant_text\"", "created_at": 1692186447.1716998}, "source.sales_group.food_sap_s4.md_0sales_dist_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0sales_dist_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0sales_dist_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0sales_dist_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0sales_dist_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0sales_dist_text\"", "created_at": 1692186447.1716998}, "source.sales_group.food_sap_s4.md_0matl_type_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0matl_type_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0matl_type_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0matl_type_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0matl_type_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0matl_type_text\"", "created_at": 1692186447.1727}, "source.sales_group.food_sap_s4.md_0material_attr": {"database": "food", "schema": "stg_sap_s4", "name": "md_0material_attr", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0material_attr", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0material_attr"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0material_attr", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0material_attr\"", "created_at": 1692186447.1727}, "source.sales_group.food_sap_s4.md_0prod_hier_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0prod_hier_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0prod_hier_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0prod_hier_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0prod_hier_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0prod_hier_text\"", "created_at": 1692186447.1727}, "source.sales_group.food_sap_s4.md_0comp_code_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0comp_code_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0comp_code_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0comp_code_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0comp_code_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0comp_code_text\"", "created_at": 1692186447.1727}, "source.sales_group.food_sap_s4.md_0costelmnt_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0costelmnt_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0costelmnt_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0costelmnt_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0costelmnt_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0costelmnt_text\"", "created_at": 1692186447.1727}, "source.sales_group.food_sap_s4.sd_2lis_13_vditm": {"database": "food", "schema": "stg_sap_s4", "name": "sd_2lis_13_vditm", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.sd_2lis_13_vditm", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "sd_2lis_13_vditm"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "sd_2lis_13_vditm", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"sd_2lis_13_vditm\"", "created_at": 1692186447.1727}, "source.sales_group.food_sap_s4.sd_2lis_11_vaitm": {"database": "food", "schema": "stg_sap_s4", "name": "sd_2lis_11_vaitm", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.sd_2lis_11_vaitm", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "sd_2lis_11_vaitm"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "sd_2lis_11_vaitm", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"sd_2lis_11_vaitm\"", "created_at": 1692186447.1727}, "source.sales_group.food_sap_s4.tbl_customer_sale_person": {"database": "food", "schema": "stg_sap_s4", "name": "tbl_customer_sale_person", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.tbl_customer_sale_person", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "tbl_customer_sale_person"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "tbl_customer_sale_person", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"tbl_customer_sale_person\"", "created_at": 1692186447.1727}, "source.sales_group.food_sap_s4.md_0costcenter_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0costcenter_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0costcenter_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0costcenter_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0costcenter_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0costcenter_text\"", "created_at": 1692186447.1736999}, "source.sales_group.food_sap_s4.mm_2lis_03_bf": {"database": "food", "schema": "stg_sap_s4", "name": "mm_2lis_03_bf", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.mm_2lis_03_bf", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "mm_2lis_03_bf"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "mm_2lis_03_bf", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"mm_2lis_03_bf\"", "created_at": 1692186447.1736999}, "source.sales_group.food_sap_s4.mm_2lis_03_um": {"database": "food", "schema": "stg_sap_s4", "name": "mm_2lis_03_um", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.mm_2lis_03_um", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "mm_2lis_03_um"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "mm_2lis_03_um", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"mm_2lis_03_um\"", "created_at": 1692186447.1736999}, "source.sales_group.food_sap_s4.fi_0fi_gl_12": {"database": "food", "schema": "stg_sap_s4", "name": "fi_0fi_gl_12", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.fi_0fi_gl_12", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "fi_0fi_gl_12"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "fi_0fi_gl_12", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"fi_0fi_gl_12\"", "created_at": 1692186447.1736999}, "source.sales_group.food_sap_s4.tbl_fcml_ccs_r_all_v": {"database": "food", "schema": "stg_sap_s4", "name": "tbl_fcml_ccs_r_all_v", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.tbl_fcml_ccs_r_all_v", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "tbl_fcml_ccs_r_all_v"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "tbl_fcml_ccs_r_all_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"tbl_fcml_ccs_r_all_v\"", "created_at": 1692186447.1736999}, "source.sales_group.food_sap_s4.md_0bill_type_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0bill_type_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0bill_type_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0bill_type_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0bill_type_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0bill_type_text\"", "created_at": 1692186447.1736999}, "source.sales_group.food_sap_s4.tbl_vbpa": {"database": "food", "schema": "stg_sap_s4", "name": "tbl_vbpa", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.tbl_vbpa", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "tbl_vbpa"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "tbl_vbpa", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"tbl_vbpa\"", "created_at": 1692186447.1736999}, "source.sales_group.food_sap_s4.tbl_ztt_zsdc0016": {"database": "food", "schema": "stg_sap_s4", "name": "tbl_ztt_zsdc0016", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.tbl_ztt_zsdc0016", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "tbl_ztt_zsdc0016"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "tbl_ztt_zsdc0016", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"tbl_ztt_zsdc0016\"", "created_at": 1692186447.1736999}, "source.sales_group.food_sap_s4.md_0ord_reason_text": {"database": "food", "schema": "stg_sap_s4", "name": "md_0ord_reason_text", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "original_file_path": "models\\food\\staging\\sap_s4\\_food_sap_s4__sources.yml", "unique_id": "source.sales_group.food_sap_s4.md_0ord_reason_text", "fqn": ["sales_group", "food", "staging", "sap_s4", "food_sap_s4", "md_0ord_reason_text"], "source_name": "food_sap_s4", "source_description": "", "loader": "", "identifier": "md_0ord_reason_text", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sap_s4\".\"md_0ord_reason_text\"", "created_at": 1692186447.1736999}, "source.sales_group.food_sol_gnf1001apprepl.vs_safoorderl_salesadmin": {"database": "food", "schema": "stg_sol_gnf1001apprepl", "name": "vs_safoorderl_salesadmin", "resource_type": "source", "package_name": "sales_group", "path": "models\\food\\staging\\sol\\_food_sol__sources.yml", "original_file_path": "models\\food\\staging\\sol\\_food_sol__sources.yml", "unique_id": "source.sales_group.food_sol_gnf1001apprepl.vs_safoorderl_salesadmin", "fqn": ["sales_group", "food", "staging", "sol", "food_sol_gnf1001apprepl", "vs_safoorderl_salesadmin"], "source_name": "food_sol_gnf1001apprepl", "source_description": "", "loader": "", "identifier": "vs_safoorderl_salesadmin", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"food\".\"stg_sol_gnf1001apprepl\".\"vs_safoorderl_salesadmin\"", "created_at": 1692186447.1746995}, "source.sales_group.group_excel_financial_statements.md_rate": {"database": "group", "schema": "stg_excel_financial_statements", "name": "md_rate", "resource_type": "source", "package_name": "sales_group", "path": "models\\group\\intermediate\\core\\_group__sources.yml", "original_file_path": "models\\group\\intermediate\\core\\_group__sources.yml", "unique_id": "source.sales_group.group_excel_financial_statements.md_rate", "fqn": ["sales_group", "group", "intermediate", "core", "group_excel_financial_statements", "md_rate"], "source_name": "group_excel_financial_statements", "source_description": "", "loader": "", "identifier": "md_rate", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"group\".\"stg_excel_financial_statements\".\"md_rate\"", "created_at": 1692186447.1746995}, "source.sales_group.qdt_sol_log5001app.xp_01610ab_accthist_erp_final": {"database": "qdt", "schema": "stg_sol_log5001app", "name": "xp_01610ab_accthist_erp_final", "resource_type": "source", "package_name": "sales_group", "path": "models\\qdt\\staging\\sol\\_qdt_sol__sources.yml", "original_file_path": "models\\qdt\\staging\\sol\\_qdt_sol__sources.yml", "unique_id": "source.sales_group.qdt_sol_log5001app.xp_01610ab_accthist_erp_final", "fqn": ["sales_group", "qdt", "staging", "sol", "qdt_sol_log5001app", "xp_01610ab_accthist_erp_final"], "source_name": "qdt_sol_log5001app", "source_description": "", "loader": "", "identifier": "xp_01610ab_accthist_erp_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"qdt\".\"stg_sol_log5001app\".\"xp_01610ab_accthist_erp_final\"", "created_at": 1692186447.1746995}, "source.sales_group.qdtek_excel_sales.customer": {"database": "tech", "schema": "stg_excel_sales", "name": "customer", "resource_type": "source", "package_name": "sales_group", "path": "models\\tech\\staging\\excel\\_tech_qdtek_excel_sales__sources.yml", "original_file_path": "models\\tech\\staging\\excel\\_tech_qdtek_excel_sales__sources.yml", "unique_id": "source.sales_group.qdtek_excel_sales.customer", "fqn": ["sales_group", "tech", "staging", "excel", "qdtek_excel_sales", "customer"], "source_name": "qdtek_excel_sales", "source_description": "", "loader": "", "identifier": "customer", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tech\".\"stg_excel_sales\".\"customer\"", "created_at": 1692186447.1746995}, "source.sales_group.qdtek_excel_sales.daily_sales": {"database": "tech", "schema": "stg_excel_sales", "name": "daily_sales", "resource_type": "source", "package_name": "sales_group", "path": "models\\tech\\staging\\excel\\_tech_qdtek_excel_sales__sources.yml", "original_file_path": "models\\tech\\staging\\excel\\_tech_qdtek_excel_sales__sources.yml", "unique_id": "source.sales_group.qdtek_excel_sales.daily_sales", "fqn": ["sales_group", "tech", "staging", "excel", "qdtek_excel_sales", "daily_sales"], "source_name": "qdtek_excel_sales", "source_description": "", "loader": "", "identifier": "daily_sales", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tech\".\"stg_excel_sales\".\"daily_sales\"", "created_at": 1692186447.1746995}, "source.sales_group.qdtek_excel_sales.material": {"database": "tech", "schema": "stg_excel_sales", "name": "material", "resource_type": "source", "package_name": "sales_group", "path": "models\\tech\\staging\\excel\\_tech_qdtek_excel_sales__sources.yml", "original_file_path": "models\\tech\\staging\\excel\\_tech_qdtek_excel_sales__sources.yml", "unique_id": "source.sales_group.qdtek_excel_sales.material", "fqn": ["sales_group", "tech", "staging", "excel", "qdtek_excel_sales", "material"], "source_name": "qdtek_excel_sales", "source_description": "", "loader": "", "identifier": "material", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tech\".\"stg_excel_sales\".\"material\"", "created_at": 1692186447.1746995}, "source.sales_group.qdtek_excel_sales.pipeline_crm": {"database": "tech", "schema": "stg_excel_sales", "name": "pipeline_crm", "resource_type": "source", "package_name": "sales_group", "path": "models\\tech\\staging\\excel\\_tech_qdtek_excel_sales__sources.yml", "original_file_path": "models\\tech\\staging\\excel\\_tech_qdtek_excel_sales__sources.yml", "unique_id": "source.sales_group.qdtek_excel_sales.pipeline_crm", "fqn": ["sales_group", "tech", "staging", "excel", "qdtek_excel_sales", "pipeline_crm"], "source_name": "qdtek_excel_sales", "source_description": "", "loader": "", "identifier": "pipeline_crm", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tech\".\"stg_excel_sales\".\"pipeline_crm\"", "created_at": 1692186447.1746995}, "source.sales_group.qdtek_excel_sales.forecast_budget": {"database": "tech", "schema": "stg_excel_sales", "name": "forecast_budget", "resource_type": "source", "package_name": "sales_group", "path": "models\\tech\\staging\\excel\\_tech_qdtek_excel_sales__sources.yml", "original_file_path": "models\\tech\\staging\\excel\\_tech_qdtek_excel_sales__sources.yml", "unique_id": "source.sales_group.qdtek_excel_sales.forecast_budget", "fqn": ["sales_group", "tech", "staging", "excel", "qdtek_excel_sales", "forecast_budget"], "source_name": "qdtek_excel_sales", "source_description": "", "loader": "", "identifier": "forecast_budget", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tech\".\"stg_excel_sales\".\"forecast_budget\"", "created_at": 1692186447.1756997}, "source.sales_group.qdtek_excel_sales.salesman": {"database": "tech", "schema": "stg_excel_sales", "name": "salesman", "resource_type": "source", "package_name": "sales_group", "path": "models\\tech\\staging\\excel\\_tech_qdtek_excel_sales__sources.yml", "original_file_path": "models\\tech\\staging\\excel\\_tech_qdtek_excel_sales__sources.yml", "unique_id": "source.sales_group.qdtek_excel_sales.salesman", "fqn": ["sales_group", "tech", "staging", "excel", "qdtek_excel_sales", "salesman"], "source_name": "qdtek_excel_sales", "source_description": "", "loader": "", "identifier": "salesman", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tech\".\"stg_excel_sales\".\"salesman\"", "created_at": 1692186447.1758318}, "source.sales_group.tech_excel_qdtek.tb_south_north_4000": {"database": "tech", "schema": "stg_excel_qdtek", "name": "tb_south_north_4000", "resource_type": "source", "package_name": "sales_group", "path": "models\\tech\\staging\\excel\\_tech_sol__sources.yml", "original_file_path": "models\\tech\\staging\\excel\\_tech_sol__sources.yml", "unique_id": "source.sales_group.tech_excel_qdtek.tb_south_north_4000", "fqn": ["sales_group", "tech", "staging", "excel", "tech_excel_qdtek", "tb_south_north_4000"], "source_name": "tech_excel_qdtek", "source_description": "", "loader": "", "identifier": "tb_south_north_4000", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tech\".\"stg_excel_qdtek\".\"tb_south_north_4000\"", "created_at": 1692186447.1762826}, "source.sales_group.tech_excel_qdtek.tb_qdtek_north": {"database": "tech", "schema": "stg_excel_qdtek", "name": "tb_qdtek_north", "resource_type": "source", "package_name": "sales_group", "path": "models\\tech\\staging\\excel\\_tech_sol__sources.yml", "original_file_path": "models\\tech\\staging\\excel\\_tech_sol__sources.yml", "unique_id": "source.sales_group.tech_excel_qdtek.tb_qdtek_north", "fqn": ["sales_group", "tech", "staging", "excel", "tech_excel_qdtek", "tb_qdtek_north"], "source_name": "tech_excel_qdtek", "source_description": "", "loader": "", "identifier": "tb_qdtek_north", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tech\".\"stg_excel_qdtek\".\"tb_qdtek_north\"", "created_at": 1692186447.1762826}, "source.sales_group.tech_excel_qdtek.tb_qdtek_south": {"database": "tech", "schema": "stg_excel_qdtek", "name": "tb_qdtek_south", "resource_type": "source", "package_name": "sales_group", "path": "models\\tech\\staging\\excel\\_tech_sol__sources.yml", "original_file_path": "models\\tech\\staging\\excel\\_tech_sol__sources.yml", "unique_id": "source.sales_group.tech_excel_qdtek.tb_qdtek_south", "fqn": ["sales_group", "tech", "staging", "excel", "tech_excel_qdtek", "tb_qdtek_south"], "source_name": "tech_excel_qdtek", "source_description": "", "loader": "", "identifier": "tb_qdtek_south", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tech\".\"stg_excel_qdtek\".\"tb_qdtek_south\"", "created_at": 1692186447.1762826}, "source.sales_group.tech_excel_qdtek.tb_account_mapping": {"database": "tech", "schema": "stg_excel_qdtek", "name": "tb_account_mapping", "resource_type": "source", "package_name": "sales_group", "path": "models\\tech\\staging\\excel\\_tech_sol__sources.yml", "original_file_path": "models\\tech\\staging\\excel\\_tech_sol__sources.yml", "unique_id": "source.sales_group.tech_excel_qdtek.tb_account_mapping", "fqn": ["sales_group", "tech", "staging", "excel", "tech_excel_qdtek", "tb_account_mapping"], "source_name": "tech_excel_qdtek", "source_description": "", "loader": "", "identifier": "tb_account_mapping", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tech\".\"stg_excel_qdtek\".\"tb_account_mapping\"", "created_at": 1692186447.1762826}, "source.sales_group.tech_excel_qdtek.tb_ntt_4300": {"database": "tech", "schema": "stg_excel_qdtek", "name": "tb_ntt_4300", "resource_type": "source", "package_name": "sales_group", "path": "models\\tech\\staging\\excel\\_tech_sol__sources.yml", "original_file_path": "models\\tech\\staging\\excel\\_tech_sol__sources.yml", "unique_id": "source.sales_group.tech_excel_qdtek.tb_ntt_4300", "fqn": ["sales_group", "tech", "staging", "excel", "tech_excel_qdtek", "tb_ntt_4300"], "source_name": "tech_excel_qdtek", "source_description": "", "loader": "", "identifier": "tb_ntt_4300", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tech\".\"stg_excel_qdtek\".\"tb_ntt_4300\"", "created_at": 1692186447.1762826}, "source.sales_group.tech_excel_ntt.tb_ntt_4300": {"database": "tech", "schema": "stg_excel_ntt", "name": "tb_ntt_4300", "resource_type": "source", "package_name": "sales_group", "path": "models\\tech\\staging\\excel\\_tech_sol__sources.yml", "original_file_path": "models\\tech\\staging\\excel\\_tech_sol__sources.yml", "unique_id": "source.sales_group.tech_excel_ntt.tb_ntt_4300", "fqn": ["sales_group", "tech", "staging", "excel", "tech_excel_ntt", "tb_ntt_4300"], "source_name": "tech_excel_ntt", "source_description": "", "loader": "", "identifier": "tb_ntt_4300", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tech\".\"stg_excel_ntt\".\"tb_ntt_4300\"", "created_at": 1692186447.1762826}}, "macros": {"macro.sales_group.apply_logic_process_data_consolidates": {"name": "apply_logic_process_data_consolidates", "resource_type": "macro", "package_name": "sales_group", "path": "macros\\apply_logic_process_data_consolidates.sql", "original_file_path": "macros\\apply_logic_process_data_consolidates.sql", "unique_id": "macro.sales_group.apply_logic_process_data_consolidates", "macro_sql": "{% macro apply_logic_process_data_consolidates(type_source,data,cur_type,sub_type) -%}\r\n    {% if type_source == 'solomon' and cur_type == '99' %}\r\n        with raw_data as (\r\n                select\r\n                    ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS number_id,\r\n                    left(endpernbr, 4) || '0' || right(endpernbr, 2) as period,\r\n                    legal,\r\n                    '00' || acct as racct,\r\n                    endpernbr,\r\n                    begpernbr,\r\n                    left(sub, 2) || '-' || substring(sub, 3, 3) as profit_center,\r\n                    sub,\r\n                    '10'::text as curtype,\r\n                    endingbalance as balance,\r\n                    dramttot as debit,\r\n                    cramttot as credit\r\n                from {{ data }}\r\n            union all\r\n                select\r\n                    ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS number_id,\r\n                    left(endpernbr, 4) || '0' || right(endpernbr, 2) as period,\r\n                    legal,\r\n                    '00' || acct as racct,\r\n                    endpernbr,\r\n                    begpernbr,\r\n                    left(sub, 2) || '-' || substring(sub, 3, 3) as profit_center,\r\n                    sub,\r\n                    '99'::text as curtype,\r\n                    endingbalance as balance,\r\n                    dramttot as debit,\r\n                    cramttot as credit\r\n                from {{ data }}\r\n                ),\r\n\r\n     {% elif type_source == 'solomon' and cur_type == '10' %}\r\n           with raw_data as (\r\n                select\r\n                    ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS number_id,\r\n                    left(endpernbr, 4) || '0' || right(endpernbr, 2) as period,\r\n                    legal,\r\n                    '00' || acct as racct,\r\n                    endpernbr,\r\n                    begpernbr,\r\n                    left(sub, 2) || '-' || substring(sub, 3, 3) as profit_center,\r\n                    sub,\r\n                    '10'::text as curtype,\r\n                    endingbalance as balance,\r\n                    dramttot as debit,\r\n                    cramttot as credit\r\n                from {{ data }}\r\n    ),\r\n    {% elif type_source == 'excel' and cur_type == '10' %}\r\n        with raw_data as  (\r\n                  select\r\n                    ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS number_id,\r\n                    period,\r\n                    a._racct,\r\n                    a._racct as racct,\r\n                    a.company_code,\r\n                    '{{sub_type}}'::text as legal,\r\n                    '10'::text as curtype,\r\n                    a.begin_debit_balance,\r\n                    a.end_debit_balance,\r\n                    a.begin_credit_balance,\r\n                    a.end_credit_balance,\r\n                    a.credit,\r\n                    a.debit,\r\n                    nvl(a.end_debit_balance,0) - nvl(a.end_credit_balance,0) as balance\r\n              from {{ data }} as a\r\n              {# left join {{ ref('consol_mapping_account_pl_to_account_sap_union') }} as b\r\n                on a._racct = b.racct_pl\r\n                and b.sub_type = '{{sub_type}}' #}\r\n              ),\r\n\r\n    {% elif (type_source == 'sap_s4' or type_source == 'sap_ecc') and cur_type == '10' %}\r\n        with raw_fi as (\r\n            select gl.*, \r\n            rbukrs as legal,--company\r\n            nvl(debit,0) - nvl(credit,0) as accumulated_balance\r\n            from {{ data }} gl\r\n            where\r\n                curtype = '10'\r\n                and valuetype = '010'\r\n                and kokrs = '1000'\r\n                and chartaccts = '1000'\r\n                --and fiscper >= '2022001'\r\n        ),\r\n        raw_data as (\r\n            select\r\n            ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS number_id,\r\n            a.period, \r\n            b.legal,\r\n            b.accumulated_balance as balance,\r\n            b.racct,\r\n            b.curtype,\r\n            b.prctr\r\n            from {{ ref(\"consol_fiscal_period\") }} as a\r\n            cross join raw_fi as b\r\n            where b.fiscper <= a.period and left(b.fiscper, 4) = left(a.period, 4)\r\n        ),\r\n\r\n    {%endif%}\r\n\r\n    {# excluded_ as (\r\n            select *\r\n            from {{ ref(\"consol_mapping_bs_gl_account\") }}\r\n            where excluded is not null\r\n        ),\r\n\r\n        included as (\r\n            select * from {{ ref(\"consol_mapping_bs_gl_account\") }} where excluded is null\r\n        ),\r\n\r\n        exclude_joined as (\r\n\r\n            select *, tbl.racct || excluded_.code as exc\r\n            from raw_data as tbl\r\n            join\r\n                excluded_\r\n                on tbl.racct >= excluded_._gl_account_from\r\n                and excluded_._gl_account_to >= tbl.racct\r\n\r\n        ),\r\n\r\n        include_joined as (\r\n            select\r\n                tbl.*,\r\n                included.code,\r\n                included._gl_account_from,\r\n                included._gl_account_to,\r\n                tbl.racct || included.code as inc\r\n\r\n            from raw_data as tbl\r\n            join included\r\n            on tbl.racct >= included._gl_account_from\r\n            and included._gl_account_to >= tbl.racct\r\n\r\n        ),\r\n\r\n        final_data as (\r\n            select include_joined.*\r\n            from include_joined\r\n            where inc not in (select exc from exclude_joined)\r\n        ) #}\r\n    final_data as (\r\n        select * from raw_data\r\n    )\r\n\r\n    select\r\n    distinct\r\n        number_id::text,\r\n        period::text,\r\n        {# code, #}\r\n        legal::text,\r\n        racct::text,\r\n        curtype::text,\r\n        balance::decimal(20,2),\r\n\r\n        {% if type_source == 'sap_ecc' %}\r\n            prctr as profit_center\r\n        {% else %}\r\n            ''::text as profit_center\r\n        {% endif %}\r\n\r\n        from final_data\r\n\r\n    {%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3074553, "supported_languages": null}, "macro.sales_group.get_data_entity": {"name": "get_data_entity", "resource_type": "macro", "package_name": "sales_group", "path": "macros\\apply_logic_process_data_consolidates.sql", "original_file_path": "macros\\apply_logic_process_data_consolidates.sql", "unique_id": "macro.sales_group.get_data_entity", "macro_sql": "{% macro get_data_entity(data) -%}\r\n\r\n        select legal, period, curtype,racct, balance,profit_center\r\n        from {{ data }}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3074553, "supported_languages": null}, "macro.sales_group.apply_logic_process_data_p_l": {"name": "apply_logic_process_data_p_l", "resource_type": "macro", "package_name": "sales_group", "path": "macros\\apply_logic_process_data_profit_and_loss.sql", "original_file_path": "macros\\apply_logic_process_data_profit_and_loss.sql", "unique_id": "macro.sales_group.apply_logic_process_data_p_l", "macro_sql": "{% macro apply_logic_process_data_p_l(type_source,data,cur_type,sub_type) -%}\r\n    {% if type_source == 'solomon' and cur_type == '99' %}\r\n        with raw_data as (\r\n                select\r\n                    ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS number_id,\r\n                    left(endpernbr, 4) || '0' || right(endpernbr, 2) as period,\r\n                    legal,\r\n                    '00' || acct as racct,\r\n                    endpernbr,\r\n                    begpernbr,\r\n                    left(sub, 2) || '-' || substring(sub, 3, 3) as profit_center,\r\n                    sub,\r\n                    '10'::text as curtype,\r\n                    nvl(a.dramttot,0) - nvl(a.cramttot,0) as _balance,\r\n                    dramttot as debit,\r\n                    cramttot as credit\r\n                from {{ data }} as a\r\n            union all\r\n                select\r\n                    ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS number_id,\r\n                    left(endpernbr, 4) || '0' || right(endpernbr, 2) as period,\r\n                    legal,\r\n                    '00' || acct as racct,\r\n                    endpernbr,\r\n                    begpernbr,\r\n                    left(sub, 2) || '-' || substring(sub, 3, 3) as profit_center,\r\n                    sub,\r\n                    '99'::text as curtype,\r\n                    nvl(a.dramttot,0) - nvl(a.cramttot,0) as _balance,\r\n                    dramttot as debit,\r\n                    cramttot as credit\r\n                from {{ data }} as a\r\n                ),\r\n\r\n     {% elif type_source == 'solomon' and cur_type == '10' %}\r\n           with raw_data as (\r\n                select\r\n                    ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS number_id,\r\n                    left(endpernbr, 4) || '0' || right(endpernbr, 2) as period,\r\n                    legal,\r\n                    '00' || acct as racct,\r\n                    endpernbr,\r\n                    begpernbr,\r\n                    left(sub, 2) || '-' || substring(sub, 3, 3) as profit_center,\r\n                    sub,\r\n                    '10'::text as curtype,\r\n                    nvl(a.dramttot,0) - nvl(a.cramttot,0) as _balance,\r\n                    dramttot as debit,\r\n                    cramttot as credit\r\n                from {{ data }} as a\r\n    ),\r\n    {% elif type_source == 'excel' and cur_type == '10' %}\r\n        with raw_data as  (\r\n                  select\r\n                    row_number() over (order by (select 1)) as number_id,\r\n                    period,\r\n                    a._racct,\r\n                    a._racct as racct,\r\n                    a.company_code,\r\n                    '{{sub_type}}'::text as legal,\r\n                    '10'::text as curtype,\r\n                    a.begin_debit_balance,\r\n                    a.end_debit_balance,\r\n                    a.begin_credit_balance,\r\n                    a.end_credit_balance,\r\n                    a.credit,\r\n                    a.debit,\r\n                    nvl(a.debit,0) - nvl(a.credit,0) as _balance\r\n              from {{ data }} as a\r\n              {# left join {{ ref('consol_mapping_account_pl_to_account_sap_union') }} as b #}\r\n                {# on a._racct = b.racct_pl #}\r\n                {# and b.sub_type = 'lbc' #}\r\n            ), \r\n    {% elif (type_source == 'sap_s4' or type_source == 'sap_ecc') and cur_type == '10' %}\r\n        with raw_data as (\r\n            select\r\n            row_number() over (order by (select 1)) as number_id,\r\n            gl.*,\r\n            fiscper as period,\r\n            rbukrs as legal,\r\n            nvl(debit,0) - nvl(credit,0) as _balance\r\n            from {{ data }} gl\r\n            where\r\n                curtype = '10'\r\n                and valuetype = '010'\r\n                and kokrs = '1000'\r\n                and chartaccts = '1000'\r\n                --and rbukrs = '3000'\r\n    ),\r\n\r\n    {%endif%}\r\n\r\n    {# excluded_ as (\r\n        select * from {{ ref(\"consol_mapping_p_and_l_gl_account\") }} where excluded is not null\r\n    ),\r\n\r\n    included as (\r\n        select * from {{ ref(\"consol_mapping_p_and_l_gl_account\") }} where excluded is null\r\n    ),\r\n\r\n    exclude_joined as (\r\n\r\n        select *, tbl.racct || excluded_.code as exc\r\n        from raw_data as tbl\r\n        join\r\n            excluded_\r\n            on tbl.racct::bigint >= excluded_._gl_account_from\r\n            and excluded_._gl_account_to >= tbl.racct::bigint\r\n\r\n    ),\r\n\r\n    include_joined as (\r\n        select\r\n            tbl.*,\r\n            included.code,\r\n            included._gl_account_from,\r\n            included._gl_account_to,\r\n            tbl.racct || included.code as inc\r\n\r\n        from raw_data as tbl\r\n        join\r\n            included\r\n            on tbl.racct::bigint >= included._gl_account_from\r\n            and included._gl_account_to >= tbl.racct::bigint\r\n\r\n    ),\r\n\r\n        final_data as (\r\n            select include_joined.*\r\n            from include_joined\r\n            where inc not in (select exc from exclude_joined)\r\n        ) #}\r\n    final_data as (\r\n        select * from raw_data\r\n    )\r\n    select\r\n    distinct\r\n        number_id::text,\r\n        period::text,\r\n        {# code::text, #}\r\n        legal::text,\r\n        racct::text,\r\n        curtype::text,\r\n        _balance::decimal(20,2) as balance,\r\n\r\n        {% if type_source == 'sap_ecc' %}\r\n            prctr::text as profit_center\r\n        {% else %}\r\n            ''::text as profit_center\r\n        {% endif %}\r\n\r\n        from final_data\r\n\r\n    {%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3104541, "supported_languages": null}, "macro.sales_group.get_data_one_legal": {"name": "get_data_one_legal", "resource_type": "macro", "package_name": "sales_group", "path": "macros\\apply_logic_process_data_profit_and_loss.sql", "original_file_path": "macros\\apply_logic_process_data_profit_and_loss.sql", "unique_id": "macro.sales_group.get_data_one_legal", "macro_sql": "{% macro get_data_one_legal(data) -%}\r\n\r\n        select legal, period, curtype,racct, balance,profit_center\r\n        from {{ data }}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3104541, "supported_languages": null}, "macro.sales_group.mapping_132_312": {"name": "mapping_132_312", "resource_type": "macro", "package_name": "sales_group", "path": "macros\\consol_mapping_132_312.sql", "original_file_path": "macros\\consol_mapping_132_312.sql", "unique_id": "macro.sales_group.mapping_132_312", "macro_sql": "{% macro mapping_132_312(code, balance) -%}\r\n   case when\r\n        {{code}} = '132' and nvl({{balance}},1) < 0 \r\n        then '312'\r\n        when {{code}} = '321' and nvl({{balance}},1) < 0\r\n        then '132'\r\n        else {{code}}\r\n        end as _code,\r\n    case when \r\n        {{code}} = '132' and nvl({{balance}},1) < 0\r\n        then {{balance}}::decimal(20,2) *(-1)\r\n        when {{code}} = '321' and nvl({{balance}},1) < 0\r\n        then {{balance}}::decimal(20,2) *(-1)\r\n        else {{balance}}::decimal(20,2)\r\n        end as _balance\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3114536, "supported_languages": null}, "macro.sales_group.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "sales_group", "path": "macros\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_schema.sql", "unique_id": "macro.sales_group.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n    {{ generate_schema_name_for_env(custom_schema_name, node) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_schema_name_for_env"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3114536, "supported_languages": null}, "macro.dbt_redshift.dist": {"name": "dist", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.dist", "macro_sql": "{% macro dist(dist) %}\n  {%- if dist is not none -%}\n      {%- set dist = dist.strip().lower() -%}\n\n      {%- if dist in ['all', 'even'] -%}\n        diststyle {{ dist }}\n      {%- elif dist == \"auto\" -%}\n      {%- else -%}\n        diststyle key distkey ({{ dist }})\n      {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3248653, "supported_languages": null}, "macro.dbt_redshift.sort": {"name": "sort", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.sort", "macro_sql": "{% macro sort(sort_type, sort) %}\n  {%- if sort is not none %}\n      {{ sort_type | default('compound', boolean=true) }} sortkey(\n      {%- if sort is string -%}\n        {%- set sort = [sort] -%}\n      {%- endif -%}\n      {%- for item in sort -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3258722, "supported_languages": null}, "macro.dbt_redshift.redshift__create_table_as": {"name": "redshift__create_table_as", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.redshift__create_table_as", "macro_sql": "{% macro redshift__create_table_as(temporary, relation, sql) -%}\n\n  {%- set _dist = config.get('dist') -%}\n  {%- set _sort_type = config.get(\n          'sort_type',\n          validator=validation.any['compound', 'interleaved']) -%}\n  {%- set _sort = config.get(\n          'sort',\n          validator=validation.any[list, basestring]) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {%- set backup = config.get('backup') -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {{ get_table_columns_and_constraints() }}\n    {{ get_assert_columns_equivalent(sql) }}\n    {%- set sql = get_select_subquery(sql) %}\n    {% if backup == false -%}backup no{%- endif %}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n  ;\n\n  insert into {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    (\n      {{ sql }}\n    )\n  ;\n\n  {%- else %}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {% if backup == false -%}backup no{%- endif %}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n  as (\n    {{ sql }}\n  );\n\n  {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt_redshift.dist", "macro.dbt_redshift.sort"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3288662, "supported_languages": null}, "macro.dbt_redshift.redshift__create_view_as": {"name": "redshift__create_view_as", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.redshift__create_view_as", "macro_sql": "{% macro redshift__create_view_as(relation, sql) -%}\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %} as (\n    {{ sql }}\n  ) {{ bind_qualifier }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3298676, "supported_languages": null}, "macro.dbt_redshift.redshift__create_schema": {"name": "redshift__create_schema", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.redshift__create_schema", "macro_sql": "{% macro redshift__create_schema(relation) -%}\n  {{ postgres__create_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3298676, "supported_languages": null}, "macro.dbt_redshift.redshift__drop_schema": {"name": "redshift__drop_schema", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.redshift__drop_schema", "macro_sql": "{% macro redshift__drop_schema(relation) -%}\n  {{ postgres__drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3298676, "supported_languages": null}, "macro.dbt_redshift.redshift__get_columns_in_relation": {"name": "redshift__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.redshift__get_columns_in_relation", "macro_sql": "{% macro redshift__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with bound_views as (\n        select\n          ordinal_position,\n          table_schema,\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n        from information_schema.\"columns\"\n        where table_name = '{{ relation.identifier }}'\n    ),\n\n    unbound_views as (\n      select\n        ordinal_position,\n        view_schema,\n        col_name,\n        case\n          when col_type ilike 'character varying%' then\n            'character varying'\n          when col_type ilike 'numeric%' then 'numeric'\n          else col_type\n        end as col_type,\n        case\n          when col_type like 'character%'\n          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n\n      from pg_get_late_binding_view_cols()\n      cols(view_schema name, view_name name, col_name name,\n           col_type varchar, ordinal_position int)\n      where view_name = '{{ relation.identifier }}'\n    ),\n\n    external_views as (\n      select\n        columnnum,\n        schemaname,\n        columnname,\n        case\n          when external_type ilike 'character varying%' or external_type ilike 'varchar%'\n          then 'character varying'\n          when external_type ilike 'numeric%' then 'numeric'\n          else external_type\n        end as external_type,\n        case\n          when external_type like 'character%' or external_type like 'varchar%'\n          then nullif(\n            REGEXP_SUBSTR(external_type, '[0-9]+'),\n            '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n      from\n        pg_catalog.svv_external_columns\n      where\n        schemaname = '{{ relation.schema }}'\n        and tablename = '{{ relation.identifier }}'\n\n    ),\n\n    unioned as (\n      select * from bound_views\n      union all\n      select * from unbound_views\n      union all\n      select * from external_views\n    )\n\n    select\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n    from unioned\n    {% if relation.schema %}\n    where table_schema = '{{ relation.schema }}'\n    {% endif %}\n    order by ordinal_position\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3309731, "supported_languages": null}, "macro.dbt_redshift.redshift__list_relations_without_caching": {"name": "redshift__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.redshift__list_relations_without_caching", "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n  {{ return(postgres__list_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3309731, "supported_languages": null}, "macro.dbt_redshift.redshift__information_schema_name": {"name": "redshift__information_schema_name", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.redshift__information_schema_name", "macro_sql": "{% macro redshift__information_schema_name(database) -%}\n  {{ return(postgres__information_schema_name(database)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3318784, "supported_languages": null}, "macro.dbt_redshift.redshift__list_schemas": {"name": "redshift__list_schemas", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.redshift__list_schemas", "macro_sql": "{% macro redshift__list_schemas(database) -%}\n  {{ return(postgres__list_schemas(database)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3318784, "supported_languages": null}, "macro.dbt_redshift.redshift__check_schema_exists": {"name": "redshift__check_schema_exists", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.redshift__check_schema_exists", "macro_sql": "{% macro redshift__check_schema_exists(information_schema, schema) -%}\n  {{ return(postgres__check_schema_exists(information_schema, schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3322487, "supported_languages": null}, "macro.dbt_redshift.redshift__persist_docs": {"name": "redshift__persist_docs", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.redshift__persist_docs", "macro_sql": "{% macro redshift__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {# Override: do not set column comments for LBVs #}\n  {% set is_lbv = config.get('materialized') == 'view' and config.get('bind') == false %}\n  {% if for_columns and config.persist_column_docs() and model.columns and not is_lbv %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3330097, "supported_languages": null}, "macro.dbt_redshift.redshift__alter_relation_comment": {"name": "redshift__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.redshift__alter_relation_comment", "macro_sql": "{% macro redshift__alter_relation_comment(relation, comment) %}\n  {% do return(postgres__alter_relation_comment(relation, comment)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3330097, "supported_languages": null}, "macro.dbt_redshift.redshift__alter_column_comment": {"name": "redshift__alter_column_comment", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.redshift__alter_column_comment", "macro_sql": "{% macro redshift__alter_column_comment(relation, column_dict) %}\n  {% do return(postgres__alter_column_comment(relation, column_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.334305, "supported_languages": null}, "macro.dbt_redshift.redshift__alter_relation_add_remove_columns": {"name": "redshift__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_redshift.redshift__alter_relation_add_remove_columns", "macro_sql": "{% macro redshift__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% for column in add_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} add column {{ column.name }} {{ column.data_type }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% for column in remove_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} drop column {{ column.name }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3354034, "supported_languages": null}, "macro.dbt_redshift.redshift__get_base_catalog": {"name": "redshift__get_base_catalog", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_redshift.redshift__get_base_catalog", "macro_sql": "{% macro redshift__get_base_catalog(information_schema, schemas) -%}\n  {%- call statement('base_catalog', fetch_result=True) -%}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    with late_binding as (\n      select\n        '{{ database }}'::varchar as table_database,\n        table_schema,\n        table_name,\n        'LATE BINDING VIEW'::varchar as table_type,\n        null::text as table_comment,\n\n        column_name,\n        column_index,\n        column_type,\n        null::text as column_comment\n      from pg_get_late_binding_view_cols()\n        cols(table_schema name, table_name name, column_name name,\n             column_type varchar,\n             column_index int)\n        order by \"column_index\"\n    ),\n\n    early_binding as (\n        select\n            '{{ database }}'::varchar as table_database,\n            sch.nspname as table_schema,\n            tbl.relname as table_name,\n            case tbl.relkind\n                when 'v' then 'VIEW'\n                else 'BASE TABLE'\n            end as table_type,\n            tbl_desc.description as table_comment,\n            col.attname as column_name,\n            col.attnum as column_index,\n            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n            col_desc.description as column_comment\n\n        from pg_catalog.pg_namespace sch\n        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n        left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n        left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n        where (\n            {%- for schema in schemas -%}\n              upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n            and tbl.relkind in ('r', 'v', 'f', 'p')\n            and col.attnum > 0\n            and not col.attisdropped\n    ),\n\n    table_owners as (\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            tablename as table_name,\n            tableowner as table_owner\n\n        from pg_tables\n\n        union all\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            viewname as table_name,\n            viewowner as table_owner\n\n        from pg_views\n\n    ),\n\n    unioned as (\n\n        select *\n        from early_binding\n\n        union all\n\n        select *\n        from late_binding\n\n    )\n\n    select *,\n        table_database || '.' || table_schema || '.' || table_name as table_id\n\n    from unioned\n    join table_owners using (table_database, table_schema, table_name)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n\n    order by \"column_index\"\n  {%- endcall -%}\n\n  {{ return(load_result('base_catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3404026, "supported_languages": null}, "macro.dbt_redshift.redshift__get_extended_catalog": {"name": "redshift__get_extended_catalog", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_redshift.redshift__get_extended_catalog", "macro_sql": "{% macro redshift__get_extended_catalog(schemas) %}\n  {%- call statement('extended_catalog', fetch_result=True) -%}\n\n    select\n        \"database\" || '.' || \"schema\" || '.' || \"table\" as table_id,\n\n        'Encoded'::text as \"stats:encoded:label\",\n        encoded as \"stats:encoded:value\",\n        'Indicates whether any column in the table has compression encoding defined.'::text as \"stats:encoded:description\",\n        true as \"stats:encoded:include\",\n\n        'Dist Style' as \"stats:diststyle:label\",\n        diststyle as \"stats:diststyle:value\",\n        'Distribution style or distribution key column, if key distribution is defined.'::text as \"stats:diststyle:description\",\n        true as \"stats:diststyle:include\",\n\n        'Sort Key 1' as \"stats:sortkey1:label\",\n        -- handle 0xFF byte in response for interleaved sort styles\n        case\n            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text\n            else sortkey1\n        end as \"stats:sortkey1:value\",\n        'First column in the sort key.'::text as \"stats:sortkey1:description\",\n        (sortkey1 is not null) as \"stats:sortkey1:include\",\n\n        'Max Varchar' as \"stats:max_varchar:label\",\n        max_varchar as \"stats:max_varchar:value\",\n        'Size of the largest column that uses a VARCHAR data type.'::text as \"stats:max_varchar:description\",\n        true as \"stats:max_varchar:include\",\n\n        -- exclude this, as the data is strangely returned with null-byte characters\n        'Sort Key 1 Encoding' as \"stats:sortkey1_enc:label\",\n        sortkey1_enc as \"stats:sortkey1_enc:value\",\n        'Compression encoding of the first column in the sort key.' as \"stats:sortkey1_enc:description\",\n        false as \"stats:sortkey1_enc:include\",\n\n        '# Sort Keys' as \"stats:sortkey_num:label\",\n        sortkey_num as \"stats:sortkey_num:value\",\n        'Number of columns defined as sort keys.' as \"stats:sortkey_num:description\",\n        (sortkey_num > 0) as \"stats:sortkey_num:include\",\n\n        'Approximate Size' as \"stats:size:label\",\n        size * 1000000 as \"stats:size:value\",\n        'Approximate size of the table, calculated from a count of 1MB blocks'::text as \"stats:size:description\",\n        true as \"stats:size:include\",\n\n        'Disk Utilization' as \"stats:pct_used:label\",\n        pct_used / 100.0 as \"stats:pct_used:value\",\n        'Percent of available space that is used by the table.'::text as \"stats:pct_used:description\",\n        true as \"stats:pct_used:include\",\n\n        'Unsorted %' as \"stats:unsorted:label\",\n        unsorted / 100.0 as \"stats:unsorted:value\",\n        'Percent of unsorted rows in the table.'::text as \"stats:unsorted:description\",\n        (unsorted is not null) as \"stats:unsorted:include\",\n\n        'Stats Off' as \"stats:stats_off:label\",\n        stats_off as \"stats:stats_off:value\",\n        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as \"stats:stats_off:description\",\n        true as \"stats:stats_off:include\",\n\n        'Approximate Row Count' as \"stats:rows:label\",\n        tbl_rows as \"stats:rows:value\",\n        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as \"stats:rows:description\",\n        true as \"stats:rows:include\",\n\n        'Sort Key Skew' as \"stats:skew_sortkey1:label\",\n        skew_sortkey1 as \"stats:skew_sortkey1:value\",\n        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as \"stats:skew_sortkey1:description\",\n        (skew_sortkey1 is not null) as \"stats:skew_sortkey1:include\",\n\n        'Skew Rows' as \"stats:skew_rows:label\",\n        skew_rows as \"stats:skew_rows:value\",\n        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as \"stats:skew_rows:description\",\n        (skew_rows is not null) as \"stats:skew_rows:include\"\n\n    from svv_table_info\n    where (\n        {%- for schema in schemas -%}\n          upper(schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n  {%- endcall -%}\n\n  {{ return(load_result('extended_catalog').table) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3414047, "supported_languages": null}, "macro.dbt_redshift.redshift__can_select_from": {"name": "redshift__can_select_from", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_redshift.redshift__can_select_from", "macro_sql": "{% macro redshift__can_select_from(table_name) %}\n\n  {%- call statement('has_table_privilege', fetch_result=True) -%}\n\n    select has_table_privilege(current_user, '{{ table_name }}', 'SELECT') as can_select\n\n  {%- endcall -%}\n\n  {% set can_select = load_result('has_table_privilege').table[0]['can_select'] %}\n  {{ return(can_select) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3424015, "supported_languages": null}, "macro.dbt_redshift.redshift__no_svv_table_info_warning": {"name": "redshift__no_svv_table_info_warning", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_redshift.redshift__no_svv_table_info_warning", "macro_sql": "{% macro redshift__no_svv_table_info_warning() %}\n\n    {% set msg %}\n\n    Warning: The database user \"{{ target.user }}\" has insufficient permissions to\n    query the \"svv_table_info\" table. Please grant SELECT permissions on this table\n    to the \"{{ target.user }}\" user to fetch extended table details from Redshift.\n\n    {% endset %}\n\n    {{ log(msg, info=True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3424015, "supported_languages": null}, "macro.dbt_redshift.redshift__get_catalog": {"name": "redshift__get_catalog", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_redshift.redshift__get_catalog", "macro_sql": "{% macro redshift__get_catalog(information_schema, schemas) %}\n\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\n      -- leader-only, and cannot be joined to other compute-based queries #}\n\n    {% set catalog = redshift__get_base_catalog(information_schema, schemas) %}\n\n    {% set select_extended =  redshift__can_select_from('svv_table_info') %}\n    {% if select_extended %}\n        {% set extended_catalog = redshift__get_extended_catalog(schemas) %}\n        {% set catalog = catalog.join(extended_catalog, 'table_id') %}\n    {% else %}\n        {{ redshift__no_svv_table_info_warning() }}\n    {% endif %}\n\n    {{ return(catalog.exclude(['table_id'])) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_base_catalog", "macro.dbt_redshift.redshift__can_select_from", "macro.dbt_redshift.redshift__get_extended_catalog", "macro.dbt_redshift.redshift__no_svv_table_info_warning"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.343409, "supported_languages": null}, "macro.dbt_redshift.redshift__get_relations": {"name": "redshift__get_relations", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\relations.sql", "original_file_path": "macros\\relations.sql", "unique_id": "macro.dbt_redshift.redshift__get_relations", "macro_sql": "{% macro redshift__get_relations () -%}\n  {{ return(dbt.postgres_get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.343409, "supported_languages": null}, "macro.dbt_redshift.redshift__current_timestamp": {"name": "redshift__current_timestamp", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() -%}\n    getdate()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.343409, "supported_languages": null}, "macro.dbt_redshift.redshift__snapshot_get_time": {"name": "redshift__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__snapshot_get_time", "macro_sql": "{% macro redshift__snapshot_get_time() -%}\n    {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3444042, "supported_languages": null}, "macro.dbt_redshift.redshift__snapshot_string_as_time": {"name": "redshift__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__snapshot_string_as_time", "macro_sql": "{% macro redshift__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3444042, "supported_languages": null}, "macro.dbt_redshift.redshift__current_timestamp_backcompat": {"name": "redshift__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__current_timestamp_backcompat", "macro_sql": "{% macro redshift__current_timestamp_backcompat() -%}\n    getdate()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3444042, "supported_languages": null}, "macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat": {"name": "redshift__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro redshift__current_timestamp_in_utc_backcompat() -%}\n    getdate()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3444042, "supported_languages": null}, "macro.dbt_redshift.redshift__get_show_grant_sql": {"name": "redshift__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_redshift.redshift__get_show_grant_sql", "macro_sql": "{% macro redshift__get_show_grant_sql(relation) %}\n\nwith privileges as (\n\n    -- valid options per https://docs.aws.amazon.com/redshift/latest/dg/r_HAS_TABLE_PRIVILEGE.html\n    select 'select' as privilege_type\n    union all\n    select 'insert' as privilege_type\n    union all\n    select 'update' as privilege_type\n    union all\n    select 'delete' as privilege_type\n    union all\n    select 'references' as privilege_type\n\n)\n\nselect\n    u.usename as grantee,\n    p.privilege_type\nfrom pg_user u\ncross join privileges p\nwhere has_table_privilege(u.usename, '{{ relation }}', privilege_type)\n    and u.usename != current_user\n    and not u.usesuper\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3444042, "supported_languages": null}, "macro.dbt_redshift.redshift__snapshot_merge_sql": {"name": "redshift__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\materializations\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot_merge.sql", "unique_id": "macro.dbt_redshift.redshift__snapshot_merge_sql", "macro_sql": "{% macro redshift__snapshot_merge_sql(target, source, insert_cols) -%}\n    {{ postgres__snapshot_merge_sql(target, source, insert_cols) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.345402, "supported_languages": null}, "macro.dbt_redshift.redshift__get_batch_size": {"name": "redshift__get_batch_size", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_redshift.redshift__get_batch_size", "macro_sql": "{% macro redshift__get_batch_size() %}\n  {{ return(500) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.345402, "supported_languages": null}, "macro.dbt_redshift.redshift__array_append": {"name": "redshift__array_append", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt_redshift.redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.345402, "supported_languages": null}, "macro.dbt_redshift.redshift__array_concat": {"name": "redshift__array_concat", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt_redshift.redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.345402, "supported_languages": null}, "macro.dbt_redshift.redshift__array_construct": {"name": "redshift__array_construct", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_redshift.redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.346496, "supported_languages": null}, "macro.dbt_redshift.redshift__cast_bool_to_text": {"name": "redshift__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt_redshift.redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.346496, "supported_languages": null}, "macro.dbt_redshift.redshift__dateadd": {"name": "redshift__dateadd", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_redshift.redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3475313, "supported_languages": null}, "macro.dbt_redshift.redshift__datediff": {"name": "redshift__datediff", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt_redshift.redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3475313, "supported_languages": null}, "macro.dbt_redshift.redshift__last_day": {"name": "redshift__last_day", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt_redshift.redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3475313, "supported_languages": null}, "macro.dbt_redshift.redshift__length": {"name": "redshift__length", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt_redshift.redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3486028, "supported_languages": null}, "macro.dbt_redshift.redshift__listagg": {"name": "redshift__listagg", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_redshift.redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}\n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3505995, "supported_languages": null}, "macro.dbt_redshift.redshift__split_part": {"name": "redshift__split_part", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt_redshift.redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3516228, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_postgres.get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3585994, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3596, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3605995, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3605995, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3616712, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3622148, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3622148, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3632932, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3642917, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.365292, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.365292, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.366294, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.366294, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.367291, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.367291, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.368295, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.368295, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3692923, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.370292, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations.sql", "original_file_path": "macros\\relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3712924, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3712924, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3712924, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3712924, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3722925, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3722925, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\materializations\\incremental_strategies.sql", "original_file_path": "macros\\materializations\\incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3722925, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\materializations\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3732913, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.374296, "supported_languages": null}, "macro.dbt_postgres.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\utils\\columns_spec_ddl.sql", "original_file_path": "macros\\utils\\columns_spec_ddl.sql", "unique_id": "macro.dbt_postgres.get_column_names", "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.374296, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.375291, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.378651, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3796368, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.380642, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.381641, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.383637, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.383637, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3845682, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3845682, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3845682, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3856387, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3856387, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3856387, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3866448, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3866448, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3866448, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3876379, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.388568, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.388568, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.388568, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3896391, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3916476, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3944736, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3944736, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.395474, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.395474, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql) %}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.395474, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.395474, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      cast(null as {{ col['data_type'] }}) as {{ col['name'] }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3964758, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3975434, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.3975434, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.398544, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.398544, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.399543, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.399543, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4010706, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4010706, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.402571, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.403556, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.403556, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.403556, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4045553, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4065592, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4065592, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4065592, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4065592, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.407557, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.407557, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.407557, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4086447, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4086447, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4086447, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4097974, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4097974, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4107857, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4107857, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4107857, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.411787, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4157948, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4157948, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4157948, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4167843, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4167843, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4176135, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4176135, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4176135, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4188085, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4188085, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4188085, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4198086, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4198086, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.420808, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.420808, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4218092, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4218092, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4218092, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4228096, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4228096, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4228096, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4238122, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4238122, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4238122, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.424794, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.424794, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.424794, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.424794, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_redshift.redshift__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.424794, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4278152, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.428814, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4308114, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4308114, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.432817, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.433809, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.433809, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4347444, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.43581, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.43581, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.43581, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4368076, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.437817, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.437817, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4387722, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4387722, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.439883, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4411623, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4421663, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4421663, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.443161, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.444161, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.444161, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4452353, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4452353, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4452353, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.447238, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4482324, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4492342, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4492342, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4502308, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4582863, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4593015, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.465299, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4676776, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.468687, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4696865, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4696865, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4718876, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4778986, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4789002, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4809089, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4828978, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4842064, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4847076, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4847076, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.485904, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4864326, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4875236, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4875236, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.488509, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4895148, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4895148, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4905145, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4915154, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4925094, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4935088, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4935088, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4935088, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(model['columns'])) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4955158, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4965067, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4965067, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.497508, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4985087, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4985087, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4995072, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.4995072, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select\n    {% for column in model['columns'] %}\n      {{ column }}{{ \", \" if not loop.last }}\n    {% endfor %}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5005066, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5047295, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5067394, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5077302, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5077302, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5077302, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5087347, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5087347, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5097399, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5127323, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5179136, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5200222, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5200222, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5210147, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5210147, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5219438, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5219438, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5219438, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5219438, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5219438, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5230126, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5230126, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.525012, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5300114, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5340993, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5340993, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5351694, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5351694, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5351694, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5351694, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5361707, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5371737, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5371737, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5381684, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5381684, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5461683, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5461683, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5474606, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5518417, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5518417, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5528274, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5538282, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5538282, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5538282, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5558286, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5588338, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5588338, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.559832, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5629373, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5629373, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.56426, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.566328, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.566328, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.567278, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5683277, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5693276, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5693276, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5703282, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5703282, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5703282, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5713243, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5713243, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5713243, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5713243, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5723271, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5723271, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5733266, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5733266, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5733266, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5733266, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5743265, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5743265, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5753257, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5753257, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5763264, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5763264, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5763264, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5763264, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.577334, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.577334, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.577334, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.577334, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5783815, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5783815, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5783815, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5783815, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.579558, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.579558, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.580704, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5810678, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5815704, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5815704, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5815704, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5815704, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5827968, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5827968, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5827968, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5827968, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5838342, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5838342, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5838342, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5848308, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5848308, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5848308, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.585831, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5867977, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5867977, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5878303, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5878303, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5878303, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5878303, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.588798, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.588798, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.588798, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5898378, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5898378, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5898378, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5908303, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5908303, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5908303, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5918305, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5918305, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5928357, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5928357, "supported_languages": null}, "macro.audit_helper.compare_all_columns": {"name": "compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_all_columns.sql", "original_file_path": "macros\\compare_all_columns.sql", "unique_id": "macro.audit_helper.compare_all_columns", "macro_sql": "{% macro compare_all_columns( a_relation, b_relation, primary_key,  exclude_columns=[],summarize=true ) -%}\n  {{ return(adapter.dispatch('compare_all_columns', 'audit_helper')( a_relation, b_relation, primary_key, exclude_columns, summarize )) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_all_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.595097, "supported_languages": null}, "macro.audit_helper.default__compare_all_columns": {"name": "default__compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_all_columns.sql", "original_file_path": "macros\\compare_all_columns.sql", "unique_id": "macro.audit_helper.default__compare_all_columns", "macro_sql": "{% macro default__compare_all_columns( a_relation, b_relation, primary_key, exclude_columns=[], summarize=true ) -%}\n\n  {% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n  {# We explictly select the primary_key and rename to support any sql as the primary_key -\n  a column or concatenated columns. this assumes that a_relation and b_relation do not already \n  have a field named dbt_audit_helper_pk #}\n\n  {% set a_query %}      \n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ a_relation }}\n  {% endset %}\n\n  {% set b_query %}\n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ b_relation }}\n  {% endset %}\n\n  {% for column_name in column_names %}\n\n    {% set audit_query = audit_helper.compare_column_values_verbose(\n      a_query=a_query,\n      b_query=b_query,\n      primary_key=\"dbt_audit_helper_pk\",\n      column_to_compare=column_name\n    ) %}\n\n    /*  Create a query combining results from all columns so that the user, or the \n    test suite, can examine all at once.\n    */\n    \n    {% if loop.first %}\n\n    /*  Create a CTE that wraps all the unioned subqueries that are created\n        in this for loop\n    */\n      with main as ( \n\n    {% endif %}\n\n    /*  There will be one audit_query subquery for each column\n    */\n    ( {{ audit_query }} )\n\n    {% if not loop.last %}\n\n      union all\n\n    {% else %}\n\n    ), \n    \n      {%- if summarize %}\n\n        final as (\n          select\n            upper(column_name) as column_name,\n            sum(case when perfect_match then 1 else 0 end) as perfect_match,\n            sum(case when null_in_a then 1 else 0 end) as null_in_a,\n            sum(case when null_in_b then 1 else 0 end) as null_in_b,\n            sum(case when missing_from_a then 1 else 0 end) as missing_from_a,\n            sum(case when missing_from_b then 1 else 0 end) as missing_from_b,\n            sum(case when conflicting_values then 1 else 0 end) as conflicting_values\n          from main\n          group by 1\n          order by column_name\n        )\n\n      {%- else %}\n\n        final as (\n          select\n            primary_key,           \n            upper(column_name) as column_name,\n            perfect_match,\n            null_in_a,\n            null_in_b,\n            missing_from_a,\n            missing_from_b,\n            conflicting_values\n          from main    \n          order by primary_key\n        )\n\n      {%- endif %}\n\n      select * from final\n    \n    {% endif %}\n\n  {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5960958, "supported_languages": null}, "macro.audit_helper.compare_column_values": {"name": "compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_column_values.sql", "original_file_path": "macros\\compare_column_values.sql", "unique_id": "macro.audit_helper.compare_column_values", "macro_sql": "{% macro compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.5990958, "supported_languages": null}, "macro.audit_helper.default__compare_column_values": {"name": "default__compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_column_values.sql", "original_file_path": "macros\\compare_column_values.sql", "unique_id": "macro.audit_helper.default__compare_column_values", "macro_sql": "{% macro default__compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n),\n\njoined as (\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\n        a_query.{{ column_to_compare }} as a_query_value,\n        b_query.{{ column_to_compare }} as b_query_value,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then '\u2705: perfect match'\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then '\u2705: both are null'\n            when a_query.{{ primary_key }} is null then '\ud83e\udd37: \u200dmissing from a'\n            when b_query.{{ primary_key }} is null then '\ud83e\udd37: missing from b'\n            when a_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in a only'\n            when b_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in b only'\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then '\ud83d\ude45: \u200dvalues do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\n            when a_query.{{ primary_key }} is null then 2\n            when b_query.{{ primary_key }} is null then 3\n            when a_query.{{ column_to_compare }} is null then 4\n            when b_query.{{ column_to_compare }} is null then 5\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\n),\n\naggregated as (\n    select\n        '{{ column_to_compare }}' as column_name,\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by column_name, match_status, match_order\n)\n\nselect\n    column_name,\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6010587, "supported_languages": null}, "macro.audit_helper.compare_column_values_verbose": {"name": "compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_column_values_verbose.sql", "original_file_path": "macros\\compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.compare_column_values_verbose", "macro_sql": "{% macro compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values_verbose', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6032686, "supported_languages": null}, "macro.audit_helper.default__compare_column_values_verbose": {"name": "default__compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_column_values_verbose.sql", "original_file_path": "macros\\compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.default__compare_column_values_verbose", "macro_sql": "{% macro default__compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n)\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as primary_key,\n\n        {% if target.name == 'postgres' or target.name == 'redshift' %}\n            '{{ column_to_compare }}'::text as column_name,\n        {% else %}\n            '{{ column_to_compare }}' as column_name,\n        {% endif %}\n\n        coalesce(\n            a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} and \n                a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null,\n            (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null),\n            false\n        ) as perfect_match,\n        a_query.{{ column_to_compare }} is null and a_query.{{ primary_key }} is not null as null_in_a,\n        b_query.{{ column_to_compare }} is null and b_query.{{ primary_key }} is not null as null_in_b,\n        a_query.{{ primary_key }} is null as missing_from_a,\n        b_query.{{ primary_key }} is null as missing_from_b,\n        coalesce(\n            a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null and \n            -- ensure that neither value is missing before considering it a conflict\n            (\n                a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} or -- two not-null values that do not match\n                (a_query.{{ column_to_compare }} is not null and b_query.{{ column_to_compare }} is null) or -- null in b and not null in a\n                (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is not null) -- null in a and not null in b\n            ), \n            false\n        ) as conflicting_values\n        -- considered a conflict if the values do not match AND at least one of the values is not null.\n\n    from a_query\n\n    full outer join b_query on (a_query.{{ primary_key }} = b_query.{{ primary_key }})\n\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.60427, "supported_languages": null}, "macro.audit_helper.compare_queries": {"name": "compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_queries.sql", "original_file_path": "macros\\compare_queries.sql", "unique_id": "macro.audit_helper.compare_queries", "macro_sql": "{% macro compare_queries(a_query, b_query, primary_key=None, summarize=true) -%}\n  {{ return(adapter.dispatch('compare_queries', 'audit_helper')(a_query, b_query, primary_key, summarize)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6052203, "supported_languages": null}, "macro.audit_helper.default__compare_queries": {"name": "default__compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_queries.sql", "original_file_path": "macros\\compare_queries.sql", "unique_id": "macro.audit_helper.default__compare_queries", "macro_sql": "{% macro default__compare_queries(a_query, b_query, primary_key=None, summarize=true) %}\n\nwith a as (\n\n    {{ a_query }}\n\n),\n\nb as (\n\n    {{ b_query }}\n\n),\n\na_intersect_b as (\n\n    select * from a\n    {{ dbt.intersect() }}\n    select * from b\n\n),\n\na_except_b as (\n\n    select * from a\n    {{ dbt.except() }}\n    select * from b\n\n),\n\nb_except_a as (\n\n    select * from b\n    {{ dbt.except() }}\n    select * from a\n\n),\n\nall_records as (\n\n    select\n        *,\n        true as in_a,\n        true as in_b\n    from a_intersect_b\n\n    union all\n\n    select\n        *,\n        true as in_a,\n        false as in_b\n    from a_except_b\n\n    union all\n\n    select\n        *,\n        false as in_a,\n        true as in_b\n    from b_except_a\n\n),\n\n{%- if summarize %}\n\nsummary_stats as (\n\n    select\n\n        in_a,\n        in_b,\n        count(*) as count\n\n    from all_records\n    group by 1, 2\n\n),\n\nfinal as (\n\n    select\n\n        *,\n        round(100.0 * count / sum(count) over (), 2) as percent_of_total\n\n    from summary_stats\n    order by in_a desc, in_b desc\n\n)\n\n{%- else %}\n\nfinal as (\n    \n    select * from all_records\n    where not (in_a and in_b)\n    order by {{ primary_key ~ \", \" if primary_key is not none }} in_a desc, in_b desc\n\n)\n\n{%- endif %}\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.intersect", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6062694, "supported_languages": null}, "macro.audit_helper.compare_relations": {"name": "compare_relations", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relations.sql", "original_file_path": "macros\\compare_relations.sql", "unique_id": "macro.audit_helper.compare_relations", "macro_sql": "{% macro compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None, summarize=true) %}\n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n{% set column_selection %}\n\n  {% for column_name in column_names %} \n    {{ adapter.quote(column_name) }} \n    {% if not loop.last %}\n      , \n    {% endif %} \n  {% endfor %}\n\n{% endset %}\n\n{% set a_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ a_relation }}\n{% endset %}\n\n{% set b_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ b_relation }}\n{% endset %}\n\n{{ audit_helper.compare_queries(a_query, b_query, primary_key, summarize) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6072667, "supported_languages": null}, "macro.audit_helper.compare_relation_columns": {"name": "compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.compare_relation_columns", "macro_sql": "{% macro compare_relation_columns(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_relation_columns', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_relation_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6082683, "supported_languages": null}, "macro.audit_helper.default__compare_relation_columns": {"name": "default__compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__compare_relation_columns", "macro_sql": "{% macro default__compare_relation_columns(a_relation, b_relation) %}\n\nwith a_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(a_relation) }}\n),\n\nb_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(b_relation) }}\n)\n\nselect\n    column_name,\n    a_cols.ordinal_position as a_ordinal_position,\n    b_cols.ordinal_position as b_ordinal_position,\n    a_cols.data_type as a_data_type,\n    b_cols.data_type as b_data_type,\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match\nfrom a_cols\nfull outer join b_cols using (column_name)\norder by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6093085, "supported_languages": null}, "macro.audit_helper.get_columns_in_relation_sql": {"name": "get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.get_columns_in_relation_sql", "macro_sql": "{% macro get_columns_in_relation_sql(relation) %}\n\n{{ adapter.dispatch('get_columns_in_relation_sql', 'audit_helper')(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.redshift__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6093085, "supported_languages": null}, "macro.audit_helper.default__get_columns_in_relation_sql": {"name": "default__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__get_columns_in_relation_sql", "macro_sql": "{% macro default__get_columns_in_relation_sql(relation) %}\n    \n  {% set columns = adapter.get_columns_in_relation(relation) %}\n  {% for column in columns %}\n    select \n      {{ dbt.string_literal(column.name) }} as column_name, \n      {{ loop.index }} as ordinal_position,\n      {{ dbt.string_literal(column.data_type) }} as data_type\n\n  {% if not loop.last -%}\n    union all \n  {%- endif %}\n  {% endfor %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.61053, "supported_languages": null}, "macro.audit_helper.redshift__get_columns_in_relation_sql": {"name": "redshift__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.redshift__get_columns_in_relation_sql", "macro_sql": "{% macro redshift__get_columns_in_relation_sql(relation) %}\n  {# You can't store the results of an info schema query to a table/view in Redshift, because the data only lives on the leader node #}\n  {{ return (audit_helper.default__get_columns_in_relation_sql(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.61053, "supported_languages": null}, "macro.audit_helper.snowflake__get_columns_in_relation_sql": {"name": "snowflake__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.snowflake__get_columns_in_relation_sql", "macro_sql": "{% macro snowflake__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from\n  {{ relation.information_schema('columns') }}\n\n  where table_name ilike '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema ilike '{{ relation.schema }}'\n    {% endif %}\n    {% if relation.database %}\n    and table_catalog ilike '{{ relation.database }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.61053, "supported_languages": null}, "macro.audit_helper.postgres__get_columns_in_relation_sql": {"name": "postgres__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.postgres__get_columns_in_relation_sql", "macro_sql": "{% macro postgres__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from {{ relation.information_schema('columns') }}\n  where table_name = '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema = '{{ relation.schema }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.611554, "supported_languages": null}, "macro.audit_helper.bigquery__get_columns_in_relation_sql": {"name": "bigquery__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.bigquery__get_columns_in_relation_sql", "macro_sql": "{% macro bigquery__get_columns_in_relation_sql(relation) %}\n\n  select\n      ordinal_position,\n      column_name,\n      data_type\n\n  from `{{ relation.database }}`.`{{ relation.schema }}`.INFORMATION_SCHEMA.COLUMNS\n  where table_name = '{{ relation.identifier }}'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.611554, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6125576, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.61357, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6155548, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6250103, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6282191, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.632218, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.redshift__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6332138, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6332138, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.634144, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.634144, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.634144, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6352189, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6352189, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6352189, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6352189, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6362152, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6372166, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6372166, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6372166, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.638218, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.638218, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.638218, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.redshift__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6403115, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6414638, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6423738, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6428165, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6428165, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.64384, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.redshift__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.64384, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6449084, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6449084, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6449084, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6459095, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6469088, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6469088, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6479108, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6489081, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6489081, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6489081, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6499085, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6499085, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.650923, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6514227, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6514227, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6514227, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6514227, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6525013, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.653509, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.653509, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.653509, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.653509, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month.sql", "original_file_path": "macros\\calendar_date\\last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.653509, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month_name.sql", "original_file_path": "macros\\calendar_date\\last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6545026, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month_number.sql", "original_file_path": "macros\\calendar_date\\last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6545026, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_week.sql", "original_file_path": "macros\\calendar_date\\last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6545026, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.656058, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.656558, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.656558, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6575603, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6575603, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month.sql", "original_file_path": "macros\\calendar_date\\next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6585605, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month_name.sql", "original_file_path": "macros\\calendar_date\\next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6593707, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month_number.sql", "original_file_path": "macros\\calendar_date\\next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6593707, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_week.sql", "original_file_path": "macros\\calendar_date\\next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.660224, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\now.sql", "original_file_path": "macros\\calendar_date\\now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6605508, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_days_ago.sql", "original_file_path": "macros\\calendar_date\\n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.661491, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_days_away.sql", "original_file_path": "macros\\calendar_date\\n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.661491, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_months_ago.sql", "original_file_path": "macros\\calendar_date\\n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6625159, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_months_away.sql", "original_file_path": "macros\\calendar_date\\n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6625159, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_weeks_ago.sql", "original_file_path": "macros\\calendar_date\\n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6635149, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_weeks_away.sql", "original_file_path": "macros\\calendar_date\\n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6635149, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\periods_since.sql", "original_file_path": "macros\\calendar_date\\periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6645148, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\round_timestamp.sql", "original_file_path": "macros\\calendar_date\\round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6645148, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\today.sql", "original_file_path": "macros\\calendar_date\\today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6645148, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\tomorrow.sql", "original_file_path": "macros\\calendar_date\\tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.665515, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.665515, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.665515, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6665146, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6665146, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6673474, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6673474, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6673474, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6688054, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6688054, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6698127, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6698127, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6708584, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6713595, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.671858, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6721454, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\yesterday.sql", "original_file_path": "macros\\calendar_date\\yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6721454, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_periods.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6734064, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6753972, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.676407, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6774035, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6784039, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6794035, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6794035, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6804032, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6814651, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6814651, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6824782, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6824782, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.683395, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.683395, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.683395, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\median.sql", "original_file_path": "macros\\math\\median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6842957, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6846766, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6856866, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6856866, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.redshift__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6856866, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6866863, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.686792, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.686792, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.686792, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.686792, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.redshift__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6878157, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6888156, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6898155, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6898155, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6908154, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6908154, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.691816, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\" \n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6928155, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6938157, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6938157, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.694816, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6958153, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6978161, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.6988163, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.699816, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.700816, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7030115, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7032347, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7042532, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7062526, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7082524, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7092528, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7102528, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7112525, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7122524, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7132525, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7142525, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7152526, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7173407, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.719974, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.721968, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.723968, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.723968, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7250378, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7250378, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7260494, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7270606, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7270606, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.731039, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7320487, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7356107, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.736644, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7375755, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7436426, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7446475, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7455742, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7465782, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7500188, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7511966, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7543163, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7562234, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7572873, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7582858, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.759288, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7602882, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.761222, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.762317, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7632873, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7655966, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.766066, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7672102, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "original_file_path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7682066, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7692056, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.772214, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.774276, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7752767, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.776321, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.777221, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.778317, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7807937, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7838752, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.785802, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.78781, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.78781, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7888162, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7898793, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7908704, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7908704, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.791873, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7928727, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.793802, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7948482, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7948482, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.795876, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.7968411, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8019123, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.802926, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.802926, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8049378, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8069282, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.807858, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.808928, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8099277, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8099277, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8109357, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.812475, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.812475, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.812475, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.postgres__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8135483, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8135483, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8135483, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8135483, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.postgres__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8135483, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8135483, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8135483, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8145485, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8145485, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8155515, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8155515, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.816548, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8175144, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8186598, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.819686, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.819686, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8205917, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8226743, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8235905, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8256738, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8256738, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8266776, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8282692, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8291304, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8335292, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8355095, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8365316, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.83753, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.83753, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8385398, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8395495, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8395495, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.840539, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.84153, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8425317, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8436468, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8448634, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8458538, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8468535, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.847854, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8488562, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.849887, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.850784, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.850784, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.850784, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.851854, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.851854, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.851854, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8528566, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8538551, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8548522, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8558567, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8568525, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8568525, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8578587, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.redshift__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8588576, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8592014, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8592014, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.860428, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.860428, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.860428, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8614278, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.862341, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.862341, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8633404, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8644376, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8654149, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8664165, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8691146, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8701115, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8711085, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.872067, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.873109, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.873109, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8754609, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.876449, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8774498, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8784497, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8794482, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8814485, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8814485, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8824492, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8845093, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8856056, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8856056, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8866122, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8866122, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8866122, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8866122, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.887624, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.887624, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8898451, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.890347, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8909433, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8929534, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.893954, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8949516, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8949516, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8959525, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8969524, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8989522, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.8989522, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9007711, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.901192, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.901192, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9016933, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9026992, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.903699, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9066994, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9076998, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9076998, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9106987, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9156988, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9183462, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9220002, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9230082, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9230082, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.924078, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.924078, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.925089, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.925089, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9260778, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9270802, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692186444.9280803, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.sales_group.farm_int_farms__unioned": ["model.sales_group.farm_stg_excel__master_farms", "seed.sales_group.farm_seed_sales_manual_farms"], "model.sales_group.farm_int_sales_cammy__joined_dims": ["model.sales_group.farm_stg_redshift__sales_cammy", "source.sales_group.farm_redshift__prd__dwh.d_distributionchannel", "source.sales_group.farm_redshift__prd__dwh.d_material", "source.sales_group.farm_redshift__prd__dwh.d_salesmanager"], "model.sales_group.farm_int_sales_sol__added_farm_info": ["model.sales_group.farm_int_farms__unioned", "model.sales_group.farm_int_sales_sol__unioned_adj_rev"], "model.sales_group.farm_int_sales_sol__unioned_adj_rev": ["model.sales_group.farm_int_sol_vsdwh_salesvolumned__filtered_to_sales", "model.sales_group.farm_stg_excel__master_data_adj", "model.sales_group.farm_stg_excel__master_data_rev"], "model.sales_group.farm_int_sol_vsdwh_salesvolumned__filtered_to_sales": ["model.sales_group.farm_stg_sol__vsdwh_salesvolumed"], "model.sales_group.farm_sales": ["model.sales_group.farm_int_sales_cammy__joined_dims", "model.sales_group.farm_int_sales_sol__added_farm_info"], "model.sales_group.farm_stg_excel__budget": [], "model.sales_group.farm_stg_excel__exchange_rate": [], "model.sales_group.farm_stg_excel__master_data_adj": ["source.sales_group.farm_excel_sales.master_data_adj"], "model.sales_group.farm_stg_excel__master_data_rev": ["source.sales_group.farm_excel_sales.master_data_rev"], "model.sales_group.farm_stg_excel__master_farms": ["source.sales_group.farm_excel_sales.master_data_farm_info"], "model.sales_group.farm_stg_redshift__sales_cammy": ["source.sales_group.farm_redshift__prd__dwh.f_actualsales"], "model.sales_group.farm_stg_sap_ecc__sales_cam_my": [], "model.sales_group.farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_arwblapp.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_arwhyapp.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_bsh1001app.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_cbd1001app.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_dnb2001app.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_fasiaapp.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_gfcamapp1.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_gfvmmapp.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_laoapp.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_mtr1001app.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_mtr2001app.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_mtr2002app.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_mym1001app.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final": ["source.sales_group.farm_sol_starnapp.xp_01610ab_accthist_erp_final"], "model.sales_group.farm_stg_sol__vsdwh_salesvolumed": ["source.sales_group.farm_sol_arwhyapp.vsdwh_salesvolumed", "source.sales_group.farm_sol_cbd1001app.vsdwh_salesvolumed", "source.sales_group.farm_sol_dnb2001app.vsdwh_salesvolumed", "source.sales_group.farm_sol_fasiaapp.vsdwh_salesvolumed", "source.sales_group.farm_sol_mtr1001app.vsdwh_salesvolumed", "source.sales_group.farm_sol_mtr2001app.vsdwh_salesvolumed", "source.sales_group.farm_sol_mtr2002app.vsdwh_salesvolumed"], "model.sales_group.ZPPR0019_formulaprice_bagamt": ["model.sales_group.feed_stg_sap_ecc__draft_zppr0019_006", "seed.sales_group.mabaobi_doichieu_fileload", "seed.sales_group.material_P_tuSX_fileload"], "model.sales_group.feed_int_zmllistn__calculate_internal_entry": ["model.sales_group.feed_stg_sap_ecc__draft_mb51_006_101", "model.sales_group.feed_stg_sap_ecc__draft_zmllistn_005"], "model.sales_group.feed_int_zmllistn__calculate_opening_balance": ["model.sales_group.feed_int_zmllistn__calculate_internal_entry", "model.sales_group.feed_stg_sap_ecc__draft_zmllistn_005", "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005"], "model.sales_group.feed_margin": ["model.sales_group.feed_stg_sap_ecc__draft_mm60_006", "model.sales_group.feed_stg_sap_ecc__draft_mm60_006", "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006", "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006"], "model.sales_group.feed_sales_budget_2023": ["seed.sales_group.feed_seed_sales_budget_2023"], "model.sales_group.feed_stg_excel_donavet_tb_account_mapping": ["source.sales_group.feed_excel_donavet.tb_account_mapping"], "model.sales_group.feed_stg_excel_donavet_tb_donavet_1100": ["source.sales_group.feed_excel_donavet.tb_donavet_1100"], "model.sales_group.feed_stg_sap_ecc__draft_mb51_006": ["source.sales_group.feed_sap_ecc.draft_mb51_006"], "model.sales_group.feed_stg_sap_ecc__draft_mb51_006_101": [], "model.sales_group.feed_stg_sap_ecc__draft_mm60_006": ["source.sales_group.feed_sap_ecc.draft_mm60_006"], "model.sales_group.feed_stg_sap_ecc__draft_zmllistn_005": ["source.sales_group.feed_sap_ecc.draft_zmllistn_005"], "model.sales_group.feed_stg_sap_ecc__draft_zppr0019_006": ["source.sales_group.feed_sap_ecc.draft_zppr0019_006"], "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006": ["source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_ke24_006"], "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006": ["source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_ke25_006"], "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005": ["source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_mb5b_005"], "model.sales_group.feed_stg_sap_ecc__fi_0fi_gl_12": ["source.sales_group.feed_sap_ecc.fi_0fi_gl_12"], "model.sales_group.feed_stg_sol_gfdnbapp_cn_dnb_tb_1000": ["source.sales_group.farm_sol_dnb2001app.xp_01610ab_accthist_erp_final"], "model.sales_group.food_audit_sales_cms": ["model.sales_group.food_cms_billing_sales"], "model.sales_group.food_audit_sales_cms_compare": ["model.sales_group.food_cms_billing_sales", "model.sales_group.food_cms_billing_sales"], "model.sales_group.food_audit_sales_gkitchen": ["model.sales_group.food_gkitchen_sales"], "model.sales_group.food_audit_sales_gkitchen_compare": [], "model.sales_group.food_audit_sales_leboucher": ["model.sales_group.food_leboucher_sales"], "model.sales_group.food_audit_sales_leboucher_compare": ["model.sales_group.food_leboucher_sales"], "model.sales_group.dates": [], "model.sales_group.inventory_openning": ["model.sales_group.food_stg_sap_s4__mm_2lis_03_bf", "model.sales_group.food_stg_sap_s4__mm_2lis_03_um"], "model.sales_group.food_int_channels__unioned": ["model.sales_group.food_stg_excel_sales__md_channels", "model.sales_group.food_stg_sap_s4__md_0distr_chan_text"], "model.sales_group.food_int_customer_groups_1__unioned": ["model.sales_group.food_stg_excel_sales__md_customer_groups", "model.sales_group.food_stg_sap_s4__md_0cust_grp1_text"], "model.sales_group.food_int_customer_groups_2__unioned": ["model.sales_group.food_stg_excel_sales__md_customer_groups", "model.sales_group.food_stg_sap_s4__md_0cust_grp2_text"], "model.sales_group.food_int_customer_groups__unioned": ["model.sales_group.food_stg_excel_sales__md_customer_groups", "model.sales_group.food_stg_sap_s4__md_0cust_group_text"], "model.sales_group.food_int_fi_ofi_acdoca_10__filtered_to_sales": ["model.sales_group.food_stg_sap_s4__fi_0fi_acdoca_10", "model.sales_group.food_stg_sap_s4__md_0material_attr", "model.sales_group.food_stg_sap_s4__sd_2lis_11_vaitm", "model.sales_group.food_stg_sap_s4__sd_2lis_13_vditm", "model.sales_group.food_stg_sap_s4__tbl_vbpa"], "model.sales_group.food_int_misa_lbc2022_generalledger__filtered_to_sales": ["model.sales_group.food_sales_mapping_lbc_customers", "model.sales_group.food_stg_excel_sales__lbc_sales_groups", "model.sales_group.food_stg_excel_sales__md_channels", "model.sales_group.food_stg_excel_sales__md_customer_groups", "model.sales_group.food_stg_misa__lbc_generalledger", "source.sales_group.food_misa.saorder", "source.sales_group.food_misa.unit"], "model.sales_group.food_int_products__unioned": ["model.sales_group.food_stg_excel_sales__md_products", "model.sales_group.food_stg_sap_s4__md_0material_attr", "model.sales_group.food_stg_sap_s4__md_0material_text", "model.sales_group.food_stg_sap_s4__md_0matl_type_text", "model.sales_group.food_stg_sap_s4__md_0prod_hier_text"], "model.sales_group.food_int_sales_groups__unioned": ["model.sales_group.food_stg_excel_sales__lbc_sales_groups", "model.sales_group.food_stg_sap_s4__md_0sales_grp_text"], "model.sales_group.food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales": ["model.sales_group.food_int_products__unioned", "model.sales_group.food_stg_excel_sales__md_channels", "model.sales_group.food_stg_excel_sales__md_customer_groups", "model.sales_group.food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed"], "model.sales_group.food_sales_mapping_channels": ["seed.sales_group.food_seed_sales_mapping_channels"], "model.sales_group.food_sales_mapping_customer_groups": ["seed.sales_group.food_seed_sales_mapping_customer_groups"], "model.sales_group.food_sales_mapping_lbc_customers": ["model.sales_group.base_excel_sales__master_data_customer_lbc"], "model.sales_group.food_sales_mapping_lbc_sales_groups": ["seed.sales_group.food_seed_sales_mapping_lbc_sales_groups"], "model.sales_group.food_sales_mapping_materials": ["seed.sales_group.food_seed_sales_mapping_materials"], "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_cogs": ["model.sales_group.food_stg_sap_s4__fi_0fi_acdoca_10", "seed.sales_group.food_seed_scorecard_mapping_sales_groups"], "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost": ["model.sales_group.food_stg_sap_s4__fi_0fi_acdoca_10", "seed.sales_group.food_seed_scorecard_mapping_sales_groups"], "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_revenue": ["model.sales_group.food_stg_sap_s4__fi_0fi_acdoca_10", "model.sales_group.food_stg_sap_s4__tbl_fcml_ccs_r_all_v", "seed.sales_group.food_seed_scorecard_mapping_categories", "seed.sales_group.food_seed_scorecard_mapping_subcategories"], "model.sales_group.food_budget_of_accounting_department": ["model.sales_group.food_stg_excel_sales__budget_of_accounting_department"], "model.sales_group.food_cms_billing_sales": ["model.sales_group.food_int_channels__unioned", "model.sales_group.food_int_customer_groups_1__unioned", "model.sales_group.food_int_customer_groups_2__unioned", "model.sales_group.food_int_customer_groups__unioned", "model.sales_group.food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales"], "model.sales_group.food_feedy_dnf_customers": ["model.sales_group.food_stg_sap_s4__tbl_ztt_zsdc0016"], "model.sales_group.food_gkitchen_sales": ["model.sales_group.food_int_channels__unioned", "model.sales_group.food_int_customer_groups_1__unioned", "model.sales_group.food_int_customer_groups_2__unioned", "model.sales_group.food_int_customer_groups__unioned", "model.sales_group.food_int_fi_ofi_acdoca_10__filtered_to_sales", "model.sales_group.food_int_sales_groups__unioned", "model.sales_group.food_stg_sap_s4__md_0bill_type_text", "model.sales_group.food_stg_sap_s4__md_0customer_text", "model.sales_group.food_stg_sap_s4__md_0customer_text", "model.sales_group.food_stg_sap_s4__md_0material_text", "model.sales_group.food_stg_sap_s4__md_0ord_reason_text", "model.sales_group.food_stg_sap_s4__md_0plant_text", "model.sales_group.food_stg_sap_s4__md_0sales_dist_text", "model.sales_group.food_stg_sap_s4__md_0sales_off_text"], "model.sales_group.food_leboucher_sales": ["model.sales_group.food_int_channels__unioned", "model.sales_group.food_int_customer_groups_1__unioned", "model.sales_group.food_int_customer_groups_2__unioned", "model.sales_group.food_int_customer_groups__unioned", "model.sales_group.food_int_misa_lbc2022_generalledger__filtered_to_sales", "model.sales_group.food_int_sales_groups__unioned", "model.sales_group.food_stg_excel_sales__md_products_conversion_rate_lbc"], "model.sales_group.food_products": ["model.sales_group.food_int_products__unioned"], "model.sales_group.food_sales_target_by_channels": ["model.sales_group.food_stg_excel_sales__target_by_channel"], "model.sales_group.food_sales_target_by_channels_products": ["model.sales_group.food_stg_excel_sales__target_by_channel_by_product"], "model.sales_group.food_channels": ["model.sales_group.food_int_channels__unioned"], "model.sales_group.food_cogs": ["model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_cogs"], "model.sales_group.food_companies": ["model.sales_group.food_stg_sap_s4__md_0comp_code_text"], "model.sales_group.food_cost_elements": ["model.sales_group.food_stg_sap_s4__md_0costelmnt_text"], "model.sales_group.food_manufacturing_cost": ["model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost"], "model.sales_group.food_mapping_categories": ["seed.sales_group.food_seed_scorecard_mapping_categories"], "model.sales_group.food_mapping_costcenter_costcentergroup": ["seed.sales_group.food_seed_scorecard_mapping_cost_center_ccgroup"], "model.sales_group.food_mapping_hierarchies_costelement": ["seed.sales_group.food_seed_scorecard_hierarchies_costelement"], "model.sales_group.food_mapping_pl_plgroup": ["seed.sales_group.food_seed_scorecard_mapping_pl_and_plgroup"], "model.sales_group.food_mapping_subcategories": ["seed.sales_group.food_seed_scorecard_mapping_subcategories"], "model.sales_group.food_scorecard_kpi_budget": ["seed.sales_group.food_seed_scorecard_budget_2023"], "model.sales_group.food_stg_excel_sales__budget_of_accounting_department": ["source.sales_group.food_excel_sales.md_budget_bpkt"], "model.sales_group.food_stg_excel_sales__lbc_sales_groups": ["source.sales_group.food_excel_sales.md_sales_groups"], "model.sales_group.food_stg_excel_sales__master_data_customer_lbc": ["model.sales_group.base_excel_sales__master_data_customer_lbc", "seed.sales_group.food_seed_sales_mapping_lbc_customers_2023_03_27"], "model.sales_group.food_stg_excel_sales__md_channels": ["source.sales_group.food_excel_sales.md_channels"], "model.sales_group.food_stg_excel_sales__md_customer_groups": ["source.sales_group.food_excel_sales.md_customer_groups"], "model.sales_group.food_stg_excel_sales__md_products": ["source.sales_group.food_excel_sales.md_products"], "model.sales_group.food_stg_excel_sales__md_products_conversion_rate_lbc": ["source.sales_group.food_excel_sales.md_products_conversion_rate_lbc"], "model.sales_group.food_stg_excel_sales__target_by_channel": ["source.sales_group.food_excel_sales.sales_target_by_channels"], "model.sales_group.food_stg_excel_sales__target_by_channel_by_product": ["source.sales_group.food_excel_sales.sales_target_by_channels_products"], "model.sales_group.base_excel_sales__master_data_customer_lbc": ["source.sales_group.food_excel_sales.master_data_customer_lbc"], "model.sales_group.food_stg_excel_misa_lbc_tb_account_mapping": ["source.sales_group.food_excel_misa_lbc.tb_account_mapping"], "model.sales_group.food_stg_excel_misa_lbc_tp_lbc_3200_v2": ["source.sales_group.food_excel_misa_lbc.tp_lbc_3200_v2"], "model.sales_group.food_stg_misa__lbc_generalledger": ["source.sales_group.food_misa.generalledger", "source.sales_group.food_misa_22.generalledger"], "model.sales_group.food_stg_sap_s4__fi_0fi_gl_12": ["source.sales_group.food_sap_s4.fi_0fi_gl_12"], "model.sales_group.food_stg_sap_s4__md_0accnt_grp_text": ["source.sales_group.food_sap_s4.md_0accnt_grp_text"], "model.sales_group.food_stg_sap_s4__md_0bill_type_text": ["source.sales_group.food_sap_s4.md_0bill_type_text"], "model.sales_group.food_stg_sap_s4__md_0comp_code_text": ["source.sales_group.food_sap_s4.md_0comp_code_text"], "model.sales_group.food_stg_sap_s4__md_0costcenter_text": ["source.sales_group.food_sap_s4.md_0costcenter_text"], "model.sales_group.food_stg_sap_s4__md_0costelmnt_text": ["source.sales_group.food_sap_s4.md_0costelmnt_text"], "model.sales_group.food_stg_sap_s4__md_0customer_text": ["source.sales_group.food_sap_s4.md_0customer_text"], "model.sales_group.food_stg_sap_s4__md_0cust_group_text": ["source.sales_group.food_sap_s4.md_0cust_group_text"], "model.sales_group.food_stg_sap_s4__md_0cust_grp1_text": ["source.sales_group.food_sap_s4.md_0cust_grp1_text"], "model.sales_group.food_stg_sap_s4__md_0cust_grp2_text": ["source.sales_group.food_sap_s4.md_0cust_grp2_text"], "model.sales_group.food_stg_sap_s4__md_0distr_chan_text": ["source.sales_group.food_sap_s4.md_0distr_chan_text"], "model.sales_group.food_stg_sap_s4__md_0material_attr": ["source.sales_group.food_sap_s4.md_0material_attr"], "model.sales_group.food_stg_sap_s4__md_0material_text": ["source.sales_group.food_sap_s4.md_0material_text"], "model.sales_group.food_stg_sap_s4__md_0matl_type_text": ["source.sales_group.food_sap_s4.md_0matl_type_text"], "model.sales_group.food_stg_sap_s4__md_0ord_reason_text": ["source.sales_group.food_sap_s4.md_0ord_reason_text"], "model.sales_group.food_stg_sap_s4__md_0plant_text": ["source.sales_group.food_sap_s4.md_0plant_text"], "model.sales_group.food_stg_sap_s4__md_0prod_hier_text": ["source.sales_group.food_sap_s4.md_0prod_hier_text"], "model.sales_group.food_stg_sap_s4__md_0sales_dist_text": ["source.sales_group.food_sap_s4.md_0sales_dist_text"], "model.sales_group.food_stg_sap_s4__md_0sales_grp_text": ["source.sales_group.food_sap_s4.md_0sales_grp_text"], "model.sales_group.food_stg_sap_s4__md_0sales_off_text": ["source.sales_group.food_sap_s4.md_0sales_off_text"], "model.sales_group.food_stg_sap_s4__mm_2lis_03_bf": ["source.sales_group.food_sap_s4.mm_2lis_03_bf"], "model.sales_group.food_stg_sap_s4__mm_2lis_03_um": ["source.sales_group.food_sap_s4.mm_2lis_03_um"], "model.sales_group.food_stg_sap_s4__sd_2lis_11_vaitm": ["source.sales_group.food_sap_s4.sd_2lis_11_vaitm"], "model.sales_group.food_stg_sap_s4__sd_2lis_13_vditm": ["source.sales_group.food_sap_s4.sd_2lis_13_vditm"], "model.sales_group.food_stg_sap_s4__tbl_customer_sale_person": ["source.sales_group.food_sap_s4.tbl_customer_sale_person"], "model.sales_group.food_stg_sap_s4__tbl_fcml_ccs_r_all_v": ["source.sales_group.food_sap_s4.tbl_fcml_ccs_r_all_v"], "model.sales_group.food_stg_sap_s4__tbl_vbpa": ["source.sales_group.food_sap_s4.tbl_vbpa"], "model.sales_group.food_stg_sap_s4__tbl_ztt_zsdc0016": ["source.sales_group.food_sap_s4.tbl_ztt_zsdc0016", "source.sales_group.food_sap_s4.tbl_ztt_zsdc0016"], "model.sales_group.food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed": ["source.sales_group.food_sol_gnf1001apprepl.vs_safoorderl_salesadmin"], "model.sales_group.assert_cms_billing_sales_audit": ["model.sales_group.food_audit_sales_cms"], "model.sales_group.assert_gkitchen_sales_audit": ["model.sales_group.food_audit_sales_gkitchen"], "model.sales_group.assert_leboucher_ref_no_is_not_null": ["model.sales_group.food_leboucher_sales"], "model.sales_group.assert_leboucher_sales_audit": ["model.sales_group.food_audit_sales_leboucher"], "model.sales_group.consol_balance_sheet_backup": ["model.sales_group.consol_fiscal_period", "model.sales_group.food_stg_sap_s4__fi_0fi_gl_12"], "model.sales_group.consol_fiscal_period": ["seed.sales_group.period_input"], "model.sales_group.consol_mapping_account_pl_to_account_sap_union": ["model.sales_group.feed_stg_excel_donavet_tb_account_mapping", "model.sales_group.food_stg_excel_misa_lbc_tb_account_mapping", "model.sales_group.tech_stg_excel_qdtek_tb_account_mapping", "model.sales_group.tech_stg_excel_qdtek_tb_account_mapping"], "model.sales_group.consol_mapping_bs_gl_account": ["seed.sales_group.mapping_bs_gl_account"], "model.sales_group.consol_mapping_exchange_rate": ["source.sales_group.group_excel_financial_statements.md_rate"], "model.sales_group.consol_mapping_legal_company_code_currency": ["seed.sales_group.mapping_legal_company_code_currency"], "model.sales_group.consol_mapping_p_and_l_gl_account": ["seed.sales_group.mapping_p_and_l_account"], "model.sales_group.farm_pl_1000_solomon": ["model.sales_group.farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_pl_2000_solomon": ["model.sales_group.farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_pl_2000_solomon_dong_nam_bo": ["model.sales_group.farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_pl_2100_solomon": ["model.sales_group.farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_pl_2200_1001_solomon": ["model.sales_group.farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_pl_2200_2001_solomon": ["model.sales_group.farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_pl_2200_2002_solomon": ["model.sales_group.farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_pl_2300_solomon": ["model.sales_group.farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_pl_2400_solomon": ["model.sales_group.farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_pl_5000_cam_solomon": ["model.sales_group.farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_pl_5000_cbd1001_solomon": ["model.sales_group.farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_pl_5000_star_solomon": ["model.sales_group.farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_pl_5100_solomon": ["model.sales_group.farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_pl_5200_solomon": ["model.sales_group.farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_1000_solomon": ["model.sales_group.consol_mapping_bs_gl_account", "model.sales_group.farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_2000_solomon": ["model.sales_group.farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_2000_solomon_dong_nam_bo": ["model.sales_group.farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_2100_solomon": ["model.sales_group.farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_2200_1001_solomon": ["model.sales_group.farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_2200_2001_solomon": ["model.sales_group.farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_2200_2002_solomon": ["model.sales_group.farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_2300_solomon": ["model.sales_group.farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_2400_solomon": ["model.sales_group.farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_5000_cam_solomon": ["model.sales_group.farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_5000_cbd1001_solomon": ["model.sales_group.farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_5000_star_solomon": ["model.sales_group.farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_5100_solomon": ["model.sales_group.farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final"], "model.sales_group.farm_tb_5200_solomon": ["model.sales_group.farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final"], "model.sales_group.feed_pl_1000_dnb_solomon": ["model.sales_group.feed_stg_sol_gfdnbapp_cn_dnb_tb_1000"], "model.sales_group.feed_pl_1000_sap": ["model.sales_group.feed_stg_sap_ecc__fi_0fi_gl_12"], "model.sales_group.feed_pl_1100_donavet_excel": ["model.sales_group.feed_stg_excel_donavet_tb_donavet_1100"], "model.sales_group.feed_tb_1000_dnb_solomon": ["model.sales_group.feed_stg_sol_gfdnbapp_cn_dnb_tb_1000"], "model.sales_group.feed_tb_1000_sap": ["model.sales_group.consol_fiscal_period", "model.sales_group.feed_stg_sap_ecc__fi_0fi_gl_12"], "model.sales_group.feed_tb_1100_donavet_excel": ["model.sales_group.feed_stg_excel_donavet_tb_donavet_1100"], "model.sales_group.food_pl_3000_and_3100": ["model.sales_group.food_stg_sap_s4__fi_0fi_gl_12"], "model.sales_group.food_pl_3200_lbc": ["model.sales_group.food_stg_excel_misa_lbc_tp_lbc_3200_v2"], "model.sales_group.food_tb_3000_and_3100": ["model.sales_group.consol_fiscal_period", "model.sales_group.food_stg_sap_s4__fi_0fi_gl_12"], "model.sales_group.food_tb_3200_lbc": ["model.sales_group.food_stg_excel_misa_lbc_tp_lbc_3200_v2"], "model.sales_group.qdt_pl_4200_solomon": ["model.sales_group.qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final"], "model.sales_group.qdt_tb_4200_solomon": ["model.sales_group.qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final"], "model.sales_group.tech_pl_4000_qdtek": ["model.sales_group.tech_stg_excel_qdtek_tb_south_north_4000"], "model.sales_group.tech_pl_4001_qdtek_north": ["model.sales_group.tech_stg_excel_qdtek_tb_north_4001"], "model.sales_group.tech_pl_4002_qdtek_south": ["model.sales_group.tech_stg_excel_qdtek_tb_south_4002"], "model.sales_group.tech_pl_4300_ntt": ["model.sales_group.tech_stg_excel_ntt_tb_ntt_4300"], "model.sales_group.tech_tb_4000_qdtek": ["model.sales_group.tech_stg_excel_qdtek_tb_south_north_4000"], "model.sales_group.tech_tb_4300_ntt": ["model.sales_group.tech_stg_excel_ntt_tb_ntt_4300"], "model.sales_group.financial_profit_loss": ["model.sales_group.farm_pl_1000_solomon", "model.sales_group.farm_pl_2000_solomon", "model.sales_group.farm_pl_2000_solomon_dong_nam_bo", "model.sales_group.farm_pl_2100_solomon", "model.sales_group.farm_pl_2200_1001_solomon", "model.sales_group.farm_pl_2200_2001_solomon", "model.sales_group.farm_pl_2200_2002_solomon", "model.sales_group.farm_pl_2300_solomon", "model.sales_group.farm_pl_5000_cam_solomon", "model.sales_group.farm_pl_5000_cbd1001_solomon", "model.sales_group.farm_pl_5000_star_solomon", "model.sales_group.farm_pl_5100_solomon", "model.sales_group.farm_pl_5200_solomon", "model.sales_group.feed_pl_1000_dnb_solomon", "model.sales_group.feed_pl_1000_sap", "model.sales_group.feed_pl_1100_donavet_excel", "model.sales_group.food_pl_3000_and_3100", "model.sales_group.food_pl_3200_lbc", "model.sales_group.qdt_pl_4200_solomon", "model.sales_group.tech_pl_4001_qdtek_north", "model.sales_group.tech_pl_4002_qdtek_south", "model.sales_group.tech_pl_4300_ntt"], "model.sales_group.financial_statements": ["model.sales_group.farm_tb_1000_solomon", "model.sales_group.farm_tb_2000_solomon", "model.sales_group.farm_tb_2000_solomon_dong_nam_bo", "model.sales_group.farm_tb_2100_solomon", "model.sales_group.farm_tb_2200_1001_solomon", "model.sales_group.farm_tb_2200_2001_solomon", "model.sales_group.farm_tb_2200_2002_solomon", "model.sales_group.farm_tb_2300_solomon", "model.sales_group.farm_tb_5000_cam_solomon", "model.sales_group.farm_tb_5000_cbd1001_solomon", "model.sales_group.farm_tb_5000_star_solomon", "model.sales_group.farm_tb_5100_solomon", "model.sales_group.farm_tb_5200_solomon", "model.sales_group.feed_tb_1000_dnb_solomon", "model.sales_group.feed_tb_1000_sap", "model.sales_group.feed_tb_1100_donavet_excel", "model.sales_group.food_tb_3000_and_3100", "model.sales_group.food_tb_3200_lbc", "model.sales_group.qdt_tb_4200_solomon", "model.sales_group.tech_tb_4000_qdtek", "model.sales_group.tech_tb_4300_ntt"], "model.sales_group.financial_statements_backup": ["model.sales_group.consol_balance_sheet_backup"], "model.sales_group.mapping_md_balance_sheet_code": ["seed.sales_group.mapping_md_bs"], "model.sales_group.mapping_md_p_l_account": ["seed.sales_group.mapping_md_p_and_l_account"], "model.sales_group.qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final": ["source.sales_group.qdt_sol_log5001app.xp_01610ab_accthist_erp_final"], "model.sales_group.tech_qdtek_int_sales__actual_sales__joined": ["model.sales_group.tech_qdtek_stg_excel_sales__daily_sales", "model.sales_group.tech_qdtek_stg_excel_sales__salesman", "seed.sales_group.team"], "model.sales_group.tech_qdtek_int_sales__churn__grouped_by_customer": ["model.sales_group.tech_qdtek_int_sales__actual_sales__joined"], "model.sales_group.tech_qdtek_int_sales__customer_classs__grouped_by_month": ["model.sales_group.tech_qdtek_int_sales__actual_sales__joined"], "model.sales_group.tech_qdtek_int_sales__material__distinct": ["model.sales_group.tech_qdtek_stg_excel_sales__material"], "model.sales_group.tech_qdtek_int_sales__po_type__grouped_by_billing_number": ["model.sales_group.tech_qdtek_int_sales__actual_sales__joined"], "model.sales_group.tech_qdtek_int_sales__salesman__distinct": ["model.sales_group.tech_qdtek_stg_excel_sales__salesman"], "model.sales_group.tech_qdtek_sales__actual_sales": ["model.sales_group.tech_qdtek_int_sales__actual_sales__joined"], "model.sales_group.tech_qdtek_sales__billings": ["model.sales_group.tech_qdtek_int_sales__po_type__grouped_by_billing_number"], "model.sales_group.tech_qdtek_sales__branches": ["model.sales_group.tech_qdtek_int_sales__salesman__distinct"], "model.sales_group.tech_qdtek_sales__brands": ["model.sales_group.tech_qdtek_int_sales__material__distinct"], "model.sales_group.tech_qdtek_sales__budgets": ["model.sales_group.tech_qdtek_stg_excel_sales__budget"], "model.sales_group.tech_qdtek_sales__churns": ["model.sales_group.tech_qdtek_int_sales__churn__grouped_by_customer"], "model.sales_group.tech_qdtek_sales__customers": ["model.sales_group.tech_qdtek_int_sales__actual_sales__joined"], "model.sales_group.tech_qdtek_sales__customer_classes": ["model.sales_group.tech_qdtek_int_sales__customer_classs__grouped_by_month"], "model.sales_group.tech_qdtek_sales__departments": ["model.sales_group.tech_qdtek_int_sales__salesman__distinct"], "model.sales_group.tech_qdtek_sales__materials": ["model.sales_group.tech_qdtek_int_sales__material__distinct"], "model.sales_group.tech_qdtek_sales__md_customers": ["source.sales_group.qdtek_excel_sales.customer"], "model.sales_group.tech_qdtek_sales__md_pipeline_crms": ["source.sales_group.qdtek_excel_sales.pipeline_crm"], "model.sales_group.tech_qdtek_sales__pbi_user_permissions": ["seed.sales_group.pbi_user_permission"], "model.sales_group.tech_qdtek_sales__periods": ["seed.sales_group.period"], "model.sales_group.tech_qdtek_sales__product_groups": ["model.sales_group.tech_qdtek_int_sales__material__distinct"], "model.sales_group.tech_qdtek_sales__regions": ["seed.sales_group.region"], "model.sales_group.tech_qdtek_sales__salesmans": ["model.sales_group.tech_qdtek_int_sales__salesman__distinct"], "model.sales_group.tech_qdtek_sales__teams": ["model.sales_group.tech_qdtek_int_sales__salesman__distinct"], "model.sales_group.tech_qdtek_sales__top_customers": ["seed.sales_group.top_customer"], "model.sales_group.tech_qdtek_stg_excel_sales__budget": ["source.sales_group.qdtek_excel_sales.forecast_budget"], "model.sales_group.tech_qdtek_stg_excel_sales__daily_sales": ["source.sales_group.qdtek_excel_sales.daily_sales"], "model.sales_group.tech_qdtek_stg_excel_sales__material": ["source.sales_group.qdtek_excel_sales.material"], "model.sales_group.tech_qdtek_stg_excel_sales__salesman": ["source.sales_group.qdtek_excel_sales.salesman"], "model.sales_group.tech_stg_excel_ntt_tb_ntt_4300": ["source.sales_group.tech_excel_ntt.tb_ntt_4300"], "model.sales_group.tech_stg_excel_qdtek_tb_account_mapping": ["source.sales_group.tech_excel_qdtek.tb_account_mapping"], "model.sales_group.tech_stg_excel_qdtek_tb_north_4001": ["source.sales_group.tech_excel_qdtek.tb_qdtek_north"], "model.sales_group.tech_stg_excel_qdtek_tb_south_4002": ["source.sales_group.tech_excel_qdtek.tb_qdtek_south"], "model.sales_group.tech_stg_excel_qdtek_tb_south_north_4000": ["source.sales_group.tech_excel_qdtek.tb_south_north_4000"], "test.sales_group.assert_cms_billing_sales_audit": ["model.sales_group.food_audit_sales_cms"], "test.sales_group.assert_gkitchen_sales_audit": ["model.sales_group.food_audit_sales_gkitchen"], "test.sales_group.assert_leboucher_ref_no_is_not_null": ["model.sales_group.food_leboucher_sales"], "test.sales_group.assert_leboucher_sales_audit": ["model.sales_group.food_audit_sales_leboucher"], "seed.sales_group.farm_seed_sales_manual_farms": [], "seed.sales_group.industries": [], "seed.sales_group.regions": [], "seed.sales_group.mabaobi_doichieu_fileload": [], "seed.sales_group.material_P_tuSX_fileload": [], "seed.sales_group.feed_seed_sales_budget_2023": [], "seed.sales_group.sales_groups": [], "seed.sales_group.food_seed_sales_mapping_channels": [], "seed.sales_group.food_seed_sales_mapping_customer_groups": [], "seed.sales_group.food_seed_sales_mapping_lbc_customers_2023_03_27": [], "seed.sales_group.food_seed_sales_mapping_lbc_sales_groups": [], "seed.sales_group.food_seed_sales_mapping_materials": [], "seed.sales_group.food_seed_scorecard_budget_2023": [], "seed.sales_group.food_seed_scorecard_hierarchies_costelement": [], "seed.sales_group.food_seed_scorecard_mapping_categories": [], "seed.sales_group.food_seed_scorecard_mapping_cost_center_ccgroup": [], "seed.sales_group.food_seed_scorecard_mapping_pl_and_plgroup": [], "seed.sales_group.food_seed_scorecard_mapping_sales_groups": [], "seed.sales_group.food_seed_scorecard_mapping_subcategories": [], "seed.sales_group.mapping_bs_gl_account": [], "seed.sales_group.mapping_legal_company_code_currency": [], "seed.sales_group.mapping_md_bs": [], "seed.sales_group.mapping_md_p_and_l_account": [], "seed.sales_group.mapping_p_and_l_account": [], "seed.sales_group.period_input": [], "seed.sales_group.pbi_user_permission": [], "seed.sales_group.period": [], "seed.sales_group.region": [], "seed.sales_group.team": [], "seed.sales_group.top_customer": [], "test.sales_group.dbt_expectations_expect_column_values_to_be_unique_food_gkitchen_sales_posting_date.f265ddc94c": ["model.sales_group.food_gkitchen_sales"], "test.sales_group.dbt_expectations_expect_column_values_to_not_be_null_food_leboucher_sales_posting_date.32cf50cc7e": ["model.sales_group.food_leboucher_sales"], "test.sales_group.dbt_expectations_expect_column_values_to_be_unique_food_leboucher_sales_posting_date.336f582803": ["model.sales_group.food_leboucher_sales"], "test.sales_group.dbt_utils_recency_food_cms_billing_sales_day__posting_date__0.52e3fc6071": ["model.sales_group.food_cms_billing_sales"], "model.sales_group.food_fi_scorecard": ["model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_revenue", "model.sales_group.food_mapping_costcenter_costcentergroup", "model.sales_group.food_mapping_hierarchies_costelement", "model.sales_group.food_mapping_pl_plgroup", "model.sales_group.food_scorecard_kpi_budget", "model.sales_group.food_stg_sap_s4__md_0costcenter_text", "model.sales_group.food_stg_sap_s4__md_0distr_chan_text"], "model.sales_group.food_stg_sap_s4__fi_0fi_acdoca_10": ["source.sales_group.food_sap_s4.fi_0fi_acdoca_10"], "source.sales_group.farm_excel_sales.master_data_farm_info": [], "source.sales_group.farm_excel_sales.master_data_adj": [], "source.sales_group.farm_excel_sales.master_data_rev": [], "source.sales_group.farm_redshift__prd__dwh.f_actualsales": [], "source.sales_group.farm_redshift__prd__dwh.d_material": [], "source.sales_group.farm_redshift__prd__dwh.d_distributionchannel": [], "source.sales_group.farm_redshift__prd__dwh.d_salesmanager": [], "source.sales_group.farm_sol_dnb2001app.vsdwh_salesvolumed": [], "source.sales_group.farm_sol_dnb2001app.xp_01610ab_accthist_erp_final": [], "source.sales_group.farm_sol_fasiaapp.vsdwh_salesvolumed": [], "source.sales_group.farm_sol_fasiaapp.xp_01610ab_accthist_erp_final": [], "source.sales_group.farm_sol_arwhyapp.vsdwh_salesvolumed": [], "source.sales_group.farm_sol_arwhyapp.xp_01610ab_accthist_erp_final": [], "source.sales_group.farm_sol_mtr2001app.vsdwh_salesvolumed": [], "source.sales_group.farm_sol_mtr2001app.xp_01610ab_accthist_erp_final": [], "source.sales_group.farm_sol_mtr1001app.vsdwh_salesvolumed": [], "source.sales_group.farm_sol_mtr1001app.xp_01610ab_accthist_erp_final": [], "source.sales_group.farm_sol_mtr2002app.vsdwh_salesvolumed": [], "source.sales_group.farm_sol_mtr2002app.xp_01610ab_accthist_erp_final": [], "source.sales_group.farm_sol_cbd1001app.vsdwh_salesvolumed": [], "source.sales_group.farm_sol_cbd1001app.xp_01610ab_accthist_erp_final": [], "source.sales_group.farm_sol_arwblapp.xp_01610ab_accthist_erp_final": [], "source.sales_group.farm_sol_bsh1001app.xp_01610ab_accthist_erp_final": [], "source.sales_group.farm_sol_starnapp.xp_01610ab_accthist_erp_final": [], "source.sales_group.farm_sol_gfcamapp1.xp_01610ab_accthist_erp_final": [], "source.sales_group.farm_sol_mym1001app.xp_01610ab_accthist_erp_final": [], "source.sales_group.farm_sol_laoapp.xp_01610ab_accthist_erp_final": [], "source.sales_group.farm_sol_gfvmmapp.xp_01610ab_accthist_erp_final": [], "source.sales_group.feed_excel_donavet.tb_donavet_1100": [], "source.sales_group.feed_excel_donavet.tb_account_mapping": [], "source.sales_group.feed_sap_ecc.fi_0fi_gl_12": [], "source.sales_group.feed_sap_ecc.draft_mb51_006": [], "source.sales_group.feed_sap_ecc.draft_mm60_006": [], "source.sales_group.feed_sap_ecc.draft_zmllistn_005": [], "source.sales_group.feed_sap_ecc.draft_zppr0019_006": [], "source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_ke24_006": [], "source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_ke25_006": [], "source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_mb5b_005": [], "source.sales_group.feed_excel_gfdnbapp.cn_dnb_tb_1000": [], "source.sales_group.food_excel_sales.master_data_customer_lbc": [], "source.sales_group.food_excel_sales.md_channels": [], "source.sales_group.food_excel_sales.md_sales_groups": [], "source.sales_group.food_excel_sales.md_customer_groups": [], "source.sales_group.food_excel_sales.sales_target_by_channels": [], "source.sales_group.food_excel_sales.sales_target_by_channels_products": [], "source.sales_group.food_excel_sales.md_budget_bpkt": [], "source.sales_group.food_excel_sales.md_products": [], "source.sales_group.food_excel_sales.md_products_conversion_rate_lbc": [], "source.sales_group.food_misa_22.generalledger": [], "source.sales_group.food_misa_22.unit": [], "source.sales_group.food_misa_22.saorder": [], "source.sales_group.food_misa.generalledger": [], "source.sales_group.food_misa.unit": [], "source.sales_group.food_misa.saorder": [], "source.sales_group.food_excel_misa_lbc.tp_lbc_3200_v2": [], "source.sales_group.food_excel_misa_lbc.tb_account_mapping": [], "source.sales_group.food_sap_s4.md_0accnt_grp_text": [], "source.sales_group.food_sap_s4.md_0comp_code_attr": [], "source.sales_group.food_sap_s4.md_0cust_group_text": [], "source.sales_group.food_sap_s4.fi_0fi_acdoca_10": [], "source.sales_group.food_sap_s4.md_0sales_grp_text": [], "source.sales_group.food_sap_s4.md_0customer_text": [], "source.sales_group.food_sap_s4.md_0cust_grp1_text": [], "source.sales_group.food_sap_s4.md_0cust_grp2_text": [], "source.sales_group.food_sap_s4.md_0distr_chan_text": [], "source.sales_group.food_sap_s4.md_0material_text": [], "source.sales_group.food_sap_s4.md_0sales_off_text": [], "source.sales_group.food_sap_s4.md_0plant_text": [], "source.sales_group.food_sap_s4.md_0sales_dist_text": [], "source.sales_group.food_sap_s4.md_0matl_type_text": [], "source.sales_group.food_sap_s4.md_0material_attr": [], "source.sales_group.food_sap_s4.md_0prod_hier_text": [], "source.sales_group.food_sap_s4.md_0comp_code_text": [], "source.sales_group.food_sap_s4.md_0costelmnt_text": [], "source.sales_group.food_sap_s4.sd_2lis_13_vditm": [], "source.sales_group.food_sap_s4.sd_2lis_11_vaitm": [], "source.sales_group.food_sap_s4.tbl_customer_sale_person": [], "source.sales_group.food_sap_s4.md_0costcenter_text": [], "source.sales_group.food_sap_s4.mm_2lis_03_bf": [], "source.sales_group.food_sap_s4.mm_2lis_03_um": [], "source.sales_group.food_sap_s4.fi_0fi_gl_12": [], "source.sales_group.food_sap_s4.tbl_fcml_ccs_r_all_v": [], "source.sales_group.food_sap_s4.md_0bill_type_text": [], "source.sales_group.food_sap_s4.tbl_vbpa": [], "source.sales_group.food_sap_s4.tbl_ztt_zsdc0016": [], "source.sales_group.food_sap_s4.md_0ord_reason_text": [], "source.sales_group.food_sol_gnf1001apprepl.vs_safoorderl_salesadmin": [], "source.sales_group.group_excel_financial_statements.md_rate": [], "source.sales_group.qdt_sol_log5001app.xp_01610ab_accthist_erp_final": [], "source.sales_group.qdtek_excel_sales.customer": [], "source.sales_group.qdtek_excel_sales.daily_sales": [], "source.sales_group.qdtek_excel_sales.material": [], "source.sales_group.qdtek_excel_sales.pipeline_crm": [], "source.sales_group.qdtek_excel_sales.forecast_budget": [], "source.sales_group.qdtek_excel_sales.salesman": [], "source.sales_group.tech_excel_qdtek.tb_south_north_4000": [], "source.sales_group.tech_excel_qdtek.tb_qdtek_north": [], "source.sales_group.tech_excel_qdtek.tb_qdtek_south": [], "source.sales_group.tech_excel_qdtek.tb_account_mapping": [], "source.sales_group.tech_excel_qdtek.tb_ntt_4300": [], "source.sales_group.tech_excel_ntt.tb_ntt_4300": []}, "child_map": {"model.sales_group.farm_int_farms__unioned": ["model.sales_group.farm_int_sales_sol__added_farm_info"], "model.sales_group.farm_int_sales_cammy__joined_dims": ["model.sales_group.farm_sales"], "model.sales_group.farm_int_sales_sol__added_farm_info": ["model.sales_group.farm_sales"], "model.sales_group.farm_int_sales_sol__unioned_adj_rev": ["model.sales_group.farm_int_sales_sol__added_farm_info"], "model.sales_group.farm_int_sol_vsdwh_salesvolumned__filtered_to_sales": ["model.sales_group.farm_int_sales_sol__unioned_adj_rev"], "model.sales_group.farm_sales": [], "model.sales_group.farm_stg_excel__budget": [], "model.sales_group.farm_stg_excel__exchange_rate": [], "model.sales_group.farm_stg_excel__master_data_adj": ["model.sales_group.farm_int_sales_sol__unioned_adj_rev"], "model.sales_group.farm_stg_excel__master_data_rev": ["model.sales_group.farm_int_sales_sol__unioned_adj_rev"], "model.sales_group.farm_stg_excel__master_farms": ["model.sales_group.farm_int_farms__unioned"], "model.sales_group.farm_stg_redshift__sales_cammy": ["model.sales_group.farm_int_sales_cammy__joined_dims"], "model.sales_group.farm_stg_sap_ecc__sales_cam_my": [], "model.sales_group.farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_2300_solomon", "model.sales_group.farm_tb_2300_solomon"], "model.sales_group.farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_2100_solomon", "model.sales_group.farm_tb_2100_solomon"], "model.sales_group.farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_2400_solomon", "model.sales_group.farm_tb_2400_solomon"], "model.sales_group.farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_5000_cbd1001_solomon", "model.sales_group.farm_tb_5000_cbd1001_solomon"], "model.sales_group.farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_2000_solomon_dong_nam_bo", "model.sales_group.farm_tb_2000_solomon_dong_nam_bo"], "model.sales_group.farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_2000_solomon", "model.sales_group.farm_tb_2000_solomon"], "model.sales_group.farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_5000_cam_solomon", "model.sales_group.farm_tb_5000_cam_solomon"], "model.sales_group.farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_1000_solomon", "model.sales_group.farm_tb_1000_solomon"], "model.sales_group.farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_5200_solomon", "model.sales_group.farm_tb_5200_solomon"], "model.sales_group.farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_2200_1001_solomon", "model.sales_group.farm_tb_2200_1001_solomon"], "model.sales_group.farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_2200_2001_solomon", "model.sales_group.farm_tb_2200_2001_solomon"], "model.sales_group.farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_2200_2002_solomon", "model.sales_group.farm_tb_2200_2002_solomon"], "model.sales_group.farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_5100_solomon", "model.sales_group.farm_tb_5100_solomon"], "model.sales_group.farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final": ["model.sales_group.farm_pl_5000_star_solomon", "model.sales_group.farm_tb_5000_star_solomon"], "model.sales_group.farm_stg_sol__vsdwh_salesvolumed": ["model.sales_group.farm_int_sol_vsdwh_salesvolumned__filtered_to_sales"], "model.sales_group.ZPPR0019_formulaprice_bagamt": [], "model.sales_group.feed_int_zmllistn__calculate_internal_entry": ["model.sales_group.feed_int_zmllistn__calculate_opening_balance"], "model.sales_group.feed_int_zmllistn__calculate_opening_balance": [], "model.sales_group.feed_margin": [], "model.sales_group.feed_sales_budget_2023": [], "model.sales_group.feed_stg_excel_donavet_tb_account_mapping": ["model.sales_group.consol_mapping_account_pl_to_account_sap_union"], "model.sales_group.feed_stg_excel_donavet_tb_donavet_1100": ["model.sales_group.feed_pl_1100_donavet_excel", "model.sales_group.feed_tb_1100_donavet_excel"], "model.sales_group.feed_stg_sap_ecc__draft_mb51_006": [], "model.sales_group.feed_stg_sap_ecc__draft_mb51_006_101": ["model.sales_group.feed_int_zmllistn__calculate_internal_entry"], "model.sales_group.feed_stg_sap_ecc__draft_mm60_006": ["model.sales_group.feed_margin", "model.sales_group.feed_margin"], "model.sales_group.feed_stg_sap_ecc__draft_zmllistn_005": ["model.sales_group.feed_int_zmllistn__calculate_internal_entry", "model.sales_group.feed_int_zmllistn__calculate_opening_balance"], "model.sales_group.feed_stg_sap_ecc__draft_zppr0019_006": ["model.sales_group.ZPPR0019_formulaprice_bagamt"], "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006": ["model.sales_group.feed_margin"], "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006": ["model.sales_group.feed_margin"], "model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005": ["model.sales_group.feed_int_zmllistn__calculate_opening_balance"], "model.sales_group.feed_stg_sap_ecc__fi_0fi_gl_12": ["model.sales_group.feed_pl_1000_sap", "model.sales_group.feed_tb_1000_sap"], "model.sales_group.feed_stg_sol_gfdnbapp_cn_dnb_tb_1000": ["model.sales_group.feed_pl_1000_dnb_solomon", "model.sales_group.feed_tb_1000_dnb_solomon"], "model.sales_group.food_audit_sales_cms": ["model.sales_group.assert_cms_billing_sales_audit", "test.sales_group.assert_cms_billing_sales_audit"], "model.sales_group.food_audit_sales_cms_compare": [], "model.sales_group.food_audit_sales_gkitchen": ["model.sales_group.assert_gkitchen_sales_audit", "test.sales_group.assert_gkitchen_sales_audit"], "model.sales_group.food_audit_sales_gkitchen_compare": [], "model.sales_group.food_audit_sales_leboucher": ["model.sales_group.assert_leboucher_sales_audit", "test.sales_group.assert_leboucher_sales_audit"], "model.sales_group.food_audit_sales_leboucher_compare": [], "model.sales_group.dates": [], "model.sales_group.inventory_openning": [], "model.sales_group.food_int_channels__unioned": ["model.sales_group.food_channels", "model.sales_group.food_cms_billing_sales", "model.sales_group.food_gkitchen_sales", "model.sales_group.food_leboucher_sales"], "model.sales_group.food_int_customer_groups_1__unioned": ["model.sales_group.food_cms_billing_sales", "model.sales_group.food_gkitchen_sales", "model.sales_group.food_leboucher_sales"], "model.sales_group.food_int_customer_groups_2__unioned": ["model.sales_group.food_cms_billing_sales", "model.sales_group.food_gkitchen_sales", "model.sales_group.food_leboucher_sales"], "model.sales_group.food_int_customer_groups__unioned": ["model.sales_group.food_cms_billing_sales", "model.sales_group.food_gkitchen_sales", "model.sales_group.food_leboucher_sales"], "model.sales_group.food_int_fi_ofi_acdoca_10__filtered_to_sales": ["model.sales_group.food_gkitchen_sales"], "model.sales_group.food_int_misa_lbc2022_generalledger__filtered_to_sales": ["model.sales_group.food_leboucher_sales"], "model.sales_group.food_int_products__unioned": ["model.sales_group.food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales", "model.sales_group.food_products"], "model.sales_group.food_int_sales_groups__unioned": ["model.sales_group.food_gkitchen_sales", "model.sales_group.food_leboucher_sales"], "model.sales_group.food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales": ["model.sales_group.food_cms_billing_sales"], "model.sales_group.food_sales_mapping_channels": [], "model.sales_group.food_sales_mapping_customer_groups": [], "model.sales_group.food_sales_mapping_lbc_customers": ["model.sales_group.food_int_misa_lbc2022_generalledger__filtered_to_sales"], "model.sales_group.food_sales_mapping_lbc_sales_groups": [], "model.sales_group.food_sales_mapping_materials": [], "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_cogs": ["model.sales_group.food_cogs"], "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost": ["model.sales_group.food_manufacturing_cost"], "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_revenue": ["model.sales_group.food_fi_scorecard"], "model.sales_group.food_budget_of_accounting_department": [], "model.sales_group.food_cms_billing_sales": ["model.sales_group.food_audit_sales_cms", "model.sales_group.food_audit_sales_cms_compare", "model.sales_group.food_audit_sales_cms_compare", "test.sales_group.dbt_utils_recency_food_cms_billing_sales_day__posting_date__0.52e3fc6071"], "model.sales_group.food_feedy_dnf_customers": [], "model.sales_group.food_gkitchen_sales": ["model.sales_group.food_audit_sales_gkitchen", "test.sales_group.dbt_expectations_expect_column_values_to_be_unique_food_gkitchen_sales_posting_date.f265ddc94c"], "model.sales_group.food_leboucher_sales": ["model.sales_group.assert_leboucher_ref_no_is_not_null", "model.sales_group.food_audit_sales_leboucher", "model.sales_group.food_audit_sales_leboucher_compare", "test.sales_group.assert_leboucher_ref_no_is_not_null", "test.sales_group.dbt_expectations_expect_column_values_to_be_unique_food_leboucher_sales_posting_date.336f582803", "test.sales_group.dbt_expectations_expect_column_values_to_not_be_null_food_leboucher_sales_posting_date.32cf50cc7e"], "model.sales_group.food_products": [], "model.sales_group.food_sales_target_by_channels": [], "model.sales_group.food_sales_target_by_channels_products": [], "model.sales_group.food_channels": [], "model.sales_group.food_cogs": [], "model.sales_group.food_companies": [], "model.sales_group.food_cost_elements": [], "model.sales_group.food_manufacturing_cost": [], "model.sales_group.food_mapping_categories": [], "model.sales_group.food_mapping_costcenter_costcentergroup": ["model.sales_group.food_fi_scorecard"], "model.sales_group.food_mapping_hierarchies_costelement": ["model.sales_group.food_fi_scorecard"], "model.sales_group.food_mapping_pl_plgroup": ["model.sales_group.food_fi_scorecard"], "model.sales_group.food_mapping_subcategories": [], "model.sales_group.food_scorecard_kpi_budget": ["model.sales_group.food_fi_scorecard"], "model.sales_group.food_stg_excel_sales__budget_of_accounting_department": ["model.sales_group.food_budget_of_accounting_department"], "model.sales_group.food_stg_excel_sales__lbc_sales_groups": ["model.sales_group.food_int_misa_lbc2022_generalledger__filtered_to_sales", "model.sales_group.food_int_sales_groups__unioned"], "model.sales_group.food_stg_excel_sales__master_data_customer_lbc": [], "model.sales_group.food_stg_excel_sales__md_channels": ["model.sales_group.food_int_channels__unioned", "model.sales_group.food_int_misa_lbc2022_generalledger__filtered_to_sales", "model.sales_group.food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales"], "model.sales_group.food_stg_excel_sales__md_customer_groups": ["model.sales_group.food_int_customer_groups_1__unioned", "model.sales_group.food_int_customer_groups_2__unioned", "model.sales_group.food_int_customer_groups__unioned", "model.sales_group.food_int_misa_lbc2022_generalledger__filtered_to_sales", "model.sales_group.food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales"], "model.sales_group.food_stg_excel_sales__md_products": ["model.sales_group.food_int_products__unioned"], "model.sales_group.food_stg_excel_sales__md_products_conversion_rate_lbc": ["model.sales_group.food_leboucher_sales"], "model.sales_group.food_stg_excel_sales__target_by_channel": ["model.sales_group.food_sales_target_by_channels"], "model.sales_group.food_stg_excel_sales__target_by_channel_by_product": ["model.sales_group.food_sales_target_by_channels_products"], "model.sales_group.base_excel_sales__master_data_customer_lbc": ["model.sales_group.food_sales_mapping_lbc_customers", "model.sales_group.food_stg_excel_sales__master_data_customer_lbc"], "model.sales_group.food_stg_excel_misa_lbc_tb_account_mapping": ["model.sales_group.consol_mapping_account_pl_to_account_sap_union"], "model.sales_group.food_stg_excel_misa_lbc_tp_lbc_3200_v2": ["model.sales_group.food_pl_3200_lbc", "model.sales_group.food_tb_3200_lbc"], "model.sales_group.food_stg_misa__lbc_generalledger": ["model.sales_group.food_int_misa_lbc2022_generalledger__filtered_to_sales"], "model.sales_group.food_stg_sap_s4__fi_0fi_gl_12": ["model.sales_group.consol_balance_sheet_backup", "model.sales_group.food_pl_3000_and_3100", "model.sales_group.food_tb_3000_and_3100"], "model.sales_group.food_stg_sap_s4__md_0accnt_grp_text": [], "model.sales_group.food_stg_sap_s4__md_0bill_type_text": ["model.sales_group.food_gkitchen_sales"], "model.sales_group.food_stg_sap_s4__md_0comp_code_text": ["model.sales_group.food_companies"], "model.sales_group.food_stg_sap_s4__md_0costcenter_text": ["model.sales_group.food_fi_scorecard"], "model.sales_group.food_stg_sap_s4__md_0costelmnt_text": ["model.sales_group.food_cost_elements"], "model.sales_group.food_stg_sap_s4__md_0customer_text": ["model.sales_group.food_gkitchen_sales", "model.sales_group.food_gkitchen_sales"], "model.sales_group.food_stg_sap_s4__md_0cust_group_text": ["model.sales_group.food_int_customer_groups__unioned"], "model.sales_group.food_stg_sap_s4__md_0cust_grp1_text": ["model.sales_group.food_int_customer_groups_1__unioned"], "model.sales_group.food_stg_sap_s4__md_0cust_grp2_text": ["model.sales_group.food_int_customer_groups_2__unioned"], "model.sales_group.food_stg_sap_s4__md_0distr_chan_text": ["model.sales_group.food_fi_scorecard", "model.sales_group.food_int_channels__unioned"], "model.sales_group.food_stg_sap_s4__md_0material_attr": ["model.sales_group.food_int_fi_ofi_acdoca_10__filtered_to_sales", "model.sales_group.food_int_products__unioned"], "model.sales_group.food_stg_sap_s4__md_0material_text": ["model.sales_group.food_gkitchen_sales", "model.sales_group.food_int_products__unioned"], "model.sales_group.food_stg_sap_s4__md_0matl_type_text": ["model.sales_group.food_int_products__unioned"], "model.sales_group.food_stg_sap_s4__md_0ord_reason_text": ["model.sales_group.food_gkitchen_sales"], "model.sales_group.food_stg_sap_s4__md_0plant_text": ["model.sales_group.food_gkitchen_sales"], "model.sales_group.food_stg_sap_s4__md_0prod_hier_text": ["model.sales_group.food_int_products__unioned"], "model.sales_group.food_stg_sap_s4__md_0sales_dist_text": ["model.sales_group.food_gkitchen_sales"], "model.sales_group.food_stg_sap_s4__md_0sales_grp_text": ["model.sales_group.food_int_sales_groups__unioned"], "model.sales_group.food_stg_sap_s4__md_0sales_off_text": ["model.sales_group.food_gkitchen_sales"], "model.sales_group.food_stg_sap_s4__mm_2lis_03_bf": ["model.sales_group.inventory_openning"], "model.sales_group.food_stg_sap_s4__mm_2lis_03_um": ["model.sales_group.inventory_openning"], "model.sales_group.food_stg_sap_s4__sd_2lis_11_vaitm": ["model.sales_group.food_int_fi_ofi_acdoca_10__filtered_to_sales"], "model.sales_group.food_stg_sap_s4__sd_2lis_13_vditm": ["model.sales_group.food_int_fi_ofi_acdoca_10__filtered_to_sales"], "model.sales_group.food_stg_sap_s4__tbl_customer_sale_person": [], "model.sales_group.food_stg_sap_s4__tbl_fcml_ccs_r_all_v": ["model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_revenue"], "model.sales_group.food_stg_sap_s4__tbl_vbpa": ["model.sales_group.food_int_fi_ofi_acdoca_10__filtered_to_sales"], "model.sales_group.food_stg_sap_s4__tbl_ztt_zsdc0016": ["model.sales_group.food_feedy_dnf_customers"], "model.sales_group.food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed": ["model.sales_group.food_int_sol_gnf1001apprepl_vsdwh_salesvolumed__grouped_to_sales"], "model.sales_group.assert_cms_billing_sales_audit": [], "model.sales_group.assert_gkitchen_sales_audit": [], "model.sales_group.assert_leboucher_ref_no_is_not_null": [], "model.sales_group.assert_leboucher_sales_audit": [], "model.sales_group.consol_balance_sheet_backup": ["model.sales_group.financial_statements_backup"], "model.sales_group.consol_fiscal_period": ["model.sales_group.consol_balance_sheet_backup", "model.sales_group.feed_tb_1000_sap", "model.sales_group.food_tb_3000_and_3100"], "model.sales_group.consol_mapping_account_pl_to_account_sap_union": [], "model.sales_group.consol_mapping_bs_gl_account": ["model.sales_group.farm_tb_1000_solomon"], "model.sales_group.consol_mapping_exchange_rate": [], "model.sales_group.consol_mapping_legal_company_code_currency": [], "model.sales_group.consol_mapping_p_and_l_gl_account": [], "model.sales_group.farm_pl_1000_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.farm_pl_2000_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.farm_pl_2000_solomon_dong_nam_bo": ["model.sales_group.financial_profit_loss"], "model.sales_group.farm_pl_2100_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.farm_pl_2200_1001_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.farm_pl_2200_2001_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.farm_pl_2200_2002_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.farm_pl_2300_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.farm_pl_2400_solomon": [], "model.sales_group.farm_pl_5000_cam_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.farm_pl_5000_cbd1001_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.farm_pl_5000_star_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.farm_pl_5100_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.farm_pl_5200_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.farm_tb_1000_solomon": ["model.sales_group.financial_statements"], "model.sales_group.farm_tb_2000_solomon": ["model.sales_group.financial_statements"], "model.sales_group.farm_tb_2000_solomon_dong_nam_bo": ["model.sales_group.financial_statements"], "model.sales_group.farm_tb_2100_solomon": ["model.sales_group.financial_statements"], "model.sales_group.farm_tb_2200_1001_solomon": ["model.sales_group.financial_statements"], "model.sales_group.farm_tb_2200_2001_solomon": ["model.sales_group.financial_statements"], "model.sales_group.farm_tb_2200_2002_solomon": ["model.sales_group.financial_statements"], "model.sales_group.farm_tb_2300_solomon": ["model.sales_group.financial_statements"], "model.sales_group.farm_tb_2400_solomon": [], "model.sales_group.farm_tb_5000_cam_solomon": ["model.sales_group.financial_statements"], "model.sales_group.farm_tb_5000_cbd1001_solomon": ["model.sales_group.financial_statements"], "model.sales_group.farm_tb_5000_star_solomon": ["model.sales_group.financial_statements"], "model.sales_group.farm_tb_5100_solomon": ["model.sales_group.financial_statements"], "model.sales_group.farm_tb_5200_solomon": ["model.sales_group.financial_statements"], "model.sales_group.feed_pl_1000_dnb_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.feed_pl_1000_sap": ["model.sales_group.financial_profit_loss"], "model.sales_group.feed_pl_1100_donavet_excel": ["model.sales_group.financial_profit_loss"], "model.sales_group.feed_tb_1000_dnb_solomon": ["model.sales_group.financial_statements"], "model.sales_group.feed_tb_1000_sap": ["model.sales_group.financial_statements"], "model.sales_group.feed_tb_1100_donavet_excel": ["model.sales_group.financial_statements"], "model.sales_group.food_pl_3000_and_3100": ["model.sales_group.financial_profit_loss"], "model.sales_group.food_pl_3200_lbc": ["model.sales_group.financial_profit_loss"], "model.sales_group.food_tb_3000_and_3100": ["model.sales_group.financial_statements"], "model.sales_group.food_tb_3200_lbc": ["model.sales_group.financial_statements"], "model.sales_group.qdt_pl_4200_solomon": ["model.sales_group.financial_profit_loss"], "model.sales_group.qdt_tb_4200_solomon": ["model.sales_group.financial_statements"], "model.sales_group.tech_pl_4000_qdtek": [], "model.sales_group.tech_pl_4001_qdtek_north": ["model.sales_group.financial_profit_loss"], "model.sales_group.tech_pl_4002_qdtek_south": ["model.sales_group.financial_profit_loss"], "model.sales_group.tech_pl_4300_ntt": ["model.sales_group.financial_profit_loss"], "model.sales_group.tech_tb_4000_qdtek": ["model.sales_group.financial_statements"], "model.sales_group.tech_tb_4300_ntt": ["model.sales_group.financial_statements"], "model.sales_group.financial_profit_loss": [], "model.sales_group.financial_statements": [], "model.sales_group.financial_statements_backup": [], "model.sales_group.mapping_md_balance_sheet_code": [], "model.sales_group.mapping_md_p_l_account": [], "model.sales_group.qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final": ["model.sales_group.qdt_pl_4200_solomon", "model.sales_group.qdt_tb_4200_solomon"], "model.sales_group.tech_qdtek_int_sales__actual_sales__joined": ["model.sales_group.tech_qdtek_int_sales__churn__grouped_by_customer", "model.sales_group.tech_qdtek_int_sales__customer_classs__grouped_by_month", "model.sales_group.tech_qdtek_int_sales__po_type__grouped_by_billing_number", "model.sales_group.tech_qdtek_sales__actual_sales", "model.sales_group.tech_qdtek_sales__customers"], "model.sales_group.tech_qdtek_int_sales__churn__grouped_by_customer": ["model.sales_group.tech_qdtek_sales__churns"], "model.sales_group.tech_qdtek_int_sales__customer_classs__grouped_by_month": ["model.sales_group.tech_qdtek_sales__customer_classes"], "model.sales_group.tech_qdtek_int_sales__material__distinct": ["model.sales_group.tech_qdtek_sales__brands", "model.sales_group.tech_qdtek_sales__materials", "model.sales_group.tech_qdtek_sales__product_groups"], "model.sales_group.tech_qdtek_int_sales__po_type__grouped_by_billing_number": ["model.sales_group.tech_qdtek_sales__billings"], "model.sales_group.tech_qdtek_int_sales__salesman__distinct": ["model.sales_group.tech_qdtek_sales__branches", "model.sales_group.tech_qdtek_sales__departments", "model.sales_group.tech_qdtek_sales__salesmans", "model.sales_group.tech_qdtek_sales__teams"], "model.sales_group.tech_qdtek_sales__actual_sales": [], "model.sales_group.tech_qdtek_sales__billings": [], "model.sales_group.tech_qdtek_sales__branches": [], "model.sales_group.tech_qdtek_sales__brands": [], "model.sales_group.tech_qdtek_sales__budgets": [], "model.sales_group.tech_qdtek_sales__churns": [], "model.sales_group.tech_qdtek_sales__customers": [], "model.sales_group.tech_qdtek_sales__customer_classes": [], "model.sales_group.tech_qdtek_sales__departments": [], "model.sales_group.tech_qdtek_sales__materials": [], "model.sales_group.tech_qdtek_sales__md_customers": [], "model.sales_group.tech_qdtek_sales__md_pipeline_crms": [], "model.sales_group.tech_qdtek_sales__pbi_user_permissions": [], "model.sales_group.tech_qdtek_sales__periods": [], "model.sales_group.tech_qdtek_sales__product_groups": [], "model.sales_group.tech_qdtek_sales__regions": [], "model.sales_group.tech_qdtek_sales__salesmans": [], "model.sales_group.tech_qdtek_sales__teams": [], "model.sales_group.tech_qdtek_sales__top_customers": [], "model.sales_group.tech_qdtek_stg_excel_sales__budget": ["model.sales_group.tech_qdtek_sales__budgets"], "model.sales_group.tech_qdtek_stg_excel_sales__daily_sales": ["model.sales_group.tech_qdtek_int_sales__actual_sales__joined"], "model.sales_group.tech_qdtek_stg_excel_sales__material": ["model.sales_group.tech_qdtek_int_sales__material__distinct"], "model.sales_group.tech_qdtek_stg_excel_sales__salesman": ["model.sales_group.tech_qdtek_int_sales__actual_sales__joined", "model.sales_group.tech_qdtek_int_sales__salesman__distinct"], "model.sales_group.tech_stg_excel_ntt_tb_ntt_4300": ["model.sales_group.tech_pl_4300_ntt", "model.sales_group.tech_tb_4300_ntt"], "model.sales_group.tech_stg_excel_qdtek_tb_account_mapping": ["model.sales_group.consol_mapping_account_pl_to_account_sap_union", "model.sales_group.consol_mapping_account_pl_to_account_sap_union"], "model.sales_group.tech_stg_excel_qdtek_tb_north_4001": ["model.sales_group.tech_pl_4001_qdtek_north"], "model.sales_group.tech_stg_excel_qdtek_tb_south_4002": ["model.sales_group.tech_pl_4002_qdtek_south"], "model.sales_group.tech_stg_excel_qdtek_tb_south_north_4000": ["model.sales_group.tech_pl_4000_qdtek", "model.sales_group.tech_tb_4000_qdtek"], "test.sales_group.assert_cms_billing_sales_audit": [], "test.sales_group.assert_gkitchen_sales_audit": [], "test.sales_group.assert_leboucher_ref_no_is_not_null": [], "test.sales_group.assert_leboucher_sales_audit": [], "seed.sales_group.farm_seed_sales_manual_farms": ["model.sales_group.farm_int_farms__unioned"], "seed.sales_group.industries": [], "seed.sales_group.regions": [], "seed.sales_group.mabaobi_doichieu_fileload": ["model.sales_group.ZPPR0019_formulaprice_bagamt"], "seed.sales_group.material_P_tuSX_fileload": ["model.sales_group.ZPPR0019_formulaprice_bagamt"], "seed.sales_group.feed_seed_sales_budget_2023": ["model.sales_group.feed_sales_budget_2023"], "seed.sales_group.sales_groups": [], "seed.sales_group.food_seed_sales_mapping_channels": ["model.sales_group.food_sales_mapping_channels"], "seed.sales_group.food_seed_sales_mapping_customer_groups": ["model.sales_group.food_sales_mapping_customer_groups"], "seed.sales_group.food_seed_sales_mapping_lbc_customers_2023_03_27": ["model.sales_group.food_stg_excel_sales__master_data_customer_lbc"], "seed.sales_group.food_seed_sales_mapping_lbc_sales_groups": ["model.sales_group.food_sales_mapping_lbc_sales_groups"], "seed.sales_group.food_seed_sales_mapping_materials": ["model.sales_group.food_sales_mapping_materials"], "seed.sales_group.food_seed_scorecard_budget_2023": ["model.sales_group.food_scorecard_kpi_budget"], "seed.sales_group.food_seed_scorecard_hierarchies_costelement": ["model.sales_group.food_mapping_hierarchies_costelement"], "seed.sales_group.food_seed_scorecard_mapping_categories": ["model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_revenue", "model.sales_group.food_mapping_categories"], "seed.sales_group.food_seed_scorecard_mapping_cost_center_ccgroup": ["model.sales_group.food_mapping_costcenter_costcentergroup"], "seed.sales_group.food_seed_scorecard_mapping_pl_and_plgroup": ["model.sales_group.food_mapping_pl_plgroup"], "seed.sales_group.food_seed_scorecard_mapping_sales_groups": ["model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_cogs", "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost"], "seed.sales_group.food_seed_scorecard_mapping_subcategories": ["model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_revenue", "model.sales_group.food_mapping_subcategories"], "seed.sales_group.mapping_bs_gl_account": ["model.sales_group.consol_mapping_bs_gl_account"], "seed.sales_group.mapping_legal_company_code_currency": ["model.sales_group.consol_mapping_legal_company_code_currency"], "seed.sales_group.mapping_md_bs": ["model.sales_group.mapping_md_balance_sheet_code"], "seed.sales_group.mapping_md_p_and_l_account": ["model.sales_group.mapping_md_p_l_account"], "seed.sales_group.mapping_p_and_l_account": ["model.sales_group.consol_mapping_p_and_l_gl_account"], "seed.sales_group.period_input": ["model.sales_group.consol_fiscal_period"], "seed.sales_group.pbi_user_permission": ["model.sales_group.tech_qdtek_sales__pbi_user_permissions"], "seed.sales_group.period": ["model.sales_group.tech_qdtek_sales__periods"], "seed.sales_group.region": ["model.sales_group.tech_qdtek_sales__regions"], "seed.sales_group.team": ["model.sales_group.tech_qdtek_int_sales__actual_sales__joined"], "seed.sales_group.top_customer": ["model.sales_group.tech_qdtek_sales__top_customers"], "test.sales_group.dbt_expectations_expect_column_values_to_be_unique_food_gkitchen_sales_posting_date.f265ddc94c": [], "test.sales_group.dbt_expectations_expect_column_values_to_not_be_null_food_leboucher_sales_posting_date.32cf50cc7e": [], "test.sales_group.dbt_expectations_expect_column_values_to_be_unique_food_leboucher_sales_posting_date.336f582803": [], "test.sales_group.dbt_utils_recency_food_cms_billing_sales_day__posting_date__0.52e3fc6071": [], "model.sales_group.food_fi_scorecard": [], "model.sales_group.food_stg_sap_s4__fi_0fi_acdoca_10": ["model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_cogs", "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_manufacturing_cost", "model.sales_group.food_int_fi_0fi_acdoca_10__filtered_to_revenue", "model.sales_group.food_int_fi_ofi_acdoca_10__filtered_to_sales"], "source.sales_group.farm_excel_sales.master_data_farm_info": ["model.sales_group.farm_stg_excel__master_farms"], "source.sales_group.farm_excel_sales.master_data_adj": ["model.sales_group.farm_stg_excel__master_data_adj"], "source.sales_group.farm_excel_sales.master_data_rev": ["model.sales_group.farm_stg_excel__master_data_rev"], "source.sales_group.farm_redshift__prd__dwh.f_actualsales": ["model.sales_group.farm_stg_redshift__sales_cammy"], "source.sales_group.farm_redshift__prd__dwh.d_material": ["model.sales_group.farm_int_sales_cammy__joined_dims"], "source.sales_group.farm_redshift__prd__dwh.d_distributionchannel": ["model.sales_group.farm_int_sales_cammy__joined_dims"], "source.sales_group.farm_redshift__prd__dwh.d_salesmanager": ["model.sales_group.farm_int_sales_cammy__joined_dims"], "source.sales_group.farm_sol_dnb2001app.vsdwh_salesvolumed": ["model.sales_group.farm_stg_sol__vsdwh_salesvolumed"], "source.sales_group.farm_sol_dnb2001app.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_dnb2001app_xp_01610ab_accthist_erp_final", "model.sales_group.feed_stg_sol_gfdnbapp_cn_dnb_tb_1000"], "source.sales_group.farm_sol_fasiaapp.vsdwh_salesvolumed": ["model.sales_group.farm_stg_sol__vsdwh_salesvolumed"], "source.sales_group.farm_sol_fasiaapp.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_fasiaapp_xp_01610ab_accthist_erp_final"], "source.sales_group.farm_sol_arwhyapp.vsdwh_salesvolumed": ["model.sales_group.farm_stg_sol__vsdwh_salesvolumed"], "source.sales_group.farm_sol_arwhyapp.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_arwhyapp_xp_01610ab_accthist_erp_final"], "source.sales_group.farm_sol_mtr2001app.vsdwh_salesvolumed": ["model.sales_group.farm_stg_sol__vsdwh_salesvolumed"], "source.sales_group.farm_sol_mtr2001app.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_mtr2001app_xp_01610ab_accthist_erp_final"], "source.sales_group.farm_sol_mtr1001app.vsdwh_salesvolumed": ["model.sales_group.farm_stg_sol__vsdwh_salesvolumed"], "source.sales_group.farm_sol_mtr1001app.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_mtr1001app_xp_01610ab_accthist_erp_final"], "source.sales_group.farm_sol_mtr2002app.vsdwh_salesvolumed": ["model.sales_group.farm_stg_sol__vsdwh_salesvolumed"], "source.sales_group.farm_sol_mtr2002app.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_mtr2002app_xp_01610ab_accthist_erp_final"], "source.sales_group.farm_sol_cbd1001app.vsdwh_salesvolumed": ["model.sales_group.farm_stg_sol__vsdwh_salesvolumed"], "source.sales_group.farm_sol_cbd1001app.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_cbd1001app_xp_01610ab_accthist_erp_final"], "source.sales_group.farm_sol_arwblapp.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_arwblapp_xp_01610ab_accthist_erp_final"], "source.sales_group.farm_sol_bsh1001app.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_bsh1001app_xp_01610ab_accthist_erp_final"], "source.sales_group.farm_sol_starnapp.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_starnapp_xp_01610ab_accthist_erp_final"], "source.sales_group.farm_sol_gfcamapp1.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_gfcamapp1_xp_01610ab_accthist_erp_final"], "source.sales_group.farm_sol_mym1001app.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_mym1001app_xp_01610ab_accthist_erp_final"], "source.sales_group.farm_sol_laoapp.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_laoapp_xp_01610ab_accthist_erp_final"], "source.sales_group.farm_sol_gfvmmapp.xp_01610ab_accthist_erp_final": ["model.sales_group.farm_stg_sol_gfvmmapp_xp_01610ab_accthist_erp_final"], "source.sales_group.feed_excel_donavet.tb_donavet_1100": ["model.sales_group.feed_stg_excel_donavet_tb_donavet_1100"], "source.sales_group.feed_excel_donavet.tb_account_mapping": ["model.sales_group.feed_stg_excel_donavet_tb_account_mapping"], "source.sales_group.feed_sap_ecc.fi_0fi_gl_12": ["model.sales_group.feed_stg_sap_ecc__fi_0fi_gl_12"], "source.sales_group.feed_sap_ecc.draft_mb51_006": ["model.sales_group.feed_stg_sap_ecc__draft_mb51_006"], "source.sales_group.feed_sap_ecc.draft_mm60_006": ["model.sales_group.feed_stg_sap_ecc__draft_mm60_006"], "source.sales_group.feed_sap_ecc.draft_zmllistn_005": ["model.sales_group.feed_stg_sap_ecc__draft_zmllistn_005"], "source.sales_group.feed_sap_ecc.draft_zppr0019_006": ["model.sales_group.feed_stg_sap_ecc__draft_zppr0019_006"], "source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_ke24_006": ["model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke24_006"], "source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_ke25_006": ["model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_ke25_006"], "source.sales_group.feed_sap_ecc_draft.feed_seed_margin_draft_mb5b_005": ["model.sales_group.feed_stg_sap_ecc__feed_seed_margin_draft_mb5b_005"], "source.sales_group.feed_excel_gfdnbapp.cn_dnb_tb_1000": [], "source.sales_group.food_excel_sales.master_data_customer_lbc": ["model.sales_group.base_excel_sales__master_data_customer_lbc"], "source.sales_group.food_excel_sales.md_channels": ["model.sales_group.food_stg_excel_sales__md_channels"], "source.sales_group.food_excel_sales.md_sales_groups": ["model.sales_group.food_stg_excel_sales__lbc_sales_groups"], "source.sales_group.food_excel_sales.md_customer_groups": ["model.sales_group.food_stg_excel_sales__md_customer_groups"], "source.sales_group.food_excel_sales.sales_target_by_channels": ["model.sales_group.food_stg_excel_sales__target_by_channel"], "source.sales_group.food_excel_sales.sales_target_by_channels_products": ["model.sales_group.food_stg_excel_sales__target_by_channel_by_product"], "source.sales_group.food_excel_sales.md_budget_bpkt": ["model.sales_group.food_stg_excel_sales__budget_of_accounting_department"], "source.sales_group.food_excel_sales.md_products": ["model.sales_group.food_stg_excel_sales__md_products"], "source.sales_group.food_excel_sales.md_products_conversion_rate_lbc": ["model.sales_group.food_stg_excel_sales__md_products_conversion_rate_lbc"], "source.sales_group.food_misa_22.generalledger": ["model.sales_group.food_stg_misa__lbc_generalledger"], "source.sales_group.food_misa_22.unit": [], "source.sales_group.food_misa_22.saorder": [], "source.sales_group.food_misa.generalledger": ["model.sales_group.food_stg_misa__lbc_generalledger"], "source.sales_group.food_misa.unit": ["model.sales_group.food_int_misa_lbc2022_generalledger__filtered_to_sales"], "source.sales_group.food_misa.saorder": ["model.sales_group.food_int_misa_lbc2022_generalledger__filtered_to_sales"], "source.sales_group.food_excel_misa_lbc.tp_lbc_3200_v2": ["model.sales_group.food_stg_excel_misa_lbc_tp_lbc_3200_v2"], "source.sales_group.food_excel_misa_lbc.tb_account_mapping": ["model.sales_group.food_stg_excel_misa_lbc_tb_account_mapping"], "source.sales_group.food_sap_s4.md_0accnt_grp_text": ["model.sales_group.food_stg_sap_s4__md_0accnt_grp_text"], "source.sales_group.food_sap_s4.md_0comp_code_attr": [], "source.sales_group.food_sap_s4.md_0cust_group_text": ["model.sales_group.food_stg_sap_s4__md_0cust_group_text"], "source.sales_group.food_sap_s4.fi_0fi_acdoca_10": ["model.sales_group.food_stg_sap_s4__fi_0fi_acdoca_10"], "source.sales_group.food_sap_s4.md_0sales_grp_text": ["model.sales_group.food_stg_sap_s4__md_0sales_grp_text"], "source.sales_group.food_sap_s4.md_0customer_text": ["model.sales_group.food_stg_sap_s4__md_0customer_text"], "source.sales_group.food_sap_s4.md_0cust_grp1_text": ["model.sales_group.food_stg_sap_s4__md_0cust_grp1_text"], "source.sales_group.food_sap_s4.md_0cust_grp2_text": ["model.sales_group.food_stg_sap_s4__md_0cust_grp2_text"], "source.sales_group.food_sap_s4.md_0distr_chan_text": ["model.sales_group.food_stg_sap_s4__md_0distr_chan_text"], "source.sales_group.food_sap_s4.md_0material_text": ["model.sales_group.food_stg_sap_s4__md_0material_text"], "source.sales_group.food_sap_s4.md_0sales_off_text": ["model.sales_group.food_stg_sap_s4__md_0sales_off_text"], "source.sales_group.food_sap_s4.md_0plant_text": ["model.sales_group.food_stg_sap_s4__md_0plant_text"], "source.sales_group.food_sap_s4.md_0sales_dist_text": ["model.sales_group.food_stg_sap_s4__md_0sales_dist_text"], "source.sales_group.food_sap_s4.md_0matl_type_text": ["model.sales_group.food_stg_sap_s4__md_0matl_type_text"], "source.sales_group.food_sap_s4.md_0material_attr": ["model.sales_group.food_stg_sap_s4__md_0material_attr"], "source.sales_group.food_sap_s4.md_0prod_hier_text": ["model.sales_group.food_stg_sap_s4__md_0prod_hier_text"], "source.sales_group.food_sap_s4.md_0comp_code_text": ["model.sales_group.food_stg_sap_s4__md_0comp_code_text"], "source.sales_group.food_sap_s4.md_0costelmnt_text": ["model.sales_group.food_stg_sap_s4__md_0costelmnt_text"], "source.sales_group.food_sap_s4.sd_2lis_13_vditm": ["model.sales_group.food_stg_sap_s4__sd_2lis_13_vditm"], "source.sales_group.food_sap_s4.sd_2lis_11_vaitm": ["model.sales_group.food_stg_sap_s4__sd_2lis_11_vaitm"], "source.sales_group.food_sap_s4.tbl_customer_sale_person": ["model.sales_group.food_stg_sap_s4__tbl_customer_sale_person"], "source.sales_group.food_sap_s4.md_0costcenter_text": ["model.sales_group.food_stg_sap_s4__md_0costcenter_text"], "source.sales_group.food_sap_s4.mm_2lis_03_bf": ["model.sales_group.food_stg_sap_s4__mm_2lis_03_bf"], "source.sales_group.food_sap_s4.mm_2lis_03_um": ["model.sales_group.food_stg_sap_s4__mm_2lis_03_um"], "source.sales_group.food_sap_s4.fi_0fi_gl_12": ["model.sales_group.food_stg_sap_s4__fi_0fi_gl_12"], "source.sales_group.food_sap_s4.tbl_fcml_ccs_r_all_v": ["model.sales_group.food_stg_sap_s4__tbl_fcml_ccs_r_all_v"], "source.sales_group.food_sap_s4.md_0bill_type_text": ["model.sales_group.food_stg_sap_s4__md_0bill_type_text"], "source.sales_group.food_sap_s4.tbl_vbpa": ["model.sales_group.food_stg_sap_s4__tbl_vbpa"], "source.sales_group.food_sap_s4.tbl_ztt_zsdc0016": ["model.sales_group.food_stg_sap_s4__tbl_ztt_zsdc0016", "model.sales_group.food_stg_sap_s4__tbl_ztt_zsdc0016"], "source.sales_group.food_sap_s4.md_0ord_reason_text": ["model.sales_group.food_stg_sap_s4__md_0ord_reason_text"], "source.sales_group.food_sol_gnf1001apprepl.vs_safoorderl_salesadmin": ["model.sales_group.food_stg_sol__gnf1001apprepl_vsdwh_salesvolumed"], "source.sales_group.group_excel_financial_statements.md_rate": ["model.sales_group.consol_mapping_exchange_rate"], "source.sales_group.qdt_sol_log5001app.xp_01610ab_accthist_erp_final": ["model.sales_group.qdt_stg_sol_log5001appxp_01610ab_accthist_erp_final"], "source.sales_group.qdtek_excel_sales.customer": ["model.sales_group.tech_qdtek_sales__md_customers"], "source.sales_group.qdtek_excel_sales.daily_sales": ["model.sales_group.tech_qdtek_stg_excel_sales__daily_sales"], "source.sales_group.qdtek_excel_sales.material": ["model.sales_group.tech_qdtek_stg_excel_sales__material"], "source.sales_group.qdtek_excel_sales.pipeline_crm": ["model.sales_group.tech_qdtek_sales__md_pipeline_crms"], "source.sales_group.qdtek_excel_sales.forecast_budget": ["model.sales_group.tech_qdtek_stg_excel_sales__budget"], "source.sales_group.qdtek_excel_sales.salesman": ["model.sales_group.tech_qdtek_stg_excel_sales__salesman"], "source.sales_group.tech_excel_qdtek.tb_south_north_4000": ["model.sales_group.tech_stg_excel_qdtek_tb_south_north_4000"], "source.sales_group.tech_excel_qdtek.tb_qdtek_north": ["model.sales_group.tech_stg_excel_qdtek_tb_north_4001"], "source.sales_group.tech_excel_qdtek.tb_qdtek_south": ["model.sales_group.tech_stg_excel_qdtek_tb_south_4002"], "source.sales_group.tech_excel_qdtek.tb_account_mapping": ["model.sales_group.tech_stg_excel_qdtek_tb_account_mapping"], "source.sales_group.tech_excel_qdtek.tb_ntt_4300": [], "source.sales_group.tech_excel_ntt.tb_ntt_4300": ["model.sales_group.tech_stg_excel_ntt_tb_ntt_4300"]}, "group_map": {}}